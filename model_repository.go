/*
Delphix DCT API

Delphix DCT API

API version: 2.0.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// Repository struct for Repository
type Repository struct {
	// Entity id of the repository.
	Id *string `json:"id,omitempty"`
	// Name of the repository.
	Name *string `json:"name,omitempty"`
	// The database type of this repository.
	DatabaseType *string `json:"database_type,omitempty"`
	// Flag indicating whether the repository should be used for provisioning.
	AllowProvisioning *bool `json:"allow_provisioning,omitempty"`
	// Flag indicating whether this repository can be used by the Delphix Engine for internal processing.
	IsStaging *bool `json:"is_staging,omitempty"`
	// The Oracle base where database binaries are located.
	OracleBase *string `json:"oracle_base,omitempty"`
	// Version of the repository.
	Version *string `json:"version,omitempty"`
	// 32 or 64 bits.
	Bits *int32 `json:"bits,omitempty"`
	// Group name of the user that owns the install.
	InstallGroup *string `json:"install_group,omitempty"`
	// User name of the user that owns the install.
	InstallUser *string `json:"install_user,omitempty"`
	// Flag indicating whether the install supports Oracle RAC.
	Rac *bool `json:"rac,omitempty"`
	// The network ports for connecting to the database instance.
	Ports []int64 `json:"ports,omitempty"`
	// Fully qualified name of the dump history file.
	DumpHistoryFile *string `json:"dump_history_file,omitempty"`
	// Database page size for the SAP ASE instance.
	PageSize *int64 `json:"page_size,omitempty"`
	// Account the database server instance is running as.
	Owner *string `json:"owner,omitempty"`
	// Directory path where the installation is located.
	InstallationPath *string `json:"installation_path,omitempty"`
	// This property determines if the full-text search and semantic search is installed or not.
	FulltextInstalled *bool `json:"fulltext_installed,omitempty"`
	// The internal version is tied to the data format of a database and is used to detect compatibility.
	InternalVersion *int64 `json:"internal_version,omitempty"`
}

// NewRepository instantiates a new Repository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepository() *Repository {
	this := Repository{}
	return &this
}

// NewRepositoryWithDefaults instantiates a new Repository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryWithDefaults() *Repository {
	this := Repository{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Repository) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Repository) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Repository) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Repository) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Repository) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Repository) SetName(v string) {
	o.Name = &v
}

// GetDatabaseType returns the DatabaseType field value if set, zero value otherwise.
func (o *Repository) GetDatabaseType() string {
	if o == nil || o.DatabaseType == nil {
		var ret string
		return ret
	}
	return *o.DatabaseType
}

// GetDatabaseTypeOk returns a tuple with the DatabaseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDatabaseTypeOk() (*string, bool) {
	if o == nil || o.DatabaseType == nil {
		return nil, false
	}
	return o.DatabaseType, true
}

// HasDatabaseType returns a boolean if a field has been set.
func (o *Repository) HasDatabaseType() bool {
	if o != nil && o.DatabaseType != nil {
		return true
	}

	return false
}

// SetDatabaseType gets a reference to the given string and assigns it to the DatabaseType field.
func (o *Repository) SetDatabaseType(v string) {
	o.DatabaseType = &v
}

// GetAllowProvisioning returns the AllowProvisioning field value if set, zero value otherwise.
func (o *Repository) GetAllowProvisioning() bool {
	if o == nil || o.AllowProvisioning == nil {
		var ret bool
		return ret
	}
	return *o.AllowProvisioning
}

// GetAllowProvisioningOk returns a tuple with the AllowProvisioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetAllowProvisioningOk() (*bool, bool) {
	if o == nil || o.AllowProvisioning == nil {
		return nil, false
	}
	return o.AllowProvisioning, true
}

// HasAllowProvisioning returns a boolean if a field has been set.
func (o *Repository) HasAllowProvisioning() bool {
	if o != nil && o.AllowProvisioning != nil {
		return true
	}

	return false
}

// SetAllowProvisioning gets a reference to the given bool and assigns it to the AllowProvisioning field.
func (o *Repository) SetAllowProvisioning(v bool) {
	o.AllowProvisioning = &v
}

// GetIsStaging returns the IsStaging field value if set, zero value otherwise.
func (o *Repository) GetIsStaging() bool {
	if o == nil || o.IsStaging == nil {
		var ret bool
		return ret
	}
	return *o.IsStaging
}

// GetIsStagingOk returns a tuple with the IsStaging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIsStagingOk() (*bool, bool) {
	if o == nil || o.IsStaging == nil {
		return nil, false
	}
	return o.IsStaging, true
}

// HasIsStaging returns a boolean if a field has been set.
func (o *Repository) HasIsStaging() bool {
	if o != nil && o.IsStaging != nil {
		return true
	}

	return false
}

// SetIsStaging gets a reference to the given bool and assigns it to the IsStaging field.
func (o *Repository) SetIsStaging(v bool) {
	o.IsStaging = &v
}

// GetOracleBase returns the OracleBase field value if set, zero value otherwise.
func (o *Repository) GetOracleBase() string {
	if o == nil || o.OracleBase == nil {
		var ret string
		return ret
	}
	return *o.OracleBase
}

// GetOracleBaseOk returns a tuple with the OracleBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetOracleBaseOk() (*string, bool) {
	if o == nil || o.OracleBase == nil {
		return nil, false
	}
	return o.OracleBase, true
}

// HasOracleBase returns a boolean if a field has been set.
func (o *Repository) HasOracleBase() bool {
	if o != nil && o.OracleBase != nil {
		return true
	}

	return false
}

// SetOracleBase gets a reference to the given string and assigns it to the OracleBase field.
func (o *Repository) SetOracleBase(v string) {
	o.OracleBase = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Repository) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Repository) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Repository) SetVersion(v string) {
	o.Version = &v
}

// GetBits returns the Bits field value if set, zero value otherwise.
func (o *Repository) GetBits() int32 {
	if o == nil || o.Bits == nil {
		var ret int32
		return ret
	}
	return *o.Bits
}

// GetBitsOk returns a tuple with the Bits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetBitsOk() (*int32, bool) {
	if o == nil || o.Bits == nil {
		return nil, false
	}
	return o.Bits, true
}

// HasBits returns a boolean if a field has been set.
func (o *Repository) HasBits() bool {
	if o != nil && o.Bits != nil {
		return true
	}

	return false
}

// SetBits gets a reference to the given int32 and assigns it to the Bits field.
func (o *Repository) SetBits(v int32) {
	o.Bits = &v
}

// GetInstallGroup returns the InstallGroup field value if set, zero value otherwise.
func (o *Repository) GetInstallGroup() string {
	if o == nil || o.InstallGroup == nil {
		var ret string
		return ret
	}
	return *o.InstallGroup
}

// GetInstallGroupOk returns a tuple with the InstallGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetInstallGroupOk() (*string, bool) {
	if o == nil || o.InstallGroup == nil {
		return nil, false
	}
	return o.InstallGroup, true
}

// HasInstallGroup returns a boolean if a field has been set.
func (o *Repository) HasInstallGroup() bool {
	if o != nil && o.InstallGroup != nil {
		return true
	}

	return false
}

// SetInstallGroup gets a reference to the given string and assigns it to the InstallGroup field.
func (o *Repository) SetInstallGroup(v string) {
	o.InstallGroup = &v
}

// GetInstallUser returns the InstallUser field value if set, zero value otherwise.
func (o *Repository) GetInstallUser() string {
	if o == nil || o.InstallUser == nil {
		var ret string
		return ret
	}
	return *o.InstallUser
}

// GetInstallUserOk returns a tuple with the InstallUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetInstallUserOk() (*string, bool) {
	if o == nil || o.InstallUser == nil {
		return nil, false
	}
	return o.InstallUser, true
}

// HasInstallUser returns a boolean if a field has been set.
func (o *Repository) HasInstallUser() bool {
	if o != nil && o.InstallUser != nil {
		return true
	}

	return false
}

// SetInstallUser gets a reference to the given string and assigns it to the InstallUser field.
func (o *Repository) SetInstallUser(v string) {
	o.InstallUser = &v
}

// GetRac returns the Rac field value if set, zero value otherwise.
func (o *Repository) GetRac() bool {
	if o == nil || o.Rac == nil {
		var ret bool
		return ret
	}
	return *o.Rac
}

// GetRacOk returns a tuple with the Rac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetRacOk() (*bool, bool) {
	if o == nil || o.Rac == nil {
		return nil, false
	}
	return o.Rac, true
}

// HasRac returns a boolean if a field has been set.
func (o *Repository) HasRac() bool {
	if o != nil && o.Rac != nil {
		return true
	}

	return false
}

// SetRac gets a reference to the given bool and assigns it to the Rac field.
func (o *Repository) SetRac(v bool) {
	o.Rac = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *Repository) GetPorts() []int64 {
	if o == nil || o.Ports == nil {
		var ret []int64
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetPortsOk() ([]int64, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *Repository) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []int64 and assigns it to the Ports field.
func (o *Repository) SetPorts(v []int64) {
	o.Ports = v
}

// GetDumpHistoryFile returns the DumpHistoryFile field value if set, zero value otherwise.
func (o *Repository) GetDumpHistoryFile() string {
	if o == nil || o.DumpHistoryFile == nil {
		var ret string
		return ret
	}
	return *o.DumpHistoryFile
}

// GetDumpHistoryFileOk returns a tuple with the DumpHistoryFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDumpHistoryFileOk() (*string, bool) {
	if o == nil || o.DumpHistoryFile == nil {
		return nil, false
	}
	return o.DumpHistoryFile, true
}

// HasDumpHistoryFile returns a boolean if a field has been set.
func (o *Repository) HasDumpHistoryFile() bool {
	if o != nil && o.DumpHistoryFile != nil {
		return true
	}

	return false
}

// SetDumpHistoryFile gets a reference to the given string and assigns it to the DumpHistoryFile field.
func (o *Repository) SetDumpHistoryFile(v string) {
	o.DumpHistoryFile = &v
}

// GetPageSize returns the PageSize field value if set, zero value otherwise.
func (o *Repository) GetPageSize() int64 {
	if o == nil || o.PageSize == nil {
		var ret int64
		return ret
	}
	return *o.PageSize
}

// GetPageSizeOk returns a tuple with the PageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetPageSizeOk() (*int64, bool) {
	if o == nil || o.PageSize == nil {
		return nil, false
	}
	return o.PageSize, true
}

// HasPageSize returns a boolean if a field has been set.
func (o *Repository) HasPageSize() bool {
	if o != nil && o.PageSize != nil {
		return true
	}

	return false
}

// SetPageSize gets a reference to the given int64 and assigns it to the PageSize field.
func (o *Repository) SetPageSize(v int64) {
	o.PageSize = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Repository) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Repository) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Repository) SetOwner(v string) {
	o.Owner = &v
}

// GetInstallationPath returns the InstallationPath field value if set, zero value otherwise.
func (o *Repository) GetInstallationPath() string {
	if o == nil || o.InstallationPath == nil {
		var ret string
		return ret
	}
	return *o.InstallationPath
}

// GetInstallationPathOk returns a tuple with the InstallationPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetInstallationPathOk() (*string, bool) {
	if o == nil || o.InstallationPath == nil {
		return nil, false
	}
	return o.InstallationPath, true
}

// HasInstallationPath returns a boolean if a field has been set.
func (o *Repository) HasInstallationPath() bool {
	if o != nil && o.InstallationPath != nil {
		return true
	}

	return false
}

// SetInstallationPath gets a reference to the given string and assigns it to the InstallationPath field.
func (o *Repository) SetInstallationPath(v string) {
	o.InstallationPath = &v
}

// GetFulltextInstalled returns the FulltextInstalled field value if set, zero value otherwise.
func (o *Repository) GetFulltextInstalled() bool {
	if o == nil || o.FulltextInstalled == nil {
		var ret bool
		return ret
	}
	return *o.FulltextInstalled
}

// GetFulltextInstalledOk returns a tuple with the FulltextInstalled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetFulltextInstalledOk() (*bool, bool) {
	if o == nil || o.FulltextInstalled == nil {
		return nil, false
	}
	return o.FulltextInstalled, true
}

// HasFulltextInstalled returns a boolean if a field has been set.
func (o *Repository) HasFulltextInstalled() bool {
	if o != nil && o.FulltextInstalled != nil {
		return true
	}

	return false
}

// SetFulltextInstalled gets a reference to the given bool and assigns it to the FulltextInstalled field.
func (o *Repository) SetFulltextInstalled(v bool) {
	o.FulltextInstalled = &v
}

// GetInternalVersion returns the InternalVersion field value if set, zero value otherwise.
func (o *Repository) GetInternalVersion() int64 {
	if o == nil || o.InternalVersion == nil {
		var ret int64
		return ret
	}
	return *o.InternalVersion
}

// GetInternalVersionOk returns a tuple with the InternalVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetInternalVersionOk() (*int64, bool) {
	if o == nil || o.InternalVersion == nil {
		return nil, false
	}
	return o.InternalVersion, true
}

// HasInternalVersion returns a boolean if a field has been set.
func (o *Repository) HasInternalVersion() bool {
	if o != nil && o.InternalVersion != nil {
		return true
	}

	return false
}

// SetInternalVersion gets a reference to the given int64 and assigns it to the InternalVersion field.
func (o *Repository) SetInternalVersion(v int64) {
	o.InternalVersion = &v
}

func (o Repository) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DatabaseType != nil {
		toSerialize["database_type"] = o.DatabaseType
	}
	if o.AllowProvisioning != nil {
		toSerialize["allow_provisioning"] = o.AllowProvisioning
	}
	if o.IsStaging != nil {
		toSerialize["is_staging"] = o.IsStaging
	}
	if o.OracleBase != nil {
		toSerialize["oracle_base"] = o.OracleBase
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Bits != nil {
		toSerialize["bits"] = o.Bits
	}
	if o.InstallGroup != nil {
		toSerialize["install_group"] = o.InstallGroup
	}
	if o.InstallUser != nil {
		toSerialize["install_user"] = o.InstallUser
	}
	if o.Rac != nil {
		toSerialize["rac"] = o.Rac
	}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	if o.DumpHistoryFile != nil {
		toSerialize["dump_history_file"] = o.DumpHistoryFile
	}
	if o.PageSize != nil {
		toSerialize["page_size"] = o.PageSize
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.InstallationPath != nil {
		toSerialize["installation_path"] = o.InstallationPath
	}
	if o.FulltextInstalled != nil {
		toSerialize["fulltext_installed"] = o.FulltextInstalled
	}
	if o.InternalVersion != nil {
		toSerialize["internal_version"] = o.InternalVersion
	}
	return json.Marshal(toSerialize)
}

type NullableRepository struct {
	value *Repository
	isSet bool
}

func (v NullableRepository) Get() *Repository {
	return v.value
}

func (v *NullableRepository) Set(val *Repository) {
	v.value = val
	v.isSet = true
}

func (v NullableRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepository(val *Repository) *NullableRepository {
	return &NullableRepository{value: val, isSet: true}
}

func (v NullableRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


