/*
Delphix DCT API

Delphix DCT API

API version: 3.5.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the HyperscaleConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperscaleConnector{}

// HyperscaleConnector A Hyperscale connector to read/write data from/to a datasource.
type HyperscaleConnector struct {
	// The ID of the Hyperscale Connector.
	Id *string `json:"id,omitempty"`
	// The ID of the Hyperscale instance of this Dataset.
	HyperscaleInstanceId *string `json:"hyperscale_instance_id,omitempty"`
	// The username this Connector will use to connect to the source database.
	SourceUsername *string `json:"source_username,omitempty"`
	// The password this Connector will use to connect to the source database.
	SourcePassword *string `json:"source_password,omitempty"`
	// The JDBC URL used to connect to the source database.
	SourceJdbcUrl *string `json:"source_jdbc_url,omitempty"`
	SourceConnectionProperties *map[string]string `json:"source_connection_properties,omitempty"`
	// The username this Connector will use to connect to the target database.
	TargetUsername *string `json:"target_username,omitempty"`
	// The username this Connector will use to connect to the target database.
	TargetPassword *string `json:"target_password,omitempty"`
	// The JDBC URL used to connect to the target database.
	TargetJdbcUrl *string `json:"target_jdbc_url,omitempty"`
	TargetConnectionProperties *map[string]string `json:"target_connection_properties,omitempty"`
}

// NewHyperscaleConnector instantiates a new HyperscaleConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperscaleConnector() *HyperscaleConnector {
	this := HyperscaleConnector{}
	return &this
}

// NewHyperscaleConnectorWithDefaults instantiates a new HyperscaleConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperscaleConnectorWithDefaults() *HyperscaleConnector {
	this := HyperscaleConnector{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *HyperscaleConnector) SetId(v string) {
	o.Id = &v
}

// GetHyperscaleInstanceId returns the HyperscaleInstanceId field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetHyperscaleInstanceId() string {
	if o == nil || IsNil(o.HyperscaleInstanceId) {
		var ret string
		return ret
	}
	return *o.HyperscaleInstanceId
}

// GetHyperscaleInstanceIdOk returns a tuple with the HyperscaleInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetHyperscaleInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.HyperscaleInstanceId) {
		return nil, false
	}
	return o.HyperscaleInstanceId, true
}

// HasHyperscaleInstanceId returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasHyperscaleInstanceId() bool {
	if o != nil && !IsNil(o.HyperscaleInstanceId) {
		return true
	}

	return false
}

// SetHyperscaleInstanceId gets a reference to the given string and assigns it to the HyperscaleInstanceId field.
func (o *HyperscaleConnector) SetHyperscaleInstanceId(v string) {
	o.HyperscaleInstanceId = &v
}

// GetSourceUsername returns the SourceUsername field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetSourceUsername() string {
	if o == nil || IsNil(o.SourceUsername) {
		var ret string
		return ret
	}
	return *o.SourceUsername
}

// GetSourceUsernameOk returns a tuple with the SourceUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetSourceUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SourceUsername) {
		return nil, false
	}
	return o.SourceUsername, true
}

// HasSourceUsername returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasSourceUsername() bool {
	if o != nil && !IsNil(o.SourceUsername) {
		return true
	}

	return false
}

// SetSourceUsername gets a reference to the given string and assigns it to the SourceUsername field.
func (o *HyperscaleConnector) SetSourceUsername(v string) {
	o.SourceUsername = &v
}

// GetSourcePassword returns the SourcePassword field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetSourcePassword() string {
	if o == nil || IsNil(o.SourcePassword) {
		var ret string
		return ret
	}
	return *o.SourcePassword
}

// GetSourcePasswordOk returns a tuple with the SourcePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetSourcePasswordOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePassword) {
		return nil, false
	}
	return o.SourcePassword, true
}

// HasSourcePassword returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasSourcePassword() bool {
	if o != nil && !IsNil(o.SourcePassword) {
		return true
	}

	return false
}

// SetSourcePassword gets a reference to the given string and assigns it to the SourcePassword field.
func (o *HyperscaleConnector) SetSourcePassword(v string) {
	o.SourcePassword = &v
}

// GetSourceJdbcUrl returns the SourceJdbcUrl field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetSourceJdbcUrl() string {
	if o == nil || IsNil(o.SourceJdbcUrl) {
		var ret string
		return ret
	}
	return *o.SourceJdbcUrl
}

// GetSourceJdbcUrlOk returns a tuple with the SourceJdbcUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetSourceJdbcUrlOk() (*string, bool) {
	if o == nil || IsNil(o.SourceJdbcUrl) {
		return nil, false
	}
	return o.SourceJdbcUrl, true
}

// HasSourceJdbcUrl returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasSourceJdbcUrl() bool {
	if o != nil && !IsNil(o.SourceJdbcUrl) {
		return true
	}

	return false
}

// SetSourceJdbcUrl gets a reference to the given string and assigns it to the SourceJdbcUrl field.
func (o *HyperscaleConnector) SetSourceJdbcUrl(v string) {
	o.SourceJdbcUrl = &v
}

// GetSourceConnectionProperties returns the SourceConnectionProperties field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetSourceConnectionProperties() map[string]string {
	if o == nil || IsNil(o.SourceConnectionProperties) {
		var ret map[string]string
		return ret
	}
	return *o.SourceConnectionProperties
}

// GetSourceConnectionPropertiesOk returns a tuple with the SourceConnectionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetSourceConnectionPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.SourceConnectionProperties) {
		return nil, false
	}
	return o.SourceConnectionProperties, true
}

// HasSourceConnectionProperties returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasSourceConnectionProperties() bool {
	if o != nil && !IsNil(o.SourceConnectionProperties) {
		return true
	}

	return false
}

// SetSourceConnectionProperties gets a reference to the given map[string]string and assigns it to the SourceConnectionProperties field.
func (o *HyperscaleConnector) SetSourceConnectionProperties(v map[string]string) {
	o.SourceConnectionProperties = &v
}

// GetTargetUsername returns the TargetUsername field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetTargetUsername() string {
	if o == nil || IsNil(o.TargetUsername) {
		var ret string
		return ret
	}
	return *o.TargetUsername
}

// GetTargetUsernameOk returns a tuple with the TargetUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetTargetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.TargetUsername) {
		return nil, false
	}
	return o.TargetUsername, true
}

// HasTargetUsername returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasTargetUsername() bool {
	if o != nil && !IsNil(o.TargetUsername) {
		return true
	}

	return false
}

// SetTargetUsername gets a reference to the given string and assigns it to the TargetUsername field.
func (o *HyperscaleConnector) SetTargetUsername(v string) {
	o.TargetUsername = &v
}

// GetTargetPassword returns the TargetPassword field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetTargetPassword() string {
	if o == nil || IsNil(o.TargetPassword) {
		var ret string
		return ret
	}
	return *o.TargetPassword
}

// GetTargetPasswordOk returns a tuple with the TargetPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetTargetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.TargetPassword) {
		return nil, false
	}
	return o.TargetPassword, true
}

// HasTargetPassword returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasTargetPassword() bool {
	if o != nil && !IsNil(o.TargetPassword) {
		return true
	}

	return false
}

// SetTargetPassword gets a reference to the given string and assigns it to the TargetPassword field.
func (o *HyperscaleConnector) SetTargetPassword(v string) {
	o.TargetPassword = &v
}

// GetTargetJdbcUrl returns the TargetJdbcUrl field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetTargetJdbcUrl() string {
	if o == nil || IsNil(o.TargetJdbcUrl) {
		var ret string
		return ret
	}
	return *o.TargetJdbcUrl
}

// GetTargetJdbcUrlOk returns a tuple with the TargetJdbcUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetTargetJdbcUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TargetJdbcUrl) {
		return nil, false
	}
	return o.TargetJdbcUrl, true
}

// HasTargetJdbcUrl returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasTargetJdbcUrl() bool {
	if o != nil && !IsNil(o.TargetJdbcUrl) {
		return true
	}

	return false
}

// SetTargetJdbcUrl gets a reference to the given string and assigns it to the TargetJdbcUrl field.
func (o *HyperscaleConnector) SetTargetJdbcUrl(v string) {
	o.TargetJdbcUrl = &v
}

// GetTargetConnectionProperties returns the TargetConnectionProperties field value if set, zero value otherwise.
func (o *HyperscaleConnector) GetTargetConnectionProperties() map[string]string {
	if o == nil || IsNil(o.TargetConnectionProperties) {
		var ret map[string]string
		return ret
	}
	return *o.TargetConnectionProperties
}

// GetTargetConnectionPropertiesOk returns a tuple with the TargetConnectionProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleConnector) GetTargetConnectionPropertiesOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.TargetConnectionProperties) {
		return nil, false
	}
	return o.TargetConnectionProperties, true
}

// HasTargetConnectionProperties returns a boolean if a field has been set.
func (o *HyperscaleConnector) HasTargetConnectionProperties() bool {
	if o != nil && !IsNil(o.TargetConnectionProperties) {
		return true
	}

	return false
}

// SetTargetConnectionProperties gets a reference to the given map[string]string and assigns it to the TargetConnectionProperties field.
func (o *HyperscaleConnector) SetTargetConnectionProperties(v map[string]string) {
	o.TargetConnectionProperties = &v
}

func (o HyperscaleConnector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperscaleConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.HyperscaleInstanceId) {
		toSerialize["hyperscale_instance_id"] = o.HyperscaleInstanceId
	}
	if !IsNil(o.SourceUsername) {
		toSerialize["source_username"] = o.SourceUsername
	}
	if !IsNil(o.SourcePassword) {
		toSerialize["source_password"] = o.SourcePassword
	}
	if !IsNil(o.SourceJdbcUrl) {
		toSerialize["source_jdbc_url"] = o.SourceJdbcUrl
	}
	if !IsNil(o.SourceConnectionProperties) {
		toSerialize["source_connection_properties"] = o.SourceConnectionProperties
	}
	if !IsNil(o.TargetUsername) {
		toSerialize["target_username"] = o.TargetUsername
	}
	if !IsNil(o.TargetPassword) {
		toSerialize["target_password"] = o.TargetPassword
	}
	if !IsNil(o.TargetJdbcUrl) {
		toSerialize["target_jdbc_url"] = o.TargetJdbcUrl
	}
	if !IsNil(o.TargetConnectionProperties) {
		toSerialize["target_connection_properties"] = o.TargetConnectionProperties
	}
	return toSerialize, nil
}

type NullableHyperscaleConnector struct {
	value *HyperscaleConnector
	isSet bool
}

func (v NullableHyperscaleConnector) Get() *HyperscaleConnector {
	return v.value
}

func (v *NullableHyperscaleConnector) Set(val *HyperscaleConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperscaleConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperscaleConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperscaleConnector(val *HyperscaleConnector) *NullableHyperscaleConnector {
	return &NullableHyperscaleConnector{value: val, isSet: true}
}

func (v NullableHyperscaleConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperscaleConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


