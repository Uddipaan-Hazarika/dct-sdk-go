/*
Delphix DCT API

Testing HyperscaleInstanceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package delphix_dct_api

import (
	"context"
	"testing"

	openapiclient "github.com/delphix/dct-sdk-go/v14"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_delphix_dct_api_HyperscaleInstanceApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HyperscaleInstanceApiService CreateHyperscaleInstanceTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hyperscaleInstanceId string

		resp, httpRes, err := apiClient.HyperscaleInstanceApi.CreateHyperscaleInstanceTags(context.Background(), hyperscaleInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HyperscaleInstanceApiService DeleteHyperscaleInstanceTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hyperscaleInstanceId string

		httpRes, err := apiClient.HyperscaleInstanceApi.DeleteHyperscaleInstanceTags(context.Background(), hyperscaleInstanceId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HyperscaleInstanceApiService GetHyperscaleInstanceById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hyperscaleInstanceId string

		resp, httpRes, err := apiClient.HyperscaleInstanceApi.GetHyperscaleInstanceById(context.Background(), hyperscaleInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HyperscaleInstanceApiService GetHyperscaleInstanceTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hyperscaleInstanceId string

		resp, httpRes, err := apiClient.HyperscaleInstanceApi.GetHyperscaleInstanceTags(context.Background(), hyperscaleInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HyperscaleInstanceApiService GetHyperscaleInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HyperscaleInstanceApi.GetHyperscaleInstances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HyperscaleInstanceApiService RegisterHyperscaleInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HyperscaleInstanceApi.RegisterHyperscaleInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HyperscaleInstanceApiService SearchHyperscaleInstances", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.HyperscaleInstanceApi.SearchHyperscaleInstances(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HyperscaleInstanceApiService UnregisterHyperscaleInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hyperscaleInstanceId string

		resp, httpRes, err := apiClient.HyperscaleInstanceApi.UnregisterHyperscaleInstance(context.Background(), hyperscaleInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HyperscaleInstanceApiService UpdateHyperscaleInstance", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var hyperscaleInstanceId string

		resp, httpRes, err := apiClient.HyperscaleInstanceApi.UpdateHyperscaleInstance(context.Background(), hyperscaleInstanceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
