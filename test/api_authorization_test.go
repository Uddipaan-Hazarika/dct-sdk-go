/*
Delphix DCT API

Testing AuthorizationApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package delphix_dct_api

import (
	"context"
	"testing"

	openapiclient "github.com/delphix/dct-sdk-go/v14"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_delphix_dct_api_AuthorizationApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthorizationApiService AddAccessGroupAccountIds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string

		resp, httpRes, err := apiClient.AuthorizationApi.AddAccessGroupAccountIds(context.Background(), accessGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService AddAccessGroupAccountTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string

		resp, httpRes, err := apiClient.AuthorizationApi.AddAccessGroupAccountTags(context.Background(), accessGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService AddAccessGroupScopes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string

		resp, httpRes, err := apiClient.AuthorizationApi.AddAccessGroupScopes(context.Background(), accessGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService AddAlwaysAllowedPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationApi.AddAlwaysAllowedPermissions(context.Background(), accessGroupId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService AddObjectsToAccessGroupScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationApi.AddObjectsToAccessGroupScope(context.Background(), accessGroupId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService AddRolePermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.AuthorizationApi.AddRolePermissions(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService AddTagsToScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationApi.AddTagsToScope(context.Background(), accessGroupId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService CreateAccessGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorizationApi.CreateAccessGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService CreateRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorizationApi.CreateRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService CreateRoleTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.AuthorizationApi.CreateRoleTags(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService DeleteAccessGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string

		httpRes, err := apiClient.AuthorizationApi.DeleteAccessGroup(context.Background(), accessGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService DeleteAccessGroupScopeObjectTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationApi.DeleteAccessGroupScopeObjectTags(context.Background(), accessGroupId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService DeleteAccessGroupScopeObjects", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationApi.DeleteAccessGroupScopeObjects(context.Background(), accessGroupId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService DeleteRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		httpRes, err := apiClient.AuthorizationApi.DeleteRole(context.Background(), roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService DeleteRoleTag", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		httpRes, err := apiClient.AuthorizationApi.DeleteRoleTag(context.Background(), roleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService GetAccessGroupById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string

		resp, httpRes, err := apiClient.AuthorizationApi.GetAccessGroupById(context.Background(), accessGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService GetAccessGroupScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationApi.GetAccessGroupScope(context.Background(), accessGroupId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService GetAccessGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorizationApi.GetAccessGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService GetAllObjectPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorizationApi.GetAllObjectPermissions(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService GetObjectPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var objectType string
		var objectId string

		resp, httpRes, err := apiClient.AuthorizationApi.GetObjectPermissions(context.Background(), objectType, objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService GetRoleById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.AuthorizationApi.GetRoleById(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService GetRoleTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.AuthorizationApi.GetRoleTags(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService GetRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorizationApi.GetRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService RemoveAccessGroupAccountId", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var accountId int64

		resp, httpRes, err := apiClient.AuthorizationApi.RemoveAccessGroupAccountId(context.Background(), accessGroupId, accountId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService RemoveAccessGroupAccountTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string

		resp, httpRes, err := apiClient.AuthorizationApi.RemoveAccessGroupAccountTags(context.Background(), accessGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService RemoveAccessGroupScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationApi.RemoveAccessGroupScope(context.Background(), accessGroupId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService RemoveAlwaysAllowedPermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationApi.RemoveAlwaysAllowedPermissions(context.Background(), accessGroupId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService RemoveRolePermissions", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.AuthorizationApi.RemoveRolePermissions(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService SearchAccessGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorizationApi.SearchAccessGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService SearchRoles", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.AuthorizationApi.SearchRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService UpdateAccessGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string

		resp, httpRes, err := apiClient.AuthorizationApi.UpdateAccessGroup(context.Background(), accessGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService UpdateAccessGroupScope", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var accessGroupId string
		var scopeId string

		resp, httpRes, err := apiClient.AuthorizationApi.UpdateAccessGroupScope(context.Background(), accessGroupId, scopeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AuthorizationApiService UpdateRole", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.AuthorizationApi.UpdateRole(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
