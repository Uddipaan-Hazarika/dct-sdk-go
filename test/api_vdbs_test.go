/*
Delphix DCT API

Testing VDBsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package delphix_dct_api

import (
	"context"
	"testing"

	openapiclient "github.com/delphix/dct-sdk-go/v14"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_delphix_dct_api_VDBsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VDBsApiService CreateVdbTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.CreateVdbTags(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService DeleteVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.DeleteVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService DeleteVdbTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		httpRes, err := apiClient.VDBsApi.DeleteVdbTags(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService DisableVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.DisableVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService EnableVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.EnableVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService GetBookmarksByVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.GetBookmarksByVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService GetTagsVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.GetTagsVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService GetVdbById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.GetVdbById(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService GetVdbSnapshots", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.GetVdbSnapshots(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService GetVdbs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.GetVdbs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService LockVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.LockVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService ProvisionVdbByLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.ProvisionVdbByLocation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService ProvisionVdbByLocationDefaults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.ProvisionVdbByLocationDefaults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService ProvisionVdbBySnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.ProvisionVdbBySnapshot(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService ProvisionVdbBySnapshotDefaults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.ProvisionVdbBySnapshotDefaults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService ProvisionVdbByTimestamp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.ProvisionVdbByTimestamp(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService ProvisionVdbByTimestampDefaults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.ProvisionVdbByTimestampDefaults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService ProvisionVdbFromBookmark", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.ProvisionVdbFromBookmark(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService ProvisionVdbFromBookmarkDefaults", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.ProvisionVdbFromBookmarkDefaults(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService RefreshVdbByLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.RefreshVdbByLocation(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService RefreshVdbBySnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.RefreshVdbBySnapshot(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService RefreshVdbByTimestamp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.RefreshVdbByTimestamp(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService RefreshVdbFromBookmark", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.RefreshVdbFromBookmark(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService RollbackVdbBySnapshot", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.RollbackVdbBySnapshot(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService RollbackVdbByTimestamp", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.RollbackVdbByTimestamp(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService RollbackVdbFromBookmark", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.RollbackVdbFromBookmark(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService SearchBookmarksByVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.SearchBookmarksByVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService SearchVdbs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBsApi.SearchVdbs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService SnapshotVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.SnapshotVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService StartVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.StartVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService StopVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.StopVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService SwitchTimeflow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.SwitchTimeflow(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService UnlockVdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.UnlockVdb(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBsApiService UpdateVdbById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbId string

		resp, httpRes, err := apiClient.VDBsApi.UpdateVdbById(context.Background(), vdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
