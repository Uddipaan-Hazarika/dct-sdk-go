/*
Delphix DCT API

Testing MaskingJobsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package delphix_dct_api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/delphix/dct-sdk-go"
)

func Test_delphix_dct_api_MaskingJobsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MaskingJobsApiService CopyMaskingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		resp, httpRes, err := apiClient.MaskingJobsApi.CopyMaskingJob(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService CreateMaskingJobTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		resp, httpRes, err := apiClient.MaskingJobsApi.CreateMaskingJobTag(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService DeleteMaskingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		resp, httpRes, err := apiClient.MaskingJobsApi.DeleteMaskingJob(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService DeleteMaskingJobTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		httpRes, err := apiClient.MaskingJobsApi.DeleteMaskingJobTag(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService ExecuteMaskingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		resp, httpRes, err := apiClient.MaskingJobsApi.ExecuteMaskingJob(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService GetMaskingJobById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		resp, httpRes, err := apiClient.MaskingJobsApi.GetMaskingJobById(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService GetMaskingJobConnectors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		resp, httpRes, err := apiClient.MaskingJobsApi.GetMaskingJobConnectors(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService GetMaskingJobSourceEngines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MaskingJobsApi.GetMaskingJobSourceEngines(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService GetMaskingJobTag", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		resp, httpRes, err := apiClient.MaskingJobsApi.GetMaskingJobTag(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService GetMaskingJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MaskingJobsApi.GetMaskingJobs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService MigrateMaskingJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		resp, httpRes, err := apiClient.MaskingJobsApi.MigrateMaskingJob(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService SearchMaskingJobSourceEngines", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MaskingJobsApi.SearchMaskingJobSourceEngines(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService SearchMaskingJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.MaskingJobsApi.SearchMaskingJobs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MaskingJobsApiService UpdateMaskingJobById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var maskingJobId string

		resp, httpRes, err := apiClient.MaskingJobsApi.UpdateMaskingJobById(context.Background(), maskingJobId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
