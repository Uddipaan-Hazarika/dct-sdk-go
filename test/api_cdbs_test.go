/*
Delphix DCT API

Testing CDBsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package delphix_dct_api

import (
	"context"
	"testing"

	openapiclient "github.com/delphix/dct-sdk-go/v10"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_delphix_dct_api_CDBsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CDBsApiService CreateCdbTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cdbId string

		resp, httpRes, err := apiClient.CDBsApi.CreateCdbTags(context.Background(), cdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CDBsApiService DeleteCdbTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cdbId string

		httpRes, err := apiClient.CDBsApi.DeleteCdbTags(context.Background(), cdbId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CDBsApiService GetCdbById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cdbId string

		resp, httpRes, err := apiClient.CDBsApi.GetCdbById(context.Background(), cdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CDBsApiService GetCdbs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CDBsApi.GetCdbs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CDBsApiService GetTagsCdb", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cdbId string

		resp, httpRes, err := apiClient.CDBsApi.GetTagsCdb(context.Background(), cdbId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CDBsApiService SearchCdbs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.CDBsApi.SearchCdbs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
