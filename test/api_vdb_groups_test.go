/*
Delphix DCT API

Testing VDBGroupsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package delphix_dct_api

import (
	"context"
	"testing"

	openapiclient "github.com/delphix/dct-sdk-go/v10"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_delphix_dct_api_VDBGroupsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test VDBGroupsApiService CreateVdbGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBGroupsApi.CreateVdbGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService CreateVdbGroupsTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.CreateVdbGroupsTags(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService DeleteVdbGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		httpRes, err := apiClient.VDBGroupsApi.DeleteVdbGroup(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService DeleteVdbGroupTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		httpRes, err := apiClient.VDBGroupsApi.DeleteVdbGroupTags(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService GetBookmarksByVdbGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.GetBookmarksByVdbGroup(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService GetVdbGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.GetVdbGroup(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService GetVdbGroupTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.GetVdbGroupTags(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService GetVdbGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBGroupsApi.GetVdbGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService LockVdbGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.LockVdbGroup(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService ProvisionVdbGroupFromBookmark", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBGroupsApi.ProvisionVdbGroupFromBookmark(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService RefreshVdbGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.RefreshVdbGroup(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService RollbackVdbGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.RollbackVdbGroup(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService SearchBookmarksByVdbGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.SearchBookmarksByVdbGroup(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService SearchVdbGroups", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.VDBGroupsApi.SearchVdbGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService UnlockVdbGroup", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.UnlockVdbGroup(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test VDBGroupsApiService UpdateVdbGroupById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var vdbGroupId string

		resp, httpRes, err := apiClient.VDBGroupsApi.UpdateVdbGroupById(context.Background(), vdbGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
