/*
Delphix DCT API

Testing TimeflowsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package delphix_dct_api

import (
	"context"
	"testing"

	openapiclient "github.com/delphix/dct-sdk-go/v21"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_delphix_dct_api_TimeflowsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TimeflowsApiService CreateTimeflowTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var timeflowId string

		resp, httpRes, err := apiClient.TimeflowsApi.CreateTimeflowTags(context.Background(), timeflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TimeflowsApiService DeleteTimeflow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var timeflowId string

		resp, httpRes, err := apiClient.TimeflowsApi.DeleteTimeflow(context.Background(), timeflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TimeflowsApiService DeleteTimeflowTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var timeflowId string

		httpRes, err := apiClient.TimeflowsApi.DeleteTimeflowTags(context.Background(), timeflowId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TimeflowsApiService GetTimeflowById", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var timeflowId string

		resp, httpRes, err := apiClient.TimeflowsApi.GetTimeflowById(context.Background(), timeflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TimeflowsApiService GetTimeflowSnapshotDayRange", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var timeflowId string

		resp, httpRes, err := apiClient.TimeflowsApi.GetTimeflowSnapshotDayRange(context.Background(), timeflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TimeflowsApiService GetTimeflowTags", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var timeflowId string

		resp, httpRes, err := apiClient.TimeflowsApi.GetTimeflowTags(context.Background(), timeflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TimeflowsApiService GetTimeflows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TimeflowsApi.GetTimeflows(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TimeflowsApiService SearchTimeflows", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.TimeflowsApi.SearchTimeflows(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TimeflowsApiService UpdateTimeflow", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var timeflowId string

		resp, httpRes, err := apiClient.TimeflowsApi.UpdateTimeflow(context.Background(), timeflowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
