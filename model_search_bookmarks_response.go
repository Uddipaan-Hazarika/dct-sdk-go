/*
Delphix DCT API

Delphix DCT API

API version: 1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// SearchBookmarksResponse struct for SearchBookmarksResponse
type SearchBookmarksResponse struct {
	Items []Bookmark `json:"items,omitempty"`
}

// NewSearchBookmarksResponse instantiates a new SearchBookmarksResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchBookmarksResponse() *SearchBookmarksResponse {
	this := SearchBookmarksResponse{}
	return &this
}

// NewSearchBookmarksResponseWithDefaults instantiates a new SearchBookmarksResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchBookmarksResponseWithDefaults() *SearchBookmarksResponse {
	this := SearchBookmarksResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *SearchBookmarksResponse) GetItems() []Bookmark {
	if o == nil || o.Items == nil {
		var ret []Bookmark
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchBookmarksResponse) GetItemsOk() ([]Bookmark, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *SearchBookmarksResponse) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []Bookmark and assigns it to the Items field.
func (o *SearchBookmarksResponse) SetItems(v []Bookmark) {
	o.Items = v
}

func (o SearchBookmarksResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableSearchBookmarksResponse struct {
	value *SearchBookmarksResponse
	isSet bool
}

func (v NullableSearchBookmarksResponse) Get() *SearchBookmarksResponse {
	return v.value
}

func (v *NullableSearchBookmarksResponse) Set(val *SearchBookmarksResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchBookmarksResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchBookmarksResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchBookmarksResponse(val *SearchBookmarksResponse) *NullableSearchBookmarksResponse {
	return &NullableSearchBookmarksResponse{value: val, isSet: true}
}

func (v NullableSearchBookmarksResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchBookmarksResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


