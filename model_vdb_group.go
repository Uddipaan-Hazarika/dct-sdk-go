/*
Delphix DCT API

Delphix DCT API

API version: 3.5.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the VDBGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VDBGroup{}

// VDBGroup A collection of virtual databases and datesets.
type VDBGroup struct {
	// A unique identifier for the entity.
	Id string `json:"id"`
	// A unique name for the entity.
	Name string `json:"name"`
	// The list of VDB IDs in this VDBGroup.
	VdbIds []string `json:"vdb_ids"`
	// Indicates whether the VDBGroup is locked.
	IsLocked *bool `json:"is_locked,omitempty"`
	// The Id of the account that locked the VDBGroup.
	LockedBy *int64 `json:"locked_by,omitempty"`
	// The name of the account that locked the VDBGroup.
	LockedByName *string `json:"locked_by_name,omitempty"`
	Tags []Tag `json:"tags,omitempty"`
}

// NewVDBGroup instantiates a new VDBGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVDBGroup(id string, name string, vdbIds []string) *VDBGroup {
	this := VDBGroup{}
	this.Id = id
	this.Name = name
	this.VdbIds = vdbIds
	return &this
}

// NewVDBGroupWithDefaults instantiates a new VDBGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVDBGroupWithDefaults() *VDBGroup {
	this := VDBGroup{}
	return &this
}

// GetId returns the Id field value
func (o *VDBGroup) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VDBGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VDBGroup) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VDBGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VDBGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VDBGroup) SetName(v string) {
	o.Name = v
}

// GetVdbIds returns the VdbIds field value
func (o *VDBGroup) GetVdbIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.VdbIds
}

// GetVdbIdsOk returns a tuple with the VdbIds field value
// and a boolean to check if the value has been set.
func (o *VDBGroup) GetVdbIdsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VdbIds, true
}

// SetVdbIds sets field value
func (o *VDBGroup) SetVdbIds(v []string) {
	o.VdbIds = v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *VDBGroup) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBGroup) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *VDBGroup) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *VDBGroup) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetLockedBy returns the LockedBy field value if set, zero value otherwise.
func (o *VDBGroup) GetLockedBy() int64 {
	if o == nil || IsNil(o.LockedBy) {
		var ret int64
		return ret
	}
	return *o.LockedBy
}

// GetLockedByOk returns a tuple with the LockedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBGroup) GetLockedByOk() (*int64, bool) {
	if o == nil || IsNil(o.LockedBy) {
		return nil, false
	}
	return o.LockedBy, true
}

// HasLockedBy returns a boolean if a field has been set.
func (o *VDBGroup) HasLockedBy() bool {
	if o != nil && !IsNil(o.LockedBy) {
		return true
	}

	return false
}

// SetLockedBy gets a reference to the given int64 and assigns it to the LockedBy field.
func (o *VDBGroup) SetLockedBy(v int64) {
	o.LockedBy = &v
}

// GetLockedByName returns the LockedByName field value if set, zero value otherwise.
func (o *VDBGroup) GetLockedByName() string {
	if o == nil || IsNil(o.LockedByName) {
		var ret string
		return ret
	}
	return *o.LockedByName
}

// GetLockedByNameOk returns a tuple with the LockedByName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBGroup) GetLockedByNameOk() (*string, bool) {
	if o == nil || IsNil(o.LockedByName) {
		return nil, false
	}
	return o.LockedByName, true
}

// HasLockedByName returns a boolean if a field has been set.
func (o *VDBGroup) HasLockedByName() bool {
	if o != nil && !IsNil(o.LockedByName) {
		return true
	}

	return false
}

// SetLockedByName gets a reference to the given string and assigns it to the LockedByName field.
func (o *VDBGroup) SetLockedByName(v string) {
	o.LockedByName = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *VDBGroup) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VDBGroup) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *VDBGroup) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *VDBGroup) SetTags(v []Tag) {
	o.Tags = v
}

func (o VDBGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VDBGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: id is readOnly
	toSerialize["name"] = o.Name
	toSerialize["vdb_ids"] = o.VdbIds
	if !IsNil(o.IsLocked) {
		toSerialize["is_locked"] = o.IsLocked
	}
	if !IsNil(o.LockedBy) {
		toSerialize["locked_by"] = o.LockedBy
	}
	if !IsNil(o.LockedByName) {
		toSerialize["locked_by_name"] = o.LockedByName
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableVDBGroup struct {
	value *VDBGroup
	isSet bool
}

func (v NullableVDBGroup) Get() *VDBGroup {
	return v.value
}

func (v *NullableVDBGroup) Set(val *VDBGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableVDBGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableVDBGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVDBGroup(val *VDBGroup) *NullableVDBGroup {
	return &NullableVDBGroup{value: val, isSet: true}
}

func (v NullableVDBGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVDBGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


