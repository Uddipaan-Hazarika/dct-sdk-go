/*
Delphix DCT API

Delphix DCT API

API version: 3.5.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the HyperscaleDatasetTableOrFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperscaleDatasetTableOrFile{}

// HyperscaleDatasetTableOrFile A table or file which is part of a hyperscale dataset.
type HyperscaleDatasetTableOrFile struct {
	// Name of the table schema.
	SchemaName *string `json:"schema_name,omitempty"`
	// Name of the table.
	TableName *string `json:"table_name,omitempty"`
	// The unique database column field to filter the source data.
	FilterKey *string `json:"filter_key,omitempty"`
	// The number of column array rows to be used by the sqlldr oracle utility which determines the number of rows loaded before the stream buffer is built.
	ColumnArrayRows *int64 `json:"column_array_rows,omitempty"`
	// The number of unloaded files to be generated from the source database.
	UnloadSplit *int64 `json:"unload_split,omitempty"`
	// Long The stream size to be used by the sqlldr oracle utility which specifies the size (in bytes) of the data stream sent from the client to the server.
	StreamSize *int64 `json:"stream_size,omitempty"`
	// DataSet information for masking inventory.
	MaskingInventory []HyperscaleColumnOrField `json:"masking_inventory,omitempty"`
}

// NewHyperscaleDatasetTableOrFile instantiates a new HyperscaleDatasetTableOrFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperscaleDatasetTableOrFile() *HyperscaleDatasetTableOrFile {
	this := HyperscaleDatasetTableOrFile{}
	return &this
}

// NewHyperscaleDatasetTableOrFileWithDefaults instantiates a new HyperscaleDatasetTableOrFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperscaleDatasetTableOrFileWithDefaults() *HyperscaleDatasetTableOrFile {
	this := HyperscaleDatasetTableOrFile{}
	return &this
}

// GetSchemaName returns the SchemaName field value if set, zero value otherwise.
func (o *HyperscaleDatasetTableOrFile) GetSchemaName() string {
	if o == nil || IsNil(o.SchemaName) {
		var ret string
		return ret
	}
	return *o.SchemaName
}

// GetSchemaNameOk returns a tuple with the SchemaName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleDatasetTableOrFile) GetSchemaNameOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaName) {
		return nil, false
	}
	return o.SchemaName, true
}

// HasSchemaName returns a boolean if a field has been set.
func (o *HyperscaleDatasetTableOrFile) HasSchemaName() bool {
	if o != nil && !IsNil(o.SchemaName) {
		return true
	}

	return false
}

// SetSchemaName gets a reference to the given string and assigns it to the SchemaName field.
func (o *HyperscaleDatasetTableOrFile) SetSchemaName(v string) {
	o.SchemaName = &v
}

// GetTableName returns the TableName field value if set, zero value otherwise.
func (o *HyperscaleDatasetTableOrFile) GetTableName() string {
	if o == nil || IsNil(o.TableName) {
		var ret string
		return ret
	}
	return *o.TableName
}

// GetTableNameOk returns a tuple with the TableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleDatasetTableOrFile) GetTableNameOk() (*string, bool) {
	if o == nil || IsNil(o.TableName) {
		return nil, false
	}
	return o.TableName, true
}

// HasTableName returns a boolean if a field has been set.
func (o *HyperscaleDatasetTableOrFile) HasTableName() bool {
	if o != nil && !IsNil(o.TableName) {
		return true
	}

	return false
}

// SetTableName gets a reference to the given string and assigns it to the TableName field.
func (o *HyperscaleDatasetTableOrFile) SetTableName(v string) {
	o.TableName = &v
}

// GetFilterKey returns the FilterKey field value if set, zero value otherwise.
func (o *HyperscaleDatasetTableOrFile) GetFilterKey() string {
	if o == nil || IsNil(o.FilterKey) {
		var ret string
		return ret
	}
	return *o.FilterKey
}

// GetFilterKeyOk returns a tuple with the FilterKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleDatasetTableOrFile) GetFilterKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FilterKey) {
		return nil, false
	}
	return o.FilterKey, true
}

// HasFilterKey returns a boolean if a field has been set.
func (o *HyperscaleDatasetTableOrFile) HasFilterKey() bool {
	if o != nil && !IsNil(o.FilterKey) {
		return true
	}

	return false
}

// SetFilterKey gets a reference to the given string and assigns it to the FilterKey field.
func (o *HyperscaleDatasetTableOrFile) SetFilterKey(v string) {
	o.FilterKey = &v
}

// GetColumnArrayRows returns the ColumnArrayRows field value if set, zero value otherwise.
func (o *HyperscaleDatasetTableOrFile) GetColumnArrayRows() int64 {
	if o == nil || IsNil(o.ColumnArrayRows) {
		var ret int64
		return ret
	}
	return *o.ColumnArrayRows
}

// GetColumnArrayRowsOk returns a tuple with the ColumnArrayRows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleDatasetTableOrFile) GetColumnArrayRowsOk() (*int64, bool) {
	if o == nil || IsNil(o.ColumnArrayRows) {
		return nil, false
	}
	return o.ColumnArrayRows, true
}

// HasColumnArrayRows returns a boolean if a field has been set.
func (o *HyperscaleDatasetTableOrFile) HasColumnArrayRows() bool {
	if o != nil && !IsNil(o.ColumnArrayRows) {
		return true
	}

	return false
}

// SetColumnArrayRows gets a reference to the given int64 and assigns it to the ColumnArrayRows field.
func (o *HyperscaleDatasetTableOrFile) SetColumnArrayRows(v int64) {
	o.ColumnArrayRows = &v
}

// GetUnloadSplit returns the UnloadSplit field value if set, zero value otherwise.
func (o *HyperscaleDatasetTableOrFile) GetUnloadSplit() int64 {
	if o == nil || IsNil(o.UnloadSplit) {
		var ret int64
		return ret
	}
	return *o.UnloadSplit
}

// GetUnloadSplitOk returns a tuple with the UnloadSplit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleDatasetTableOrFile) GetUnloadSplitOk() (*int64, bool) {
	if o == nil || IsNil(o.UnloadSplit) {
		return nil, false
	}
	return o.UnloadSplit, true
}

// HasUnloadSplit returns a boolean if a field has been set.
func (o *HyperscaleDatasetTableOrFile) HasUnloadSplit() bool {
	if o != nil && !IsNil(o.UnloadSplit) {
		return true
	}

	return false
}

// SetUnloadSplit gets a reference to the given int64 and assigns it to the UnloadSplit field.
func (o *HyperscaleDatasetTableOrFile) SetUnloadSplit(v int64) {
	o.UnloadSplit = &v
}

// GetStreamSize returns the StreamSize field value if set, zero value otherwise.
func (o *HyperscaleDatasetTableOrFile) GetStreamSize() int64 {
	if o == nil || IsNil(o.StreamSize) {
		var ret int64
		return ret
	}
	return *o.StreamSize
}

// GetStreamSizeOk returns a tuple with the StreamSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleDatasetTableOrFile) GetStreamSizeOk() (*int64, bool) {
	if o == nil || IsNil(o.StreamSize) {
		return nil, false
	}
	return o.StreamSize, true
}

// HasStreamSize returns a boolean if a field has been set.
func (o *HyperscaleDatasetTableOrFile) HasStreamSize() bool {
	if o != nil && !IsNil(o.StreamSize) {
		return true
	}

	return false
}

// SetStreamSize gets a reference to the given int64 and assigns it to the StreamSize field.
func (o *HyperscaleDatasetTableOrFile) SetStreamSize(v int64) {
	o.StreamSize = &v
}

// GetMaskingInventory returns the MaskingInventory field value if set, zero value otherwise.
func (o *HyperscaleDatasetTableOrFile) GetMaskingInventory() []HyperscaleColumnOrField {
	if o == nil || IsNil(o.MaskingInventory) {
		var ret []HyperscaleColumnOrField
		return ret
	}
	return o.MaskingInventory
}

// GetMaskingInventoryOk returns a tuple with the MaskingInventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperscaleDatasetTableOrFile) GetMaskingInventoryOk() ([]HyperscaleColumnOrField, bool) {
	if o == nil || IsNil(o.MaskingInventory) {
		return nil, false
	}
	return o.MaskingInventory, true
}

// HasMaskingInventory returns a boolean if a field has been set.
func (o *HyperscaleDatasetTableOrFile) HasMaskingInventory() bool {
	if o != nil && !IsNil(o.MaskingInventory) {
		return true
	}

	return false
}

// SetMaskingInventory gets a reference to the given []HyperscaleColumnOrField and assigns it to the MaskingInventory field.
func (o *HyperscaleDatasetTableOrFile) SetMaskingInventory(v []HyperscaleColumnOrField) {
	o.MaskingInventory = v
}

func (o HyperscaleDatasetTableOrFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperscaleDatasetTableOrFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaName) {
		toSerialize["schema_name"] = o.SchemaName
	}
	if !IsNil(o.TableName) {
		toSerialize["table_name"] = o.TableName
	}
	if !IsNil(o.FilterKey) {
		toSerialize["filter_key"] = o.FilterKey
	}
	if !IsNil(o.ColumnArrayRows) {
		toSerialize["column_array_rows"] = o.ColumnArrayRows
	}
	if !IsNil(o.UnloadSplit) {
		toSerialize["unload_split"] = o.UnloadSplit
	}
	if !IsNil(o.StreamSize) {
		toSerialize["stream_size"] = o.StreamSize
	}
	if !IsNil(o.MaskingInventory) {
		toSerialize["masking_inventory"] = o.MaskingInventory
	}
	return toSerialize, nil
}

type NullableHyperscaleDatasetTableOrFile struct {
	value *HyperscaleDatasetTableOrFile
	isSet bool
}

func (v NullableHyperscaleDatasetTableOrFile) Get() *HyperscaleDatasetTableOrFile {
	return v.value
}

func (v *NullableHyperscaleDatasetTableOrFile) Set(val *HyperscaleDatasetTableOrFile) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperscaleDatasetTableOrFile) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperscaleDatasetTableOrFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperscaleDatasetTableOrFile(val *HyperscaleDatasetTableOrFile) *NullableHyperscaleDatasetTableOrFile {
	return &NullableHyperscaleDatasetTableOrFile{value: val, isSet: true}
}

func (v NullableHyperscaleDatasetTableOrFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperscaleDatasetTableOrFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


