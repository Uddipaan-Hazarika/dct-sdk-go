/*
Delphix DCT API

Delphix DCT API

API version: 3.9.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
	"fmt"
)

// PermissionEnum Type of the permission on DCT object.
type PermissionEnum string

// List of PermissionEnum
const (
	PERMISSIONENUM_READ PermissionEnum = "READ"
	PERMISSIONENUM_UPDATE PermissionEnum = "UPDATE"
	PERMISSIONENUM_DELETE PermissionEnum = "DELETE"
	PERMISSIONENUM_EXECUTE PermissionEnum = "EXECUTE"
	PERMISSIONENUM_CANCEL PermissionEnum = "CANCEL"
	PERMISSIONENUM_MIGRATE PermissionEnum = "MIGRATE"
	PERMISSIONENUM_REFRESH PermissionEnum = "REFRESH"
	PERMISSIONENUM_DISABLE PermissionEnum = "DISABLE"
	PERMISSIONENUM_ENABLE PermissionEnum = "ENABLE"
	PERMISSIONENUM_ABANDON PermissionEnum = "ABANDON"
	PERMISSIONENUM_VALIDATE PermissionEnum = "VALIDATE"
	PERMISSIONENUM_START PermissionEnum = "START"
	PERMISSIONENUM_STOP PermissionEnum = "STOP"
	PERMISSIONENUM_SNAPSHOT PermissionEnum = "SNAPSHOT"
	PERMISSIONENUM_COPY PermissionEnum = "COPY"
	PERMISSIONENUM_REMOVE_JOB PermissionEnum = "REMOVE_JOB"
	PERMISSIONENUM_PASSWORD_RESET PermissionEnum = "PASSWORD_RESET"
	PERMISSIONENUM_UNDO_IMPORT PermissionEnum = "UNDO_IMPORT"
	PERMISSIONENUM_IMPORT PermissionEnum = "IMPORT"
	PERMISSIONENUM_PROVISION_FROM_BOOKMARK PermissionEnum = "PROVISION_FROM_BOOKMARK"
	PERMISSIONENUM_PROVISION PermissionEnum = "PROVISION"
	PERMISSIONENUM_REFRESH_FROM_BOOKMARK PermissionEnum = "REFRESH_FROM_BOOKMARK"
	PERMISSIONENUM_REFRESH_FROM_SNAPSHOT PermissionEnum = "REFRESH_FROM_SNAPSHOT"
	PERMISSIONENUM_REFRESH_FROM_TIMESTAMP PermissionEnum = "REFRESH_FROM_TIMESTAMP"
	PERMISSIONENUM_CREATE_ENVIRONMENT PermissionEnum = "CREATE_ENVIRONMENT"
	PERMISSIONENUM_CREATE_BOOKMARK PermissionEnum = "CREATE_BOOKMARK"
	PERMISSIONENUM_CREATE_VDBGROUP PermissionEnum = "CREATE_VDBGROUP"
	PERMISSIONENUM_MANAGE_TAGS PermissionEnum = "MANAGE_TAGS"
	PERMISSIONENUM_LINK PermissionEnum = "LINK"
)

// All allowed values of PermissionEnum enum
var AllowedPermissionEnumEnumValues = []PermissionEnum{
	"READ",
	"UPDATE",
	"DELETE",
	"EXECUTE",
	"CANCEL",
	"MIGRATE",
	"REFRESH",
	"DISABLE",
	"ENABLE",
	"ABANDON",
	"VALIDATE",
	"START",
	"STOP",
	"SNAPSHOT",
	"COPY",
	"REMOVE_JOB",
	"PASSWORD_RESET",
	"UNDO_IMPORT",
	"IMPORT",
	"PROVISION_FROM_BOOKMARK",
	"PROVISION",
	"REFRESH_FROM_BOOKMARK",
	"REFRESH_FROM_SNAPSHOT",
	"REFRESH_FROM_TIMESTAMP",
	"CREATE_ENVIRONMENT",
	"CREATE_BOOKMARK",
	"CREATE_VDBGROUP",
	"MANAGE_TAGS",
	"LINK",
}

func (v *PermissionEnum) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PermissionEnum(value)
	for _, existing := range AllowedPermissionEnumEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PermissionEnum", value)
}

// NewPermissionEnumFromValue returns a pointer to a valid PermissionEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPermissionEnumFromValue(v string) (*PermissionEnum, error) {
	ev := PermissionEnum(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PermissionEnum: valid values are %v", v, AllowedPermissionEnumEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PermissionEnum) IsValid() bool {
	for _, existing := range AllowedPermissionEnumEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PermissionEnum value
func (v PermissionEnum) Ptr() *PermissionEnum {
	return &v
}

type NullablePermissionEnum struct {
	value *PermissionEnum
	isSet bool
}

func (v NullablePermissionEnum) Get() *PermissionEnum {
	return v.value
}

func (v *NullablePermissionEnum) Set(val *PermissionEnum) {
	v.value = val
	v.isSet = true
}

func (v NullablePermissionEnum) IsSet() bool {
	return v.isSet
}

func (v *NullablePermissionEnum) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePermissionEnum(val *PermissionEnum) *NullablePermissionEnum {
	return &NullablePermissionEnum{value: val, isSet: true}
}

func (v NullablePermissionEnum) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePermissionEnum) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

