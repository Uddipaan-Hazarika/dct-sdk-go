/*
Delphix DCT API

Delphix DCT API

API version: 3.5.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the ASEDSourceLinkSourceParametersAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ASEDSourceLinkSourceParametersAllOf{}

// ASEDSourceLinkSourceParametersAllOf struct for ASEDSourceLinkSourceParametersAllOf
type ASEDSourceLinkSourceParametersAllOf struct {
	// External file path.
	ExternalFilePath *string `json:"external_file_path,omitempty"`
	// The base mount point to use for the NFS mounts.
	MountBase *string `json:"mount_base,omitempty"`
	// Source database backup location.
	LoadBackupPath *string `json:"load_backup_path,omitempty"`
	// Name of the backup server instance.
	BackupServerName *string `json:"backup_server_name,omitempty"`
	// OS user for the host where the backup server is located.
	BackupHostUser *string `json:"backup_host_user,omitempty"`
	// Host environment where the backup server is located.
	BackupHost *string `json:"backup_host,omitempty"`
	// The password credential for the source DB user.
	DumpCredentials *string `json:"dump_credentials,omitempty"`
	// ID or user reference of the host OS user to use for linking.
	SourceHostUser *string `json:"source_host_user,omitempty"`
	// The user name for the source DB user.
	DbUser *string `json:"db_user,omitempty"`
	// Password for the database user.
	DbPassword *string `json:"db_password,omitempty"`
	// The name or reference of the vault from which to read the database credentials.
	DbVault *string `json:"db_vault,omitempty"`
	// Vault engine name where the credential is stored.
	DbHashicorpVaultEngine *string `json:"db_hashicorp_vault_engine,omitempty"`
	// Path in the vault engine where the credential is stored.
	DbHashicorpVaultSecretPath *string `json:"db_hashicorp_vault_secret_path,omitempty"`
	// Hashicorp vault key for the username in the key-value store.
	DbHashicorpVaultUsernameKey *string `json:"db_hashicorp_vault_username_key,omitempty"`
	// Hashicorp vault key for the password in the key-value store.
	DbHashicorpVaultSecretKey *string `json:"db_hashicorp_vault_secret_key,omitempty"`
	// Azure key vault name.
	DbAzureVaultName *string `json:"db_azure_vault_name,omitempty"`
	// Azure vault key for the username in the key-value store.
	DbAzureVaultUsernameKey *string `json:"db_azure_vault_username_key,omitempty"`
	// Azure vault key for the password in the key-value store.
	DbAzureVaultSecretKey *string `json:"db_azure_vault_secret_key,omitempty"`
	// Query to find a credential in the CyberArk vault.
	DbCyberarkVaultQueryString *string `json:"db_cyberark_vault_query_string,omitempty"`
	// The SAP ASE instance on the staging environment that we want to use for validated sync.
	StagingRepository *string `json:"staging_repository,omitempty"`
	// Information about the host OS user on the staging environment to use for linking.
	StagingHostUser *string `json:"staging_host_user,omitempty"`
	// Information about the host OS user on the staging environment to use for linking.
	ValidatedSyncMode *string `json:"validated_sync_mode,omitempty"`
	// Specifies if Dump History File is enabled for backup history detection.
	DumpHistoryFileEnabled *bool `json:"dump_history_file_enabled,omitempty"`
	// If this parameter is set to true, it will drop the older devices and create new devices during manual sync operations instead of trying to remap the devices. This might increase the space utilization on Delphix Engine.
	DropAndRecreateDevices *bool `json:"drop_and_recreate_devices,omitempty"`
	// Determines how the Delphix Engine will take a backup: * `latest_backup` - Use the most recent backup. * `new_backup` - Delphix will take a new backup of your source database. * `specific_backup` - Use a specific backup. Using this option requires setting `ase_backup_files`. Default is `new_backup`. 
	SyncStrategy *string `json:"sync_strategy,omitempty"`
	// The location of the full backup of the source database to restore from. The backup should be present in the shared backup location for the source database.
	AseBackupFiles []string `json:"ase_backup_files,omitempty"`
	// Operations to perform on the staging source before performing a validated sync.
	PreValidatedSync []SourceOperation `json:"pre_validated_sync,omitempty"`
	// Operations to perform on the staging source after performing a validated sync.
	PostValidatedSync []SourceOperation `json:"post_validated_sync,omitempty"`
}

// NewASEDSourceLinkSourceParametersAllOf instantiates a new ASEDSourceLinkSourceParametersAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewASEDSourceLinkSourceParametersAllOf() *ASEDSourceLinkSourceParametersAllOf {
	this := ASEDSourceLinkSourceParametersAllOf{}
	var validatedSyncMode string = "ENABLED"
	this.ValidatedSyncMode = &validatedSyncMode
	var dumpHistoryFileEnabled bool = false
	this.DumpHistoryFileEnabled = &dumpHistoryFileEnabled
	var dropAndRecreateDevices bool = false
	this.DropAndRecreateDevices = &dropAndRecreateDevices
	var syncStrategy string = "new_backup"
	this.SyncStrategy = &syncStrategy
	return &this
}

// NewASEDSourceLinkSourceParametersAllOfWithDefaults instantiates a new ASEDSourceLinkSourceParametersAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewASEDSourceLinkSourceParametersAllOfWithDefaults() *ASEDSourceLinkSourceParametersAllOf {
	this := ASEDSourceLinkSourceParametersAllOf{}
	var validatedSyncMode string = "ENABLED"
	this.ValidatedSyncMode = &validatedSyncMode
	var dumpHistoryFileEnabled bool = false
	this.DumpHistoryFileEnabled = &dumpHistoryFileEnabled
	var dropAndRecreateDevices bool = false
	this.DropAndRecreateDevices = &dropAndRecreateDevices
	var syncStrategy string = "new_backup"
	this.SyncStrategy = &syncStrategy
	return &this
}

// GetExternalFilePath returns the ExternalFilePath field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetExternalFilePath() string {
	if o == nil || IsNil(o.ExternalFilePath) {
		var ret string
		return ret
	}
	return *o.ExternalFilePath
}

// GetExternalFilePathOk returns a tuple with the ExternalFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetExternalFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalFilePath) {
		return nil, false
	}
	return o.ExternalFilePath, true
}

// HasExternalFilePath returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasExternalFilePath() bool {
	if o != nil && !IsNil(o.ExternalFilePath) {
		return true
	}

	return false
}

// SetExternalFilePath gets a reference to the given string and assigns it to the ExternalFilePath field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetExternalFilePath(v string) {
	o.ExternalFilePath = &v
}

// GetMountBase returns the MountBase field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetMountBase() string {
	if o == nil || IsNil(o.MountBase) {
		var ret string
		return ret
	}
	return *o.MountBase
}

// GetMountBaseOk returns a tuple with the MountBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetMountBaseOk() (*string, bool) {
	if o == nil || IsNil(o.MountBase) {
		return nil, false
	}
	return o.MountBase, true
}

// HasMountBase returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasMountBase() bool {
	if o != nil && !IsNil(o.MountBase) {
		return true
	}

	return false
}

// SetMountBase gets a reference to the given string and assigns it to the MountBase field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetMountBase(v string) {
	o.MountBase = &v
}

// GetLoadBackupPath returns the LoadBackupPath field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetLoadBackupPath() string {
	if o == nil || IsNil(o.LoadBackupPath) {
		var ret string
		return ret
	}
	return *o.LoadBackupPath
}

// GetLoadBackupPathOk returns a tuple with the LoadBackupPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetLoadBackupPathOk() (*string, bool) {
	if o == nil || IsNil(o.LoadBackupPath) {
		return nil, false
	}
	return o.LoadBackupPath, true
}

// HasLoadBackupPath returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasLoadBackupPath() bool {
	if o != nil && !IsNil(o.LoadBackupPath) {
		return true
	}

	return false
}

// SetLoadBackupPath gets a reference to the given string and assigns it to the LoadBackupPath field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetLoadBackupPath(v string) {
	o.LoadBackupPath = &v
}

// GetBackupServerName returns the BackupServerName field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetBackupServerName() string {
	if o == nil || IsNil(o.BackupServerName) {
		var ret string
		return ret
	}
	return *o.BackupServerName
}

// GetBackupServerNameOk returns a tuple with the BackupServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetBackupServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.BackupServerName) {
		return nil, false
	}
	return o.BackupServerName, true
}

// HasBackupServerName returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasBackupServerName() bool {
	if o != nil && !IsNil(o.BackupServerName) {
		return true
	}

	return false
}

// SetBackupServerName gets a reference to the given string and assigns it to the BackupServerName field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetBackupServerName(v string) {
	o.BackupServerName = &v
}

// GetBackupHostUser returns the BackupHostUser field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetBackupHostUser() string {
	if o == nil || IsNil(o.BackupHostUser) {
		var ret string
		return ret
	}
	return *o.BackupHostUser
}

// GetBackupHostUserOk returns a tuple with the BackupHostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetBackupHostUserOk() (*string, bool) {
	if o == nil || IsNil(o.BackupHostUser) {
		return nil, false
	}
	return o.BackupHostUser, true
}

// HasBackupHostUser returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasBackupHostUser() bool {
	if o != nil && !IsNil(o.BackupHostUser) {
		return true
	}

	return false
}

// SetBackupHostUser gets a reference to the given string and assigns it to the BackupHostUser field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetBackupHostUser(v string) {
	o.BackupHostUser = &v
}

// GetBackupHost returns the BackupHost field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetBackupHost() string {
	if o == nil || IsNil(o.BackupHost) {
		var ret string
		return ret
	}
	return *o.BackupHost
}

// GetBackupHostOk returns a tuple with the BackupHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetBackupHostOk() (*string, bool) {
	if o == nil || IsNil(o.BackupHost) {
		return nil, false
	}
	return o.BackupHost, true
}

// HasBackupHost returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasBackupHost() bool {
	if o != nil && !IsNil(o.BackupHost) {
		return true
	}

	return false
}

// SetBackupHost gets a reference to the given string and assigns it to the BackupHost field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetBackupHost(v string) {
	o.BackupHost = &v
}

// GetDumpCredentials returns the DumpCredentials field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDumpCredentials() string {
	if o == nil || IsNil(o.DumpCredentials) {
		var ret string
		return ret
	}
	return *o.DumpCredentials
}

// GetDumpCredentialsOk returns a tuple with the DumpCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDumpCredentialsOk() (*string, bool) {
	if o == nil || IsNil(o.DumpCredentials) {
		return nil, false
	}
	return o.DumpCredentials, true
}

// HasDumpCredentials returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDumpCredentials() bool {
	if o != nil && !IsNil(o.DumpCredentials) {
		return true
	}

	return false
}

// SetDumpCredentials gets a reference to the given string and assigns it to the DumpCredentials field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDumpCredentials(v string) {
	o.DumpCredentials = &v
}

// GetSourceHostUser returns the SourceHostUser field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetSourceHostUser() string {
	if o == nil || IsNil(o.SourceHostUser) {
		var ret string
		return ret
	}
	return *o.SourceHostUser
}

// GetSourceHostUserOk returns a tuple with the SourceHostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetSourceHostUserOk() (*string, bool) {
	if o == nil || IsNil(o.SourceHostUser) {
		return nil, false
	}
	return o.SourceHostUser, true
}

// HasSourceHostUser returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasSourceHostUser() bool {
	if o != nil && !IsNil(o.SourceHostUser) {
		return true
	}

	return false
}

// SetSourceHostUser gets a reference to the given string and assigns it to the SourceHostUser field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetSourceHostUser(v string) {
	o.SourceHostUser = &v
}

// GetDbUser returns the DbUser field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbUser() string {
	if o == nil || IsNil(o.DbUser) {
		var ret string
		return ret
	}
	return *o.DbUser
}

// GetDbUserOk returns a tuple with the DbUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbUserOk() (*string, bool) {
	if o == nil || IsNil(o.DbUser) {
		return nil, false
	}
	return o.DbUser, true
}

// HasDbUser returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbUser() bool {
	if o != nil && !IsNil(o.DbUser) {
		return true
	}

	return false
}

// SetDbUser gets a reference to the given string and assigns it to the DbUser field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbUser(v string) {
	o.DbUser = &v
}

// GetDbPassword returns the DbPassword field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbPassword() string {
	if o == nil || IsNil(o.DbPassword) {
		var ret string
		return ret
	}
	return *o.DbPassword
}

// GetDbPasswordOk returns a tuple with the DbPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.DbPassword) {
		return nil, false
	}
	return o.DbPassword, true
}

// HasDbPassword returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbPassword() bool {
	if o != nil && !IsNil(o.DbPassword) {
		return true
	}

	return false
}

// SetDbPassword gets a reference to the given string and assigns it to the DbPassword field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbPassword(v string) {
	o.DbPassword = &v
}

// GetDbVault returns the DbVault field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbVault() string {
	if o == nil || IsNil(o.DbVault) {
		var ret string
		return ret
	}
	return *o.DbVault
}

// GetDbVaultOk returns a tuple with the DbVault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbVaultOk() (*string, bool) {
	if o == nil || IsNil(o.DbVault) {
		return nil, false
	}
	return o.DbVault, true
}

// HasDbVault returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbVault() bool {
	if o != nil && !IsNil(o.DbVault) {
		return true
	}

	return false
}

// SetDbVault gets a reference to the given string and assigns it to the DbVault field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbVault(v string) {
	o.DbVault = &v
}

// GetDbHashicorpVaultEngine returns the DbHashicorpVaultEngine field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbHashicorpVaultEngine() string {
	if o == nil || IsNil(o.DbHashicorpVaultEngine) {
		var ret string
		return ret
	}
	return *o.DbHashicorpVaultEngine
}

// GetDbHashicorpVaultEngineOk returns a tuple with the DbHashicorpVaultEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbHashicorpVaultEngineOk() (*string, bool) {
	if o == nil || IsNil(o.DbHashicorpVaultEngine) {
		return nil, false
	}
	return o.DbHashicorpVaultEngine, true
}

// HasDbHashicorpVaultEngine returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbHashicorpVaultEngine() bool {
	if o != nil && !IsNil(o.DbHashicorpVaultEngine) {
		return true
	}

	return false
}

// SetDbHashicorpVaultEngine gets a reference to the given string and assigns it to the DbHashicorpVaultEngine field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbHashicorpVaultEngine(v string) {
	o.DbHashicorpVaultEngine = &v
}

// GetDbHashicorpVaultSecretPath returns the DbHashicorpVaultSecretPath field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbHashicorpVaultSecretPath() string {
	if o == nil || IsNil(o.DbHashicorpVaultSecretPath) {
		var ret string
		return ret
	}
	return *o.DbHashicorpVaultSecretPath
}

// GetDbHashicorpVaultSecretPathOk returns a tuple with the DbHashicorpVaultSecretPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbHashicorpVaultSecretPathOk() (*string, bool) {
	if o == nil || IsNil(o.DbHashicorpVaultSecretPath) {
		return nil, false
	}
	return o.DbHashicorpVaultSecretPath, true
}

// HasDbHashicorpVaultSecretPath returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbHashicorpVaultSecretPath() bool {
	if o != nil && !IsNil(o.DbHashicorpVaultSecretPath) {
		return true
	}

	return false
}

// SetDbHashicorpVaultSecretPath gets a reference to the given string and assigns it to the DbHashicorpVaultSecretPath field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbHashicorpVaultSecretPath(v string) {
	o.DbHashicorpVaultSecretPath = &v
}

// GetDbHashicorpVaultUsernameKey returns the DbHashicorpVaultUsernameKey field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbHashicorpVaultUsernameKey() string {
	if o == nil || IsNil(o.DbHashicorpVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.DbHashicorpVaultUsernameKey
}

// GetDbHashicorpVaultUsernameKeyOk returns a tuple with the DbHashicorpVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbHashicorpVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.DbHashicorpVaultUsernameKey) {
		return nil, false
	}
	return o.DbHashicorpVaultUsernameKey, true
}

// HasDbHashicorpVaultUsernameKey returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbHashicorpVaultUsernameKey() bool {
	if o != nil && !IsNil(o.DbHashicorpVaultUsernameKey) {
		return true
	}

	return false
}

// SetDbHashicorpVaultUsernameKey gets a reference to the given string and assigns it to the DbHashicorpVaultUsernameKey field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbHashicorpVaultUsernameKey(v string) {
	o.DbHashicorpVaultUsernameKey = &v
}

// GetDbHashicorpVaultSecretKey returns the DbHashicorpVaultSecretKey field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbHashicorpVaultSecretKey() string {
	if o == nil || IsNil(o.DbHashicorpVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.DbHashicorpVaultSecretKey
}

// GetDbHashicorpVaultSecretKeyOk returns a tuple with the DbHashicorpVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbHashicorpVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.DbHashicorpVaultSecretKey) {
		return nil, false
	}
	return o.DbHashicorpVaultSecretKey, true
}

// HasDbHashicorpVaultSecretKey returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbHashicorpVaultSecretKey() bool {
	if o != nil && !IsNil(o.DbHashicorpVaultSecretKey) {
		return true
	}

	return false
}

// SetDbHashicorpVaultSecretKey gets a reference to the given string and assigns it to the DbHashicorpVaultSecretKey field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbHashicorpVaultSecretKey(v string) {
	o.DbHashicorpVaultSecretKey = &v
}

// GetDbAzureVaultName returns the DbAzureVaultName field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbAzureVaultName() string {
	if o == nil || IsNil(o.DbAzureVaultName) {
		var ret string
		return ret
	}
	return *o.DbAzureVaultName
}

// GetDbAzureVaultNameOk returns a tuple with the DbAzureVaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbAzureVaultNameOk() (*string, bool) {
	if o == nil || IsNil(o.DbAzureVaultName) {
		return nil, false
	}
	return o.DbAzureVaultName, true
}

// HasDbAzureVaultName returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbAzureVaultName() bool {
	if o != nil && !IsNil(o.DbAzureVaultName) {
		return true
	}

	return false
}

// SetDbAzureVaultName gets a reference to the given string and assigns it to the DbAzureVaultName field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbAzureVaultName(v string) {
	o.DbAzureVaultName = &v
}

// GetDbAzureVaultUsernameKey returns the DbAzureVaultUsernameKey field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbAzureVaultUsernameKey() string {
	if o == nil || IsNil(o.DbAzureVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.DbAzureVaultUsernameKey
}

// GetDbAzureVaultUsernameKeyOk returns a tuple with the DbAzureVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbAzureVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.DbAzureVaultUsernameKey) {
		return nil, false
	}
	return o.DbAzureVaultUsernameKey, true
}

// HasDbAzureVaultUsernameKey returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbAzureVaultUsernameKey() bool {
	if o != nil && !IsNil(o.DbAzureVaultUsernameKey) {
		return true
	}

	return false
}

// SetDbAzureVaultUsernameKey gets a reference to the given string and assigns it to the DbAzureVaultUsernameKey field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbAzureVaultUsernameKey(v string) {
	o.DbAzureVaultUsernameKey = &v
}

// GetDbAzureVaultSecretKey returns the DbAzureVaultSecretKey field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbAzureVaultSecretKey() string {
	if o == nil || IsNil(o.DbAzureVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.DbAzureVaultSecretKey
}

// GetDbAzureVaultSecretKeyOk returns a tuple with the DbAzureVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbAzureVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.DbAzureVaultSecretKey) {
		return nil, false
	}
	return o.DbAzureVaultSecretKey, true
}

// HasDbAzureVaultSecretKey returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbAzureVaultSecretKey() bool {
	if o != nil && !IsNil(o.DbAzureVaultSecretKey) {
		return true
	}

	return false
}

// SetDbAzureVaultSecretKey gets a reference to the given string and assigns it to the DbAzureVaultSecretKey field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbAzureVaultSecretKey(v string) {
	o.DbAzureVaultSecretKey = &v
}

// GetDbCyberarkVaultQueryString returns the DbCyberarkVaultQueryString field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbCyberarkVaultQueryString() string {
	if o == nil || IsNil(o.DbCyberarkVaultQueryString) {
		var ret string
		return ret
	}
	return *o.DbCyberarkVaultQueryString
}

// GetDbCyberarkVaultQueryStringOk returns a tuple with the DbCyberarkVaultQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDbCyberarkVaultQueryStringOk() (*string, bool) {
	if o == nil || IsNil(o.DbCyberarkVaultQueryString) {
		return nil, false
	}
	return o.DbCyberarkVaultQueryString, true
}

// HasDbCyberarkVaultQueryString returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDbCyberarkVaultQueryString() bool {
	if o != nil && !IsNil(o.DbCyberarkVaultQueryString) {
		return true
	}

	return false
}

// SetDbCyberarkVaultQueryString gets a reference to the given string and assigns it to the DbCyberarkVaultQueryString field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDbCyberarkVaultQueryString(v string) {
	o.DbCyberarkVaultQueryString = &v
}

// GetStagingRepository returns the StagingRepository field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetStagingRepository() string {
	if o == nil || IsNil(o.StagingRepository) {
		var ret string
		return ret
	}
	return *o.StagingRepository
}

// GetStagingRepositoryOk returns a tuple with the StagingRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetStagingRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.StagingRepository) {
		return nil, false
	}
	return o.StagingRepository, true
}

// HasStagingRepository returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasStagingRepository() bool {
	if o != nil && !IsNil(o.StagingRepository) {
		return true
	}

	return false
}

// SetStagingRepository gets a reference to the given string and assigns it to the StagingRepository field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetStagingRepository(v string) {
	o.StagingRepository = &v
}

// GetStagingHostUser returns the StagingHostUser field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetStagingHostUser() string {
	if o == nil || IsNil(o.StagingHostUser) {
		var ret string
		return ret
	}
	return *o.StagingHostUser
}

// GetStagingHostUserOk returns a tuple with the StagingHostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetStagingHostUserOk() (*string, bool) {
	if o == nil || IsNil(o.StagingHostUser) {
		return nil, false
	}
	return o.StagingHostUser, true
}

// HasStagingHostUser returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasStagingHostUser() bool {
	if o != nil && !IsNil(o.StagingHostUser) {
		return true
	}

	return false
}

// SetStagingHostUser gets a reference to the given string and assigns it to the StagingHostUser field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetStagingHostUser(v string) {
	o.StagingHostUser = &v
}

// GetValidatedSyncMode returns the ValidatedSyncMode field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetValidatedSyncMode() string {
	if o == nil || IsNil(o.ValidatedSyncMode) {
		var ret string
		return ret
	}
	return *o.ValidatedSyncMode
}

// GetValidatedSyncModeOk returns a tuple with the ValidatedSyncMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetValidatedSyncModeOk() (*string, bool) {
	if o == nil || IsNil(o.ValidatedSyncMode) {
		return nil, false
	}
	return o.ValidatedSyncMode, true
}

// HasValidatedSyncMode returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasValidatedSyncMode() bool {
	if o != nil && !IsNil(o.ValidatedSyncMode) {
		return true
	}

	return false
}

// SetValidatedSyncMode gets a reference to the given string and assigns it to the ValidatedSyncMode field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetValidatedSyncMode(v string) {
	o.ValidatedSyncMode = &v
}

// GetDumpHistoryFileEnabled returns the DumpHistoryFileEnabled field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDumpHistoryFileEnabled() bool {
	if o == nil || IsNil(o.DumpHistoryFileEnabled) {
		var ret bool
		return ret
	}
	return *o.DumpHistoryFileEnabled
}

// GetDumpHistoryFileEnabledOk returns a tuple with the DumpHistoryFileEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDumpHistoryFileEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DumpHistoryFileEnabled) {
		return nil, false
	}
	return o.DumpHistoryFileEnabled, true
}

// HasDumpHistoryFileEnabled returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDumpHistoryFileEnabled() bool {
	if o != nil && !IsNil(o.DumpHistoryFileEnabled) {
		return true
	}

	return false
}

// SetDumpHistoryFileEnabled gets a reference to the given bool and assigns it to the DumpHistoryFileEnabled field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDumpHistoryFileEnabled(v bool) {
	o.DumpHistoryFileEnabled = &v
}

// GetDropAndRecreateDevices returns the DropAndRecreateDevices field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDropAndRecreateDevices() bool {
	if o == nil || IsNil(o.DropAndRecreateDevices) {
		var ret bool
		return ret
	}
	return *o.DropAndRecreateDevices
}

// GetDropAndRecreateDevicesOk returns a tuple with the DropAndRecreateDevices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetDropAndRecreateDevicesOk() (*bool, bool) {
	if o == nil || IsNil(o.DropAndRecreateDevices) {
		return nil, false
	}
	return o.DropAndRecreateDevices, true
}

// HasDropAndRecreateDevices returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasDropAndRecreateDevices() bool {
	if o != nil && !IsNil(o.DropAndRecreateDevices) {
		return true
	}

	return false
}

// SetDropAndRecreateDevices gets a reference to the given bool and assigns it to the DropAndRecreateDevices field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetDropAndRecreateDevices(v bool) {
	o.DropAndRecreateDevices = &v
}

// GetSyncStrategy returns the SyncStrategy field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetSyncStrategy() string {
	if o == nil || IsNil(o.SyncStrategy) {
		var ret string
		return ret
	}
	return *o.SyncStrategy
}

// GetSyncStrategyOk returns a tuple with the SyncStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetSyncStrategyOk() (*string, bool) {
	if o == nil || IsNil(o.SyncStrategy) {
		return nil, false
	}
	return o.SyncStrategy, true
}

// HasSyncStrategy returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasSyncStrategy() bool {
	if o != nil && !IsNil(o.SyncStrategy) {
		return true
	}

	return false
}

// SetSyncStrategy gets a reference to the given string and assigns it to the SyncStrategy field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetSyncStrategy(v string) {
	o.SyncStrategy = &v
}

// GetAseBackupFiles returns the AseBackupFiles field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetAseBackupFiles() []string {
	if o == nil || IsNil(o.AseBackupFiles) {
		var ret []string
		return ret
	}
	return o.AseBackupFiles
}

// GetAseBackupFilesOk returns a tuple with the AseBackupFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetAseBackupFilesOk() ([]string, bool) {
	if o == nil || IsNil(o.AseBackupFiles) {
		return nil, false
	}
	return o.AseBackupFiles, true
}

// HasAseBackupFiles returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasAseBackupFiles() bool {
	if o != nil && !IsNil(o.AseBackupFiles) {
		return true
	}

	return false
}

// SetAseBackupFiles gets a reference to the given []string and assigns it to the AseBackupFiles field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetAseBackupFiles(v []string) {
	o.AseBackupFiles = v
}

// GetPreValidatedSync returns the PreValidatedSync field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetPreValidatedSync() []SourceOperation {
	if o == nil || IsNil(o.PreValidatedSync) {
		var ret []SourceOperation
		return ret
	}
	return o.PreValidatedSync
}

// GetPreValidatedSyncOk returns a tuple with the PreValidatedSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetPreValidatedSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.PreValidatedSync) {
		return nil, false
	}
	return o.PreValidatedSync, true
}

// HasPreValidatedSync returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasPreValidatedSync() bool {
	if o != nil && !IsNil(o.PreValidatedSync) {
		return true
	}

	return false
}

// SetPreValidatedSync gets a reference to the given []SourceOperation and assigns it to the PreValidatedSync field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetPreValidatedSync(v []SourceOperation) {
	o.PreValidatedSync = v
}

// GetPostValidatedSync returns the PostValidatedSync field value if set, zero value otherwise.
func (o *ASEDSourceLinkSourceParametersAllOf) GetPostValidatedSync() []SourceOperation {
	if o == nil || IsNil(o.PostValidatedSync) {
		var ret []SourceOperation
		return ret
	}
	return o.PostValidatedSync
}

// GetPostValidatedSyncOk returns a tuple with the PostValidatedSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) GetPostValidatedSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.PostValidatedSync) {
		return nil, false
	}
	return o.PostValidatedSync, true
}

// HasPostValidatedSync returns a boolean if a field has been set.
func (o *ASEDSourceLinkSourceParametersAllOf) HasPostValidatedSync() bool {
	if o != nil && !IsNil(o.PostValidatedSync) {
		return true
	}

	return false
}

// SetPostValidatedSync gets a reference to the given []SourceOperation and assigns it to the PostValidatedSync field.
func (o *ASEDSourceLinkSourceParametersAllOf) SetPostValidatedSync(v []SourceOperation) {
	o.PostValidatedSync = v
}

func (o ASEDSourceLinkSourceParametersAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ASEDSourceLinkSourceParametersAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalFilePath) {
		toSerialize["external_file_path"] = o.ExternalFilePath
	}
	if !IsNil(o.MountBase) {
		toSerialize["mount_base"] = o.MountBase
	}
	if !IsNil(o.LoadBackupPath) {
		toSerialize["load_backup_path"] = o.LoadBackupPath
	}
	if !IsNil(o.BackupServerName) {
		toSerialize["backup_server_name"] = o.BackupServerName
	}
	if !IsNil(o.BackupHostUser) {
		toSerialize["backup_host_user"] = o.BackupHostUser
	}
	if !IsNil(o.BackupHost) {
		toSerialize["backup_host"] = o.BackupHost
	}
	if !IsNil(o.DumpCredentials) {
		toSerialize["dump_credentials"] = o.DumpCredentials
	}
	if !IsNil(o.SourceHostUser) {
		toSerialize["source_host_user"] = o.SourceHostUser
	}
	if !IsNil(o.DbUser) {
		toSerialize["db_user"] = o.DbUser
	}
	if !IsNil(o.DbPassword) {
		toSerialize["db_password"] = o.DbPassword
	}
	if !IsNil(o.DbVault) {
		toSerialize["db_vault"] = o.DbVault
	}
	if !IsNil(o.DbHashicorpVaultEngine) {
		toSerialize["db_hashicorp_vault_engine"] = o.DbHashicorpVaultEngine
	}
	if !IsNil(o.DbHashicorpVaultSecretPath) {
		toSerialize["db_hashicorp_vault_secret_path"] = o.DbHashicorpVaultSecretPath
	}
	if !IsNil(o.DbHashicorpVaultUsernameKey) {
		toSerialize["db_hashicorp_vault_username_key"] = o.DbHashicorpVaultUsernameKey
	}
	if !IsNil(o.DbHashicorpVaultSecretKey) {
		toSerialize["db_hashicorp_vault_secret_key"] = o.DbHashicorpVaultSecretKey
	}
	if !IsNil(o.DbAzureVaultName) {
		toSerialize["db_azure_vault_name"] = o.DbAzureVaultName
	}
	if !IsNil(o.DbAzureVaultUsernameKey) {
		toSerialize["db_azure_vault_username_key"] = o.DbAzureVaultUsernameKey
	}
	if !IsNil(o.DbAzureVaultSecretKey) {
		toSerialize["db_azure_vault_secret_key"] = o.DbAzureVaultSecretKey
	}
	if !IsNil(o.DbCyberarkVaultQueryString) {
		toSerialize["db_cyberark_vault_query_string"] = o.DbCyberarkVaultQueryString
	}
	if !IsNil(o.StagingRepository) {
		toSerialize["staging_repository"] = o.StagingRepository
	}
	if !IsNil(o.StagingHostUser) {
		toSerialize["staging_host_user"] = o.StagingHostUser
	}
	if !IsNil(o.ValidatedSyncMode) {
		toSerialize["validated_sync_mode"] = o.ValidatedSyncMode
	}
	if !IsNil(o.DumpHistoryFileEnabled) {
		toSerialize["dump_history_file_enabled"] = o.DumpHistoryFileEnabled
	}
	if !IsNil(o.DropAndRecreateDevices) {
		toSerialize["drop_and_recreate_devices"] = o.DropAndRecreateDevices
	}
	if !IsNil(o.SyncStrategy) {
		toSerialize["sync_strategy"] = o.SyncStrategy
	}
	if !IsNil(o.AseBackupFiles) {
		toSerialize["ase_backup_files"] = o.AseBackupFiles
	}
	if !IsNil(o.PreValidatedSync) {
		toSerialize["pre_validated_sync"] = o.PreValidatedSync
	}
	if !IsNil(o.PostValidatedSync) {
		toSerialize["post_validated_sync"] = o.PostValidatedSync
	}
	return toSerialize, nil
}

type NullableASEDSourceLinkSourceParametersAllOf struct {
	value *ASEDSourceLinkSourceParametersAllOf
	isSet bool
}

func (v NullableASEDSourceLinkSourceParametersAllOf) Get() *ASEDSourceLinkSourceParametersAllOf {
	return v.value
}

func (v *NullableASEDSourceLinkSourceParametersAllOf) Set(val *ASEDSourceLinkSourceParametersAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableASEDSourceLinkSourceParametersAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableASEDSourceLinkSourceParametersAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableASEDSourceLinkSourceParametersAllOf(val *ASEDSourceLinkSourceParametersAllOf) *NullableASEDSourceLinkSourceParametersAllOf {
	return &NullableASEDSourceLinkSourceParametersAllOf{value: val, isSet: true}
}

func (v NullableASEDSourceLinkSourceParametersAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableASEDSourceLinkSourceParametersAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


