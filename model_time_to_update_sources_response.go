/*
Delphix DCT API

Delphix DCT API

API version: 3.1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the TimeToUpdateSourcesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeToUpdateSourcesResponse{}

// TimeToUpdateSourcesResponse struct for TimeToUpdateSourcesResponse
type TimeToUpdateSourcesResponse struct {
	TimeToSave *int32 `json:"time_to_save,omitempty"`
	TimeToAdd *int32 `json:"time_to_add,omitempty"`
}

// NewTimeToUpdateSourcesResponse instantiates a new TimeToUpdateSourcesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeToUpdateSourcesResponse() *TimeToUpdateSourcesResponse {
	this := TimeToUpdateSourcesResponse{}
	return &this
}

// NewTimeToUpdateSourcesResponseWithDefaults instantiates a new TimeToUpdateSourcesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeToUpdateSourcesResponseWithDefaults() *TimeToUpdateSourcesResponse {
	this := TimeToUpdateSourcesResponse{}
	return &this
}

// GetTimeToSave returns the TimeToSave field value if set, zero value otherwise.
func (o *TimeToUpdateSourcesResponse) GetTimeToSave() int32 {
	if o == nil || IsNil(o.TimeToSave) {
		var ret int32
		return ret
	}
	return *o.TimeToSave
}

// GetTimeToSaveOk returns a tuple with the TimeToSave field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeToUpdateSourcesResponse) GetTimeToSaveOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeToSave) {
		return nil, false
	}
	return o.TimeToSave, true
}

// HasTimeToSave returns a boolean if a field has been set.
func (o *TimeToUpdateSourcesResponse) HasTimeToSave() bool {
	if o != nil && !IsNil(o.TimeToSave) {
		return true
	}

	return false
}

// SetTimeToSave gets a reference to the given int32 and assigns it to the TimeToSave field.
func (o *TimeToUpdateSourcesResponse) SetTimeToSave(v int32) {
	o.TimeToSave = &v
}

// GetTimeToAdd returns the TimeToAdd field value if set, zero value otherwise.
func (o *TimeToUpdateSourcesResponse) GetTimeToAdd() int32 {
	if o == nil || IsNil(o.TimeToAdd) {
		var ret int32
		return ret
	}
	return *o.TimeToAdd
}

// GetTimeToAddOk returns a tuple with the TimeToAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeToUpdateSourcesResponse) GetTimeToAddOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeToAdd) {
		return nil, false
	}
	return o.TimeToAdd, true
}

// HasTimeToAdd returns a boolean if a field has been set.
func (o *TimeToUpdateSourcesResponse) HasTimeToAdd() bool {
	if o != nil && !IsNil(o.TimeToAdd) {
		return true
	}

	return false
}

// SetTimeToAdd gets a reference to the given int32 and assigns it to the TimeToAdd field.
func (o *TimeToUpdateSourcesResponse) SetTimeToAdd(v int32) {
	o.TimeToAdd = &v
}

func (o TimeToUpdateSourcesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeToUpdateSourcesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeToSave) {
		toSerialize["time_to_save"] = o.TimeToSave
	}
	if !IsNil(o.TimeToAdd) {
		toSerialize["time_to_add"] = o.TimeToAdd
	}
	return toSerialize, nil
}

type NullableTimeToUpdateSourcesResponse struct {
	value *TimeToUpdateSourcesResponse
	isSet bool
}

func (v NullableTimeToUpdateSourcesResponse) Get() *TimeToUpdateSourcesResponse {
	return v.value
}

func (v *NullableTimeToUpdateSourcesResponse) Set(val *TimeToUpdateSourcesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeToUpdateSourcesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeToUpdateSourcesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeToUpdateSourcesResponse(val *TimeToUpdateSourcesResponse) *NullableTimeToUpdateSourcesResponse {
	return &NullableTimeToUpdateSourcesResponse{value: val, isSet: true}
}

func (v NullableTimeToUpdateSourcesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeToUpdateSourcesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


