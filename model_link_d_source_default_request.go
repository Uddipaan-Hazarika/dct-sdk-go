/*
Delphix DCT API

Delphix DCT API

API version: 3.1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the LinkDSourceDefaultRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkDSourceDefaultRequest{}

// LinkDSourceDefaultRequest struct for LinkDSourceDefaultRequest
type LinkDSourceDefaultRequest struct {
	// The ID of the source to be linked.
	SourceId string `json:"source_id"`
}

// NewLinkDSourceDefaultRequest instantiates a new LinkDSourceDefaultRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkDSourceDefaultRequest(sourceId string) *LinkDSourceDefaultRequest {
	this := LinkDSourceDefaultRequest{}
	this.SourceId = sourceId
	return &this
}

// NewLinkDSourceDefaultRequestWithDefaults instantiates a new LinkDSourceDefaultRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkDSourceDefaultRequestWithDefaults() *LinkDSourceDefaultRequest {
	this := LinkDSourceDefaultRequest{}
	return &this
}

// GetSourceId returns the SourceId field value
func (o *LinkDSourceDefaultRequest) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *LinkDSourceDefaultRequest) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *LinkDSourceDefaultRequest) SetSourceId(v string) {
	o.SourceId = v
}

func (o LinkDSourceDefaultRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkDSourceDefaultRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source_id"] = o.SourceId
	return toSerialize, nil
}

type NullableLinkDSourceDefaultRequest struct {
	value *LinkDSourceDefaultRequest
	isSet bool
}

func (v NullableLinkDSourceDefaultRequest) Get() *LinkDSourceDefaultRequest {
	return v.value
}

func (v *NullableLinkDSourceDefaultRequest) Set(val *LinkDSourceDefaultRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkDSourceDefaultRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkDSourceDefaultRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkDSourceDefaultRequest(val *LinkDSourceDefaultRequest) *NullableLinkDSourceDefaultRequest {
	return &NullableLinkDSourceDefaultRequest{value: val, isSet: true}
}

func (v NullableLinkDSourceDefaultRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkDSourceDefaultRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


