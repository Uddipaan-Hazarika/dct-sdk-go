/*
Delphix DCT API

Delphix DCT API

API version: 3.1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the LinkDSourceParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkDSourceParameters{}

// LinkDSourceParameters struct for LinkDSourceParameters
type LinkDSourceParameters struct {
	// Name of the dSource to be created.
	Name *string `json:"name,omitempty"`
	// Id of the source to link.
	SourceId string `json:"source_id"`
	// Id of the dataset group where this dSource should belong to.
	GroupId *string `json:"group_id,omitempty"`
	// Id of the environment user to use for linking.
	EnvironmentUserId *string `json:"environment_user_id,omitempty"`
	// The notes/description for the dSource.
	Description *string `json:"description,omitempty"`
	// Non-SYS database user to access this database. Only required for username-password auth (Oracle only).
	OracleNonSysUsername *string `json:"oracle_non_sys_username,omitempty"`
	// Password for non sys user authentication (Oracle only).
	OracleNonSysPassword *string `json:"oracle_non_sys_password,omitempty"`
	// The name or reference of the vault from which to read the database credentials (Oracle only).
	OracleNonSysVault *string `json:"oracle_non_sys_vault,omitempty"`
	// Vault engine name where the credential is stored (Oracle only).
	OracleNonSysHashicorpVaultEngine *string `json:"oracle_non_sys_hashicorp_vault_engine,omitempty"`
	// Path in the vault engine where the credential is stored (Oracle only).
	OracleNonSysHashicorpVaultSecretPath *string `json:"oracle_non_sys_hashicorp_vault_secret_path,omitempty"`
	// Hashicorp vault key for the username in the key-value store (Oracle only).
	OracleNonSysHashicorpVaultUsernameKey *string `json:"oracle_non_sys_hashicorp_vault_username_key,omitempty"`
	// Hashicorp vault key for the password in the key-value store (Oracle only).
	OracleNonSysHashicorpVaultSecretKey *string `json:"oracle_non_sys_hashicorp_vault_secret_key,omitempty"`
	// Azure key vault name (Oracle only).
	OracleNonSysAzureVaultName *string `json:"oracle_non_sys_azure_vault_name,omitempty"`
	// Azure vault key for the username in the key-value store (Oracle only).
	OracleNonSysAzureVaultUsernameKey *string `json:"oracle_non_sys_azure_vault_username_key,omitempty"`
	// Azure vault key for the password in the key-value store (Oracle only).
	OracleNonSysAzureVaultSecretKey *string `json:"oracle_non_sys_azure_vault_secret_key,omitempty"`
	// Query to find a credential in the CyberArk vault (Oracle only).
	OracleNonSysCyberarkVaultQueryString *string `json:"oracle_non_sys_cyberark_vault_query_string,omitempty"`
	// The database fallback username. Optional if bequeath connections are enabled (to be used in case of bequeath connection failures). Only required for username-password auth (Oracle only).
	OracleFallbackUsername *string `json:"oracle_fallback_username,omitempty"`
	// Password for fallback username (Oracle only).
	OracleFallbackPassword *string `json:"oracle_fallback_password,omitempty"`
	// The name or reference of the vault from which to read the database credentials (Oracle only).
	OracleFallbackVault *string `json:"oracle_fallback_vault,omitempty"`
	// Vault engine name where the credential is stored (Oracle only).
	OracleFallbackHashicorpVaultEngine *string `json:"oracle_fallback_hashicorp_vault_engine,omitempty"`
	// Path in the vault engine where the credential is stored (Oracle only).
	OracleFallbackHashicorpVaultSecretPath *string `json:"oracle_fallback_hashicorp_vault_secret_path,omitempty"`
	// Hashicorp vault key for the username in the key-value store (Oracle only).
	OracleFallbackHashicorpVaultUsernameKey *string `json:"oracle_fallback_hashicorp_vault_username_key,omitempty"`
	// Hashicorp vault key for the password in the key-value store (Oracle only).
	OracleFallbackHashicorpVaultSecretKey *string `json:"oracle_fallback_hashicorp_vault_secret_key,omitempty"`
	// Azure key vault name (Oracle only).
	OracleFallbackAzureVaultName *string `json:"oracle_fallback_azure_vault_name,omitempty"`
	// Azure vault key for the username in the key-value store (Oracle only).
	OracleFallbackAzureVaultUsernameKey *string `json:"oracle_fallback_azure_vault_username_key,omitempty"`
	// Azure vault key for the password in the key-value store (Oracle only).
	OracleFallbackAzureVaultSecretKey *string `json:"oracle_fallback_azure_vault_secret_key,omitempty"`
	// Query to find a credential in the CyberArk vault (Oracle only).
	OracleFallbackCyberarkVaultQueryString *string `json:"oracle_fallback_cyberark_vault_query_string,omitempty"`
	// Boolean value indicates whether LEVEL-based incremental backups can be used on the source database.
	BackupLevelEnabled *bool `json:"backup_level_enabled,omitempty"`
	// Number of parallel channels to use.
	RmanChannels *int32 `json:"rman_channels,omitempty"`
	// Number of data files to include in each RMAN backup set.
	FilesPerSet *int32 `json:"files_per_set,omitempty"`
	// True if extended block checking should be used for this linked database.
	CheckLogical *bool `json:"check_logical,omitempty"`
	// True if SnapSync data from the source should be retrieved through an encrypted connection. Enabling this feature can decrease the performance of SnapSync from the source but has no impact on the performance of VDBs created from the retrieved data.
	EncryptedLinkingEnabled *bool `json:"encrypted_linking_enabled,omitempty"`
	// True if SnapSync data from the source should be compressed over the network. Enabling this feature will reduce network bandwidth consumption and may significantly improve throughput, especially over slow network.
	CompressedLinkingEnabled *bool `json:"compressed_linking_enabled,omitempty"`
	// Bandwidth limit (MB/s) for SnapSync and LogSync network traffic. A value of 0 means no limit.
	BandwidthLimit *int32 `json:"bandwidth_limit,omitempty"`
	// Total number of transport connections to use during SnapSync.
	NumberOfConnections *int32 `json:"number_of_connections,omitempty"`
	// If true, NOLOGGING operations on this container are treated as faults and cannot be resolved manually.
	DiagnoseNoLoggingFaults *bool `json:"diagnose_no_logging_faults,omitempty"`
	// If true, pre-provisioning will be performed after every sync.
	PreProvisioningEnabled *bool `json:"pre_provisioning_enabled,omitempty"`
	// True if initial load should be done immediately.
	LinkNow *bool `json:"link_now,omitempty"`
	// Whether or not to take another full backup of the source database.
	ForceFullBackup *bool `json:"force_full_backup,omitempty"`
	// True if two SnapSyncs should be performed in immediate succession to reduce the number of logs required to provision the snapshot. This may significantly reduce the time necessary to provision from a snapshot.
	DoubleSync *bool `json:"double_sync,omitempty"`
	// Skip check that tests if there is enough space available to store the database in the Delphix Engine. The Delphix Engine estimates how much space a database will occupy after compression and prevents SnapSync if insufficient space is available. This safeguard can be overridden using this option. This may be useful when linking highly compressible databases.
	SkipSpaceCheck *bool `json:"skip_space_check,omitempty"`
	// Indicates whether a fresh SnapSync must be started regardless if it was possible to resume the current SnapSync. If true, we will not resume but instead ignore previous progress and backup all datafiles even if already completed from previous failed SnapSync. This does not force a full backup, if an incremental was in progress this will start a new incremental snapshot.
	DoNotResume *bool `json:"do_not_resume,omitempty"`
	// List of datafiles to take a full backup of. This would be useful in situations where certain datafiles could not be backed up during previous SnapSync due to corruption or because they went offline.
	FilesForFullBackup []int32 `json:"files_for_full_backup,omitempty"`
	// LogSync operation mode for this database.
	LogSyncMode *string `json:"log_sync_mode,omitempty"`
	// Interval between LogSync requests, in seconds.
	LogSyncInterval *int32 `json:"log_sync_interval,omitempty"`
	// True if LogSync should run for this database.
	LogSyncEnabled *bool `json:"log_sync_enabled,omitempty"`
	// External file path.
	ExternalFilePath *string `json:"external_file_path,omitempty"`
	// Whether the account creating this reporting schedule must be configured as owner of the reporting schedule.
	MakeCurrentAccountOwner *bool `json:"make_current_account_owner,omitempty"`
	// The tags to be created for dSource.
	Tags []Tag `json:"tags,omitempty"`
	// Operations to perform before syncing the created dSource. These operations can quiesce any data prior to syncing.
	OpsPreSync []SourceOperation `json:"ops_pre_sync,omitempty"`
	// Operations to perform after syncing a created dSource and before running the LogSync.
	OpsPreLogSync []SourceOperation `json:"ops_pre_log_sync,omitempty"`
	// Operations to perform after syncing a created dSource.
	OpsPostSync []SourceOperation `json:"ops_post_sync,omitempty"`
}

// NewLinkDSourceParameters instantiates a new LinkDSourceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkDSourceParameters(sourceId string) *LinkDSourceParameters {
	this := LinkDSourceParameters{}
	this.SourceId = sourceId
	var rmanChannels int32 = 2
	this.RmanChannels = &rmanChannels
	var filesPerSet int32 = 5
	this.FilesPerSet = &filesPerSet
	var checkLogical bool = false
	this.CheckLogical = &checkLogical
	var encryptedLinkingEnabled bool = false
	this.EncryptedLinkingEnabled = &encryptedLinkingEnabled
	var compressedLinkingEnabled bool = true
	this.CompressedLinkingEnabled = &compressedLinkingEnabled
	var bandwidthLimit int32 = 0
	this.BandwidthLimit = &bandwidthLimit
	var numberOfConnections int32 = 1
	this.NumberOfConnections = &numberOfConnections
	var diagnoseNoLoggingFaults bool = true
	this.DiagnoseNoLoggingFaults = &diagnoseNoLoggingFaults
	var preProvisioningEnabled bool = false
	this.PreProvisioningEnabled = &preProvisioningEnabled
	var linkNow bool = false
	this.LinkNow = &linkNow
	var forceFullBackup bool = false
	this.ForceFullBackup = &forceFullBackup
	var doubleSync bool = false
	this.DoubleSync = &doubleSync
	var skipSpaceCheck bool = false
	this.SkipSpaceCheck = &skipSpaceCheck
	var doNotResume bool = false
	this.DoNotResume = &doNotResume
	var logSyncMode string = "UNDEFINED"
	this.LogSyncMode = &logSyncMode
	var logSyncInterval int32 = 5
	this.LogSyncInterval = &logSyncInterval
	var logSyncEnabled bool = false
	this.LogSyncEnabled = &logSyncEnabled
	var makeCurrentAccountOwner bool = true
	this.MakeCurrentAccountOwner = &makeCurrentAccountOwner
	return &this
}

// NewLinkDSourceParametersWithDefaults instantiates a new LinkDSourceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkDSourceParametersWithDefaults() *LinkDSourceParameters {
	this := LinkDSourceParameters{}
	var rmanChannels int32 = 2
	this.RmanChannels = &rmanChannels
	var filesPerSet int32 = 5
	this.FilesPerSet = &filesPerSet
	var checkLogical bool = false
	this.CheckLogical = &checkLogical
	var encryptedLinkingEnabled bool = false
	this.EncryptedLinkingEnabled = &encryptedLinkingEnabled
	var compressedLinkingEnabled bool = true
	this.CompressedLinkingEnabled = &compressedLinkingEnabled
	var bandwidthLimit int32 = 0
	this.BandwidthLimit = &bandwidthLimit
	var numberOfConnections int32 = 1
	this.NumberOfConnections = &numberOfConnections
	var diagnoseNoLoggingFaults bool = true
	this.DiagnoseNoLoggingFaults = &diagnoseNoLoggingFaults
	var preProvisioningEnabled bool = false
	this.PreProvisioningEnabled = &preProvisioningEnabled
	var linkNow bool = false
	this.LinkNow = &linkNow
	var forceFullBackup bool = false
	this.ForceFullBackup = &forceFullBackup
	var doubleSync bool = false
	this.DoubleSync = &doubleSync
	var skipSpaceCheck bool = false
	this.SkipSpaceCheck = &skipSpaceCheck
	var doNotResume bool = false
	this.DoNotResume = &doNotResume
	var logSyncMode string = "UNDEFINED"
	this.LogSyncMode = &logSyncMode
	var logSyncInterval int32 = 5
	this.LogSyncInterval = &logSyncInterval
	var logSyncEnabled bool = false
	this.LogSyncEnabled = &logSyncEnabled
	var makeCurrentAccountOwner bool = true
	this.MakeCurrentAccountOwner = &makeCurrentAccountOwner
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LinkDSourceParameters) SetName(v string) {
	o.Name = &v
}

// GetSourceId returns the SourceId field value
func (o *LinkDSourceParameters) GetSourceId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetSourceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *LinkDSourceParameters) SetSourceId(v string) {
	o.SourceId = v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *LinkDSourceParameters) SetGroupId(v string) {
	o.GroupId = &v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetEnvironmentUserId() string {
	if o == nil || IsNil(o.EnvironmentUserId) {
		var ret string
		return ret
	}
	return *o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentUserId) {
		return nil, false
	}
	return o.EnvironmentUserId, true
}

// HasEnvironmentUserId returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasEnvironmentUserId() bool {
	if o != nil && !IsNil(o.EnvironmentUserId) {
		return true
	}

	return false
}

// SetEnvironmentUserId gets a reference to the given string and assigns it to the EnvironmentUserId field.
func (o *LinkDSourceParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *LinkDSourceParameters) SetDescription(v string) {
	o.Description = &v
}

// GetOracleNonSysUsername returns the OracleNonSysUsername field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysUsername() string {
	if o == nil || IsNil(o.OracleNonSysUsername) {
		var ret string
		return ret
	}
	return *o.OracleNonSysUsername
}

// GetOracleNonSysUsernameOk returns a tuple with the OracleNonSysUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysUsername) {
		return nil, false
	}
	return o.OracleNonSysUsername, true
}

// HasOracleNonSysUsername returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysUsername() bool {
	if o != nil && !IsNil(o.OracleNonSysUsername) {
		return true
	}

	return false
}

// SetOracleNonSysUsername gets a reference to the given string and assigns it to the OracleNonSysUsername field.
func (o *LinkDSourceParameters) SetOracleNonSysUsername(v string) {
	o.OracleNonSysUsername = &v
}

// GetOracleNonSysPassword returns the OracleNonSysPassword field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysPassword() string {
	if o == nil || IsNil(o.OracleNonSysPassword) {
		var ret string
		return ret
	}
	return *o.OracleNonSysPassword
}

// GetOracleNonSysPasswordOk returns a tuple with the OracleNonSysPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysPassword) {
		return nil, false
	}
	return o.OracleNonSysPassword, true
}

// HasOracleNonSysPassword returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysPassword() bool {
	if o != nil && !IsNil(o.OracleNonSysPassword) {
		return true
	}

	return false
}

// SetOracleNonSysPassword gets a reference to the given string and assigns it to the OracleNonSysPassword field.
func (o *LinkDSourceParameters) SetOracleNonSysPassword(v string) {
	o.OracleNonSysPassword = &v
}

// GetOracleNonSysVault returns the OracleNonSysVault field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysVault() string {
	if o == nil || IsNil(o.OracleNonSysVault) {
		var ret string
		return ret
	}
	return *o.OracleNonSysVault
}

// GetOracleNonSysVaultOk returns a tuple with the OracleNonSysVault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysVaultOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysVault) {
		return nil, false
	}
	return o.OracleNonSysVault, true
}

// HasOracleNonSysVault returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysVault() bool {
	if o != nil && !IsNil(o.OracleNonSysVault) {
		return true
	}

	return false
}

// SetOracleNonSysVault gets a reference to the given string and assigns it to the OracleNonSysVault field.
func (o *LinkDSourceParameters) SetOracleNonSysVault(v string) {
	o.OracleNonSysVault = &v
}

// GetOracleNonSysHashicorpVaultEngine returns the OracleNonSysHashicorpVaultEngine field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysHashicorpVaultEngine() string {
	if o == nil || IsNil(o.OracleNonSysHashicorpVaultEngine) {
		var ret string
		return ret
	}
	return *o.OracleNonSysHashicorpVaultEngine
}

// GetOracleNonSysHashicorpVaultEngineOk returns a tuple with the OracleNonSysHashicorpVaultEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysHashicorpVaultEngineOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysHashicorpVaultEngine) {
		return nil, false
	}
	return o.OracleNonSysHashicorpVaultEngine, true
}

// HasOracleNonSysHashicorpVaultEngine returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysHashicorpVaultEngine() bool {
	if o != nil && !IsNil(o.OracleNonSysHashicorpVaultEngine) {
		return true
	}

	return false
}

// SetOracleNonSysHashicorpVaultEngine gets a reference to the given string and assigns it to the OracleNonSysHashicorpVaultEngine field.
func (o *LinkDSourceParameters) SetOracleNonSysHashicorpVaultEngine(v string) {
	o.OracleNonSysHashicorpVaultEngine = &v
}

// GetOracleNonSysHashicorpVaultSecretPath returns the OracleNonSysHashicorpVaultSecretPath field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysHashicorpVaultSecretPath() string {
	if o == nil || IsNil(o.OracleNonSysHashicorpVaultSecretPath) {
		var ret string
		return ret
	}
	return *o.OracleNonSysHashicorpVaultSecretPath
}

// GetOracleNonSysHashicorpVaultSecretPathOk returns a tuple with the OracleNonSysHashicorpVaultSecretPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysHashicorpVaultSecretPathOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysHashicorpVaultSecretPath) {
		return nil, false
	}
	return o.OracleNonSysHashicorpVaultSecretPath, true
}

// HasOracleNonSysHashicorpVaultSecretPath returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysHashicorpVaultSecretPath() bool {
	if o != nil && !IsNil(o.OracleNonSysHashicorpVaultSecretPath) {
		return true
	}

	return false
}

// SetOracleNonSysHashicorpVaultSecretPath gets a reference to the given string and assigns it to the OracleNonSysHashicorpVaultSecretPath field.
func (o *LinkDSourceParameters) SetOracleNonSysHashicorpVaultSecretPath(v string) {
	o.OracleNonSysHashicorpVaultSecretPath = &v
}

// GetOracleNonSysHashicorpVaultUsernameKey returns the OracleNonSysHashicorpVaultUsernameKey field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysHashicorpVaultUsernameKey() string {
	if o == nil || IsNil(o.OracleNonSysHashicorpVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.OracleNonSysHashicorpVaultUsernameKey
}

// GetOracleNonSysHashicorpVaultUsernameKeyOk returns a tuple with the OracleNonSysHashicorpVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysHashicorpVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysHashicorpVaultUsernameKey) {
		return nil, false
	}
	return o.OracleNonSysHashicorpVaultUsernameKey, true
}

// HasOracleNonSysHashicorpVaultUsernameKey returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysHashicorpVaultUsernameKey() bool {
	if o != nil && !IsNil(o.OracleNonSysHashicorpVaultUsernameKey) {
		return true
	}

	return false
}

// SetOracleNonSysHashicorpVaultUsernameKey gets a reference to the given string and assigns it to the OracleNonSysHashicorpVaultUsernameKey field.
func (o *LinkDSourceParameters) SetOracleNonSysHashicorpVaultUsernameKey(v string) {
	o.OracleNonSysHashicorpVaultUsernameKey = &v
}

// GetOracleNonSysHashicorpVaultSecretKey returns the OracleNonSysHashicorpVaultSecretKey field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysHashicorpVaultSecretKey() string {
	if o == nil || IsNil(o.OracleNonSysHashicorpVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.OracleNonSysHashicorpVaultSecretKey
}

// GetOracleNonSysHashicorpVaultSecretKeyOk returns a tuple with the OracleNonSysHashicorpVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysHashicorpVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysHashicorpVaultSecretKey) {
		return nil, false
	}
	return o.OracleNonSysHashicorpVaultSecretKey, true
}

// HasOracleNonSysHashicorpVaultSecretKey returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysHashicorpVaultSecretKey() bool {
	if o != nil && !IsNil(o.OracleNonSysHashicorpVaultSecretKey) {
		return true
	}

	return false
}

// SetOracleNonSysHashicorpVaultSecretKey gets a reference to the given string and assigns it to the OracleNonSysHashicorpVaultSecretKey field.
func (o *LinkDSourceParameters) SetOracleNonSysHashicorpVaultSecretKey(v string) {
	o.OracleNonSysHashicorpVaultSecretKey = &v
}

// GetOracleNonSysAzureVaultName returns the OracleNonSysAzureVaultName field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysAzureVaultName() string {
	if o == nil || IsNil(o.OracleNonSysAzureVaultName) {
		var ret string
		return ret
	}
	return *o.OracleNonSysAzureVaultName
}

// GetOracleNonSysAzureVaultNameOk returns a tuple with the OracleNonSysAzureVaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysAzureVaultNameOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysAzureVaultName) {
		return nil, false
	}
	return o.OracleNonSysAzureVaultName, true
}

// HasOracleNonSysAzureVaultName returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysAzureVaultName() bool {
	if o != nil && !IsNil(o.OracleNonSysAzureVaultName) {
		return true
	}

	return false
}

// SetOracleNonSysAzureVaultName gets a reference to the given string and assigns it to the OracleNonSysAzureVaultName field.
func (o *LinkDSourceParameters) SetOracleNonSysAzureVaultName(v string) {
	o.OracleNonSysAzureVaultName = &v
}

// GetOracleNonSysAzureVaultUsernameKey returns the OracleNonSysAzureVaultUsernameKey field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysAzureVaultUsernameKey() string {
	if o == nil || IsNil(o.OracleNonSysAzureVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.OracleNonSysAzureVaultUsernameKey
}

// GetOracleNonSysAzureVaultUsernameKeyOk returns a tuple with the OracleNonSysAzureVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysAzureVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysAzureVaultUsernameKey) {
		return nil, false
	}
	return o.OracleNonSysAzureVaultUsernameKey, true
}

// HasOracleNonSysAzureVaultUsernameKey returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysAzureVaultUsernameKey() bool {
	if o != nil && !IsNil(o.OracleNonSysAzureVaultUsernameKey) {
		return true
	}

	return false
}

// SetOracleNonSysAzureVaultUsernameKey gets a reference to the given string and assigns it to the OracleNonSysAzureVaultUsernameKey field.
func (o *LinkDSourceParameters) SetOracleNonSysAzureVaultUsernameKey(v string) {
	o.OracleNonSysAzureVaultUsernameKey = &v
}

// GetOracleNonSysAzureVaultSecretKey returns the OracleNonSysAzureVaultSecretKey field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysAzureVaultSecretKey() string {
	if o == nil || IsNil(o.OracleNonSysAzureVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.OracleNonSysAzureVaultSecretKey
}

// GetOracleNonSysAzureVaultSecretKeyOk returns a tuple with the OracleNonSysAzureVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysAzureVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysAzureVaultSecretKey) {
		return nil, false
	}
	return o.OracleNonSysAzureVaultSecretKey, true
}

// HasOracleNonSysAzureVaultSecretKey returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysAzureVaultSecretKey() bool {
	if o != nil && !IsNil(o.OracleNonSysAzureVaultSecretKey) {
		return true
	}

	return false
}

// SetOracleNonSysAzureVaultSecretKey gets a reference to the given string and assigns it to the OracleNonSysAzureVaultSecretKey field.
func (o *LinkDSourceParameters) SetOracleNonSysAzureVaultSecretKey(v string) {
	o.OracleNonSysAzureVaultSecretKey = &v
}

// GetOracleNonSysCyberarkVaultQueryString returns the OracleNonSysCyberarkVaultQueryString field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleNonSysCyberarkVaultQueryString() string {
	if o == nil || IsNil(o.OracleNonSysCyberarkVaultQueryString) {
		var ret string
		return ret
	}
	return *o.OracleNonSysCyberarkVaultQueryString
}

// GetOracleNonSysCyberarkVaultQueryStringOk returns a tuple with the OracleNonSysCyberarkVaultQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleNonSysCyberarkVaultQueryStringOk() (*string, bool) {
	if o == nil || IsNil(o.OracleNonSysCyberarkVaultQueryString) {
		return nil, false
	}
	return o.OracleNonSysCyberarkVaultQueryString, true
}

// HasOracleNonSysCyberarkVaultQueryString returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleNonSysCyberarkVaultQueryString() bool {
	if o != nil && !IsNil(o.OracleNonSysCyberarkVaultQueryString) {
		return true
	}

	return false
}

// SetOracleNonSysCyberarkVaultQueryString gets a reference to the given string and assigns it to the OracleNonSysCyberarkVaultQueryString field.
func (o *LinkDSourceParameters) SetOracleNonSysCyberarkVaultQueryString(v string) {
	o.OracleNonSysCyberarkVaultQueryString = &v
}

// GetOracleFallbackUsername returns the OracleFallbackUsername field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackUsername() string {
	if o == nil || IsNil(o.OracleFallbackUsername) {
		var ret string
		return ret
	}
	return *o.OracleFallbackUsername
}

// GetOracleFallbackUsernameOk returns a tuple with the OracleFallbackUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackUsername) {
		return nil, false
	}
	return o.OracleFallbackUsername, true
}

// HasOracleFallbackUsername returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackUsername() bool {
	if o != nil && !IsNil(o.OracleFallbackUsername) {
		return true
	}

	return false
}

// SetOracleFallbackUsername gets a reference to the given string and assigns it to the OracleFallbackUsername field.
func (o *LinkDSourceParameters) SetOracleFallbackUsername(v string) {
	o.OracleFallbackUsername = &v
}

// GetOracleFallbackPassword returns the OracleFallbackPassword field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackPassword() string {
	if o == nil || IsNil(o.OracleFallbackPassword) {
		var ret string
		return ret
	}
	return *o.OracleFallbackPassword
}

// GetOracleFallbackPasswordOk returns a tuple with the OracleFallbackPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackPassword) {
		return nil, false
	}
	return o.OracleFallbackPassword, true
}

// HasOracleFallbackPassword returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackPassword() bool {
	if o != nil && !IsNil(o.OracleFallbackPassword) {
		return true
	}

	return false
}

// SetOracleFallbackPassword gets a reference to the given string and assigns it to the OracleFallbackPassword field.
func (o *LinkDSourceParameters) SetOracleFallbackPassword(v string) {
	o.OracleFallbackPassword = &v
}

// GetOracleFallbackVault returns the OracleFallbackVault field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackVault() string {
	if o == nil || IsNil(o.OracleFallbackVault) {
		var ret string
		return ret
	}
	return *o.OracleFallbackVault
}

// GetOracleFallbackVaultOk returns a tuple with the OracleFallbackVault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackVaultOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackVault) {
		return nil, false
	}
	return o.OracleFallbackVault, true
}

// HasOracleFallbackVault returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackVault() bool {
	if o != nil && !IsNil(o.OracleFallbackVault) {
		return true
	}

	return false
}

// SetOracleFallbackVault gets a reference to the given string and assigns it to the OracleFallbackVault field.
func (o *LinkDSourceParameters) SetOracleFallbackVault(v string) {
	o.OracleFallbackVault = &v
}

// GetOracleFallbackHashicorpVaultEngine returns the OracleFallbackHashicorpVaultEngine field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackHashicorpVaultEngine() string {
	if o == nil || IsNil(o.OracleFallbackHashicorpVaultEngine) {
		var ret string
		return ret
	}
	return *o.OracleFallbackHashicorpVaultEngine
}

// GetOracleFallbackHashicorpVaultEngineOk returns a tuple with the OracleFallbackHashicorpVaultEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackHashicorpVaultEngineOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackHashicorpVaultEngine) {
		return nil, false
	}
	return o.OracleFallbackHashicorpVaultEngine, true
}

// HasOracleFallbackHashicorpVaultEngine returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackHashicorpVaultEngine() bool {
	if o != nil && !IsNil(o.OracleFallbackHashicorpVaultEngine) {
		return true
	}

	return false
}

// SetOracleFallbackHashicorpVaultEngine gets a reference to the given string and assigns it to the OracleFallbackHashicorpVaultEngine field.
func (o *LinkDSourceParameters) SetOracleFallbackHashicorpVaultEngine(v string) {
	o.OracleFallbackHashicorpVaultEngine = &v
}

// GetOracleFallbackHashicorpVaultSecretPath returns the OracleFallbackHashicorpVaultSecretPath field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackHashicorpVaultSecretPath() string {
	if o == nil || IsNil(o.OracleFallbackHashicorpVaultSecretPath) {
		var ret string
		return ret
	}
	return *o.OracleFallbackHashicorpVaultSecretPath
}

// GetOracleFallbackHashicorpVaultSecretPathOk returns a tuple with the OracleFallbackHashicorpVaultSecretPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackHashicorpVaultSecretPathOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackHashicorpVaultSecretPath) {
		return nil, false
	}
	return o.OracleFallbackHashicorpVaultSecretPath, true
}

// HasOracleFallbackHashicorpVaultSecretPath returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackHashicorpVaultSecretPath() bool {
	if o != nil && !IsNil(o.OracleFallbackHashicorpVaultSecretPath) {
		return true
	}

	return false
}

// SetOracleFallbackHashicorpVaultSecretPath gets a reference to the given string and assigns it to the OracleFallbackHashicorpVaultSecretPath field.
func (o *LinkDSourceParameters) SetOracleFallbackHashicorpVaultSecretPath(v string) {
	o.OracleFallbackHashicorpVaultSecretPath = &v
}

// GetOracleFallbackHashicorpVaultUsernameKey returns the OracleFallbackHashicorpVaultUsernameKey field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackHashicorpVaultUsernameKey() string {
	if o == nil || IsNil(o.OracleFallbackHashicorpVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.OracleFallbackHashicorpVaultUsernameKey
}

// GetOracleFallbackHashicorpVaultUsernameKeyOk returns a tuple with the OracleFallbackHashicorpVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackHashicorpVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackHashicorpVaultUsernameKey) {
		return nil, false
	}
	return o.OracleFallbackHashicorpVaultUsernameKey, true
}

// HasOracleFallbackHashicorpVaultUsernameKey returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackHashicorpVaultUsernameKey() bool {
	if o != nil && !IsNil(o.OracleFallbackHashicorpVaultUsernameKey) {
		return true
	}

	return false
}

// SetOracleFallbackHashicorpVaultUsernameKey gets a reference to the given string and assigns it to the OracleFallbackHashicorpVaultUsernameKey field.
func (o *LinkDSourceParameters) SetOracleFallbackHashicorpVaultUsernameKey(v string) {
	o.OracleFallbackHashicorpVaultUsernameKey = &v
}

// GetOracleFallbackHashicorpVaultSecretKey returns the OracleFallbackHashicorpVaultSecretKey field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackHashicorpVaultSecretKey() string {
	if o == nil || IsNil(o.OracleFallbackHashicorpVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.OracleFallbackHashicorpVaultSecretKey
}

// GetOracleFallbackHashicorpVaultSecretKeyOk returns a tuple with the OracleFallbackHashicorpVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackHashicorpVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackHashicorpVaultSecretKey) {
		return nil, false
	}
	return o.OracleFallbackHashicorpVaultSecretKey, true
}

// HasOracleFallbackHashicorpVaultSecretKey returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackHashicorpVaultSecretKey() bool {
	if o != nil && !IsNil(o.OracleFallbackHashicorpVaultSecretKey) {
		return true
	}

	return false
}

// SetOracleFallbackHashicorpVaultSecretKey gets a reference to the given string and assigns it to the OracleFallbackHashicorpVaultSecretKey field.
func (o *LinkDSourceParameters) SetOracleFallbackHashicorpVaultSecretKey(v string) {
	o.OracleFallbackHashicorpVaultSecretKey = &v
}

// GetOracleFallbackAzureVaultName returns the OracleFallbackAzureVaultName field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackAzureVaultName() string {
	if o == nil || IsNil(o.OracleFallbackAzureVaultName) {
		var ret string
		return ret
	}
	return *o.OracleFallbackAzureVaultName
}

// GetOracleFallbackAzureVaultNameOk returns a tuple with the OracleFallbackAzureVaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackAzureVaultNameOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackAzureVaultName) {
		return nil, false
	}
	return o.OracleFallbackAzureVaultName, true
}

// HasOracleFallbackAzureVaultName returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackAzureVaultName() bool {
	if o != nil && !IsNil(o.OracleFallbackAzureVaultName) {
		return true
	}

	return false
}

// SetOracleFallbackAzureVaultName gets a reference to the given string and assigns it to the OracleFallbackAzureVaultName field.
func (o *LinkDSourceParameters) SetOracleFallbackAzureVaultName(v string) {
	o.OracleFallbackAzureVaultName = &v
}

// GetOracleFallbackAzureVaultUsernameKey returns the OracleFallbackAzureVaultUsernameKey field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackAzureVaultUsernameKey() string {
	if o == nil || IsNil(o.OracleFallbackAzureVaultUsernameKey) {
		var ret string
		return ret
	}
	return *o.OracleFallbackAzureVaultUsernameKey
}

// GetOracleFallbackAzureVaultUsernameKeyOk returns a tuple with the OracleFallbackAzureVaultUsernameKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackAzureVaultUsernameKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackAzureVaultUsernameKey) {
		return nil, false
	}
	return o.OracleFallbackAzureVaultUsernameKey, true
}

// HasOracleFallbackAzureVaultUsernameKey returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackAzureVaultUsernameKey() bool {
	if o != nil && !IsNil(o.OracleFallbackAzureVaultUsernameKey) {
		return true
	}

	return false
}

// SetOracleFallbackAzureVaultUsernameKey gets a reference to the given string and assigns it to the OracleFallbackAzureVaultUsernameKey field.
func (o *LinkDSourceParameters) SetOracleFallbackAzureVaultUsernameKey(v string) {
	o.OracleFallbackAzureVaultUsernameKey = &v
}

// GetOracleFallbackAzureVaultSecretKey returns the OracleFallbackAzureVaultSecretKey field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackAzureVaultSecretKey() string {
	if o == nil || IsNil(o.OracleFallbackAzureVaultSecretKey) {
		var ret string
		return ret
	}
	return *o.OracleFallbackAzureVaultSecretKey
}

// GetOracleFallbackAzureVaultSecretKeyOk returns a tuple with the OracleFallbackAzureVaultSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackAzureVaultSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackAzureVaultSecretKey) {
		return nil, false
	}
	return o.OracleFallbackAzureVaultSecretKey, true
}

// HasOracleFallbackAzureVaultSecretKey returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackAzureVaultSecretKey() bool {
	if o != nil && !IsNil(o.OracleFallbackAzureVaultSecretKey) {
		return true
	}

	return false
}

// SetOracleFallbackAzureVaultSecretKey gets a reference to the given string and assigns it to the OracleFallbackAzureVaultSecretKey field.
func (o *LinkDSourceParameters) SetOracleFallbackAzureVaultSecretKey(v string) {
	o.OracleFallbackAzureVaultSecretKey = &v
}

// GetOracleFallbackCyberarkVaultQueryString returns the OracleFallbackCyberarkVaultQueryString field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOracleFallbackCyberarkVaultQueryString() string {
	if o == nil || IsNil(o.OracleFallbackCyberarkVaultQueryString) {
		var ret string
		return ret
	}
	return *o.OracleFallbackCyberarkVaultQueryString
}

// GetOracleFallbackCyberarkVaultQueryStringOk returns a tuple with the OracleFallbackCyberarkVaultQueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOracleFallbackCyberarkVaultQueryStringOk() (*string, bool) {
	if o == nil || IsNil(o.OracleFallbackCyberarkVaultQueryString) {
		return nil, false
	}
	return o.OracleFallbackCyberarkVaultQueryString, true
}

// HasOracleFallbackCyberarkVaultQueryString returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOracleFallbackCyberarkVaultQueryString() bool {
	if o != nil && !IsNil(o.OracleFallbackCyberarkVaultQueryString) {
		return true
	}

	return false
}

// SetOracleFallbackCyberarkVaultQueryString gets a reference to the given string and assigns it to the OracleFallbackCyberarkVaultQueryString field.
func (o *LinkDSourceParameters) SetOracleFallbackCyberarkVaultQueryString(v string) {
	o.OracleFallbackCyberarkVaultQueryString = &v
}

// GetBackupLevelEnabled returns the BackupLevelEnabled field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetBackupLevelEnabled() bool {
	if o == nil || IsNil(o.BackupLevelEnabled) {
		var ret bool
		return ret
	}
	return *o.BackupLevelEnabled
}

// GetBackupLevelEnabledOk returns a tuple with the BackupLevelEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetBackupLevelEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.BackupLevelEnabled) {
		return nil, false
	}
	return o.BackupLevelEnabled, true
}

// HasBackupLevelEnabled returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasBackupLevelEnabled() bool {
	if o != nil && !IsNil(o.BackupLevelEnabled) {
		return true
	}

	return false
}

// SetBackupLevelEnabled gets a reference to the given bool and assigns it to the BackupLevelEnabled field.
func (o *LinkDSourceParameters) SetBackupLevelEnabled(v bool) {
	o.BackupLevelEnabled = &v
}

// GetRmanChannels returns the RmanChannels field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetRmanChannels() int32 {
	if o == nil || IsNil(o.RmanChannels) {
		var ret int32
		return ret
	}
	return *o.RmanChannels
}

// GetRmanChannelsOk returns a tuple with the RmanChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetRmanChannelsOk() (*int32, bool) {
	if o == nil || IsNil(o.RmanChannels) {
		return nil, false
	}
	return o.RmanChannels, true
}

// HasRmanChannels returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasRmanChannels() bool {
	if o != nil && !IsNil(o.RmanChannels) {
		return true
	}

	return false
}

// SetRmanChannels gets a reference to the given int32 and assigns it to the RmanChannels field.
func (o *LinkDSourceParameters) SetRmanChannels(v int32) {
	o.RmanChannels = &v
}

// GetFilesPerSet returns the FilesPerSet field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetFilesPerSet() int32 {
	if o == nil || IsNil(o.FilesPerSet) {
		var ret int32
		return ret
	}
	return *o.FilesPerSet
}

// GetFilesPerSetOk returns a tuple with the FilesPerSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetFilesPerSetOk() (*int32, bool) {
	if o == nil || IsNil(o.FilesPerSet) {
		return nil, false
	}
	return o.FilesPerSet, true
}

// HasFilesPerSet returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasFilesPerSet() bool {
	if o != nil && !IsNil(o.FilesPerSet) {
		return true
	}

	return false
}

// SetFilesPerSet gets a reference to the given int32 and assigns it to the FilesPerSet field.
func (o *LinkDSourceParameters) SetFilesPerSet(v int32) {
	o.FilesPerSet = &v
}

// GetCheckLogical returns the CheckLogical field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetCheckLogical() bool {
	if o == nil || IsNil(o.CheckLogical) {
		var ret bool
		return ret
	}
	return *o.CheckLogical
}

// GetCheckLogicalOk returns a tuple with the CheckLogical field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetCheckLogicalOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckLogical) {
		return nil, false
	}
	return o.CheckLogical, true
}

// HasCheckLogical returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasCheckLogical() bool {
	if o != nil && !IsNil(o.CheckLogical) {
		return true
	}

	return false
}

// SetCheckLogical gets a reference to the given bool and assigns it to the CheckLogical field.
func (o *LinkDSourceParameters) SetCheckLogical(v bool) {
	o.CheckLogical = &v
}

// GetEncryptedLinkingEnabled returns the EncryptedLinkingEnabled field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetEncryptedLinkingEnabled() bool {
	if o == nil || IsNil(o.EncryptedLinkingEnabled) {
		var ret bool
		return ret
	}
	return *o.EncryptedLinkingEnabled
}

// GetEncryptedLinkingEnabledOk returns a tuple with the EncryptedLinkingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetEncryptedLinkingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.EncryptedLinkingEnabled) {
		return nil, false
	}
	return o.EncryptedLinkingEnabled, true
}

// HasEncryptedLinkingEnabled returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasEncryptedLinkingEnabled() bool {
	if o != nil && !IsNil(o.EncryptedLinkingEnabled) {
		return true
	}

	return false
}

// SetEncryptedLinkingEnabled gets a reference to the given bool and assigns it to the EncryptedLinkingEnabled field.
func (o *LinkDSourceParameters) SetEncryptedLinkingEnabled(v bool) {
	o.EncryptedLinkingEnabled = &v
}

// GetCompressedLinkingEnabled returns the CompressedLinkingEnabled field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetCompressedLinkingEnabled() bool {
	if o == nil || IsNil(o.CompressedLinkingEnabled) {
		var ret bool
		return ret
	}
	return *o.CompressedLinkingEnabled
}

// GetCompressedLinkingEnabledOk returns a tuple with the CompressedLinkingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetCompressedLinkingEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.CompressedLinkingEnabled) {
		return nil, false
	}
	return o.CompressedLinkingEnabled, true
}

// HasCompressedLinkingEnabled returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasCompressedLinkingEnabled() bool {
	if o != nil && !IsNil(o.CompressedLinkingEnabled) {
		return true
	}

	return false
}

// SetCompressedLinkingEnabled gets a reference to the given bool and assigns it to the CompressedLinkingEnabled field.
func (o *LinkDSourceParameters) SetCompressedLinkingEnabled(v bool) {
	o.CompressedLinkingEnabled = &v
}

// GetBandwidthLimit returns the BandwidthLimit field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetBandwidthLimit() int32 {
	if o == nil || IsNil(o.BandwidthLimit) {
		var ret int32
		return ret
	}
	return *o.BandwidthLimit
}

// GetBandwidthLimitOk returns a tuple with the BandwidthLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetBandwidthLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.BandwidthLimit) {
		return nil, false
	}
	return o.BandwidthLimit, true
}

// HasBandwidthLimit returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasBandwidthLimit() bool {
	if o != nil && !IsNil(o.BandwidthLimit) {
		return true
	}

	return false
}

// SetBandwidthLimit gets a reference to the given int32 and assigns it to the BandwidthLimit field.
func (o *LinkDSourceParameters) SetBandwidthLimit(v int32) {
	o.BandwidthLimit = &v
}

// GetNumberOfConnections returns the NumberOfConnections field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetNumberOfConnections() int32 {
	if o == nil || IsNil(o.NumberOfConnections) {
		var ret int32
		return ret
	}
	return *o.NumberOfConnections
}

// GetNumberOfConnectionsOk returns a tuple with the NumberOfConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetNumberOfConnectionsOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfConnections) {
		return nil, false
	}
	return o.NumberOfConnections, true
}

// HasNumberOfConnections returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasNumberOfConnections() bool {
	if o != nil && !IsNil(o.NumberOfConnections) {
		return true
	}

	return false
}

// SetNumberOfConnections gets a reference to the given int32 and assigns it to the NumberOfConnections field.
func (o *LinkDSourceParameters) SetNumberOfConnections(v int32) {
	o.NumberOfConnections = &v
}

// GetDiagnoseNoLoggingFaults returns the DiagnoseNoLoggingFaults field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetDiagnoseNoLoggingFaults() bool {
	if o == nil || IsNil(o.DiagnoseNoLoggingFaults) {
		var ret bool
		return ret
	}
	return *o.DiagnoseNoLoggingFaults
}

// GetDiagnoseNoLoggingFaultsOk returns a tuple with the DiagnoseNoLoggingFaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetDiagnoseNoLoggingFaultsOk() (*bool, bool) {
	if o == nil || IsNil(o.DiagnoseNoLoggingFaults) {
		return nil, false
	}
	return o.DiagnoseNoLoggingFaults, true
}

// HasDiagnoseNoLoggingFaults returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasDiagnoseNoLoggingFaults() bool {
	if o != nil && !IsNil(o.DiagnoseNoLoggingFaults) {
		return true
	}

	return false
}

// SetDiagnoseNoLoggingFaults gets a reference to the given bool and assigns it to the DiagnoseNoLoggingFaults field.
func (o *LinkDSourceParameters) SetDiagnoseNoLoggingFaults(v bool) {
	o.DiagnoseNoLoggingFaults = &v
}

// GetPreProvisioningEnabled returns the PreProvisioningEnabled field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetPreProvisioningEnabled() bool {
	if o == nil || IsNil(o.PreProvisioningEnabled) {
		var ret bool
		return ret
	}
	return *o.PreProvisioningEnabled
}

// GetPreProvisioningEnabledOk returns a tuple with the PreProvisioningEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetPreProvisioningEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PreProvisioningEnabled) {
		return nil, false
	}
	return o.PreProvisioningEnabled, true
}

// HasPreProvisioningEnabled returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasPreProvisioningEnabled() bool {
	if o != nil && !IsNil(o.PreProvisioningEnabled) {
		return true
	}

	return false
}

// SetPreProvisioningEnabled gets a reference to the given bool and assigns it to the PreProvisioningEnabled field.
func (o *LinkDSourceParameters) SetPreProvisioningEnabled(v bool) {
	o.PreProvisioningEnabled = &v
}

// GetLinkNow returns the LinkNow field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetLinkNow() bool {
	if o == nil || IsNil(o.LinkNow) {
		var ret bool
		return ret
	}
	return *o.LinkNow
}

// GetLinkNowOk returns a tuple with the LinkNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetLinkNowOk() (*bool, bool) {
	if o == nil || IsNil(o.LinkNow) {
		return nil, false
	}
	return o.LinkNow, true
}

// HasLinkNow returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasLinkNow() bool {
	if o != nil && !IsNil(o.LinkNow) {
		return true
	}

	return false
}

// SetLinkNow gets a reference to the given bool and assigns it to the LinkNow field.
func (o *LinkDSourceParameters) SetLinkNow(v bool) {
	o.LinkNow = &v
}

// GetForceFullBackup returns the ForceFullBackup field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetForceFullBackup() bool {
	if o == nil || IsNil(o.ForceFullBackup) {
		var ret bool
		return ret
	}
	return *o.ForceFullBackup
}

// GetForceFullBackupOk returns a tuple with the ForceFullBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetForceFullBackupOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceFullBackup) {
		return nil, false
	}
	return o.ForceFullBackup, true
}

// HasForceFullBackup returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasForceFullBackup() bool {
	if o != nil && !IsNil(o.ForceFullBackup) {
		return true
	}

	return false
}

// SetForceFullBackup gets a reference to the given bool and assigns it to the ForceFullBackup field.
func (o *LinkDSourceParameters) SetForceFullBackup(v bool) {
	o.ForceFullBackup = &v
}

// GetDoubleSync returns the DoubleSync field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetDoubleSync() bool {
	if o == nil || IsNil(o.DoubleSync) {
		var ret bool
		return ret
	}
	return *o.DoubleSync
}

// GetDoubleSyncOk returns a tuple with the DoubleSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetDoubleSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.DoubleSync) {
		return nil, false
	}
	return o.DoubleSync, true
}

// HasDoubleSync returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasDoubleSync() bool {
	if o != nil && !IsNil(o.DoubleSync) {
		return true
	}

	return false
}

// SetDoubleSync gets a reference to the given bool and assigns it to the DoubleSync field.
func (o *LinkDSourceParameters) SetDoubleSync(v bool) {
	o.DoubleSync = &v
}

// GetSkipSpaceCheck returns the SkipSpaceCheck field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetSkipSpaceCheck() bool {
	if o == nil || IsNil(o.SkipSpaceCheck) {
		var ret bool
		return ret
	}
	return *o.SkipSpaceCheck
}

// GetSkipSpaceCheckOk returns a tuple with the SkipSpaceCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetSkipSpaceCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSpaceCheck) {
		return nil, false
	}
	return o.SkipSpaceCheck, true
}

// HasSkipSpaceCheck returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasSkipSpaceCheck() bool {
	if o != nil && !IsNil(o.SkipSpaceCheck) {
		return true
	}

	return false
}

// SetSkipSpaceCheck gets a reference to the given bool and assigns it to the SkipSpaceCheck field.
func (o *LinkDSourceParameters) SetSkipSpaceCheck(v bool) {
	o.SkipSpaceCheck = &v
}

// GetDoNotResume returns the DoNotResume field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetDoNotResume() bool {
	if o == nil || IsNil(o.DoNotResume) {
		var ret bool
		return ret
	}
	return *o.DoNotResume
}

// GetDoNotResumeOk returns a tuple with the DoNotResume field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetDoNotResumeOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotResume) {
		return nil, false
	}
	return o.DoNotResume, true
}

// HasDoNotResume returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasDoNotResume() bool {
	if o != nil && !IsNil(o.DoNotResume) {
		return true
	}

	return false
}

// SetDoNotResume gets a reference to the given bool and assigns it to the DoNotResume field.
func (o *LinkDSourceParameters) SetDoNotResume(v bool) {
	o.DoNotResume = &v
}

// GetFilesForFullBackup returns the FilesForFullBackup field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetFilesForFullBackup() []int32 {
	if o == nil || IsNil(o.FilesForFullBackup) {
		var ret []int32
		return ret
	}
	return o.FilesForFullBackup
}

// GetFilesForFullBackupOk returns a tuple with the FilesForFullBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetFilesForFullBackupOk() ([]int32, bool) {
	if o == nil || IsNil(o.FilesForFullBackup) {
		return nil, false
	}
	return o.FilesForFullBackup, true
}

// HasFilesForFullBackup returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasFilesForFullBackup() bool {
	if o != nil && !IsNil(o.FilesForFullBackup) {
		return true
	}

	return false
}

// SetFilesForFullBackup gets a reference to the given []int32 and assigns it to the FilesForFullBackup field.
func (o *LinkDSourceParameters) SetFilesForFullBackup(v []int32) {
	o.FilesForFullBackup = v
}

// GetLogSyncMode returns the LogSyncMode field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetLogSyncMode() string {
	if o == nil || IsNil(o.LogSyncMode) {
		var ret string
		return ret
	}
	return *o.LogSyncMode
}

// GetLogSyncModeOk returns a tuple with the LogSyncMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetLogSyncModeOk() (*string, bool) {
	if o == nil || IsNil(o.LogSyncMode) {
		return nil, false
	}
	return o.LogSyncMode, true
}

// HasLogSyncMode returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasLogSyncMode() bool {
	if o != nil && !IsNil(o.LogSyncMode) {
		return true
	}

	return false
}

// SetLogSyncMode gets a reference to the given string and assigns it to the LogSyncMode field.
func (o *LinkDSourceParameters) SetLogSyncMode(v string) {
	o.LogSyncMode = &v
}

// GetLogSyncInterval returns the LogSyncInterval field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetLogSyncInterval() int32 {
	if o == nil || IsNil(o.LogSyncInterval) {
		var ret int32
		return ret
	}
	return *o.LogSyncInterval
}

// GetLogSyncIntervalOk returns a tuple with the LogSyncInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetLogSyncIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.LogSyncInterval) {
		return nil, false
	}
	return o.LogSyncInterval, true
}

// HasLogSyncInterval returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasLogSyncInterval() bool {
	if o != nil && !IsNil(o.LogSyncInterval) {
		return true
	}

	return false
}

// SetLogSyncInterval gets a reference to the given int32 and assigns it to the LogSyncInterval field.
func (o *LinkDSourceParameters) SetLogSyncInterval(v int32) {
	o.LogSyncInterval = &v
}

// GetLogSyncEnabled returns the LogSyncEnabled field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetLogSyncEnabled() bool {
	if o == nil || IsNil(o.LogSyncEnabled) {
		var ret bool
		return ret
	}
	return *o.LogSyncEnabled
}

// GetLogSyncEnabledOk returns a tuple with the LogSyncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetLogSyncEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.LogSyncEnabled) {
		return nil, false
	}
	return o.LogSyncEnabled, true
}

// HasLogSyncEnabled returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasLogSyncEnabled() bool {
	if o != nil && !IsNil(o.LogSyncEnabled) {
		return true
	}

	return false
}

// SetLogSyncEnabled gets a reference to the given bool and assigns it to the LogSyncEnabled field.
func (o *LinkDSourceParameters) SetLogSyncEnabled(v bool) {
	o.LogSyncEnabled = &v
}

// GetExternalFilePath returns the ExternalFilePath field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetExternalFilePath() string {
	if o == nil || IsNil(o.ExternalFilePath) {
		var ret string
		return ret
	}
	return *o.ExternalFilePath
}

// GetExternalFilePathOk returns a tuple with the ExternalFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetExternalFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalFilePath) {
		return nil, false
	}
	return o.ExternalFilePath, true
}

// HasExternalFilePath returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasExternalFilePath() bool {
	if o != nil && !IsNil(o.ExternalFilePath) {
		return true
	}

	return false
}

// SetExternalFilePath gets a reference to the given string and assigns it to the ExternalFilePath field.
func (o *LinkDSourceParameters) SetExternalFilePath(v string) {
	o.ExternalFilePath = &v
}

// GetMakeCurrentAccountOwner returns the MakeCurrentAccountOwner field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetMakeCurrentAccountOwner() bool {
	if o == nil || IsNil(o.MakeCurrentAccountOwner) {
		var ret bool
		return ret
	}
	return *o.MakeCurrentAccountOwner
}

// GetMakeCurrentAccountOwnerOk returns a tuple with the MakeCurrentAccountOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetMakeCurrentAccountOwnerOk() (*bool, bool) {
	if o == nil || IsNil(o.MakeCurrentAccountOwner) {
		return nil, false
	}
	return o.MakeCurrentAccountOwner, true
}

// HasMakeCurrentAccountOwner returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasMakeCurrentAccountOwner() bool {
	if o != nil && !IsNil(o.MakeCurrentAccountOwner) {
		return true
	}

	return false
}

// SetMakeCurrentAccountOwner gets a reference to the given bool and assigns it to the MakeCurrentAccountOwner field.
func (o *LinkDSourceParameters) SetMakeCurrentAccountOwner(v bool) {
	o.MakeCurrentAccountOwner = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *LinkDSourceParameters) SetTags(v []Tag) {
	o.Tags = v
}

// GetOpsPreSync returns the OpsPreSync field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOpsPreSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPreSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPreSync
}

// GetOpsPreSyncOk returns a tuple with the OpsPreSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOpsPreSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPreSync) {
		return nil, false
	}
	return o.OpsPreSync, true
}

// HasOpsPreSync returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOpsPreSync() bool {
	if o != nil && !IsNil(o.OpsPreSync) {
		return true
	}

	return false
}

// SetOpsPreSync gets a reference to the given []SourceOperation and assigns it to the OpsPreSync field.
func (o *LinkDSourceParameters) SetOpsPreSync(v []SourceOperation) {
	o.OpsPreSync = v
}

// GetOpsPreLogSync returns the OpsPreLogSync field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOpsPreLogSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPreLogSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPreLogSync
}

// GetOpsPreLogSyncOk returns a tuple with the OpsPreLogSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOpsPreLogSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPreLogSync) {
		return nil, false
	}
	return o.OpsPreLogSync, true
}

// HasOpsPreLogSync returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOpsPreLogSync() bool {
	if o != nil && !IsNil(o.OpsPreLogSync) {
		return true
	}

	return false
}

// SetOpsPreLogSync gets a reference to the given []SourceOperation and assigns it to the OpsPreLogSync field.
func (o *LinkDSourceParameters) SetOpsPreLogSync(v []SourceOperation) {
	o.OpsPreLogSync = v
}

// GetOpsPostSync returns the OpsPostSync field value if set, zero value otherwise.
func (o *LinkDSourceParameters) GetOpsPostSync() []SourceOperation {
	if o == nil || IsNil(o.OpsPostSync) {
		var ret []SourceOperation
		return ret
	}
	return o.OpsPostSync
}

// GetOpsPostSyncOk returns a tuple with the OpsPostSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkDSourceParameters) GetOpsPostSyncOk() ([]SourceOperation, bool) {
	if o == nil || IsNil(o.OpsPostSync) {
		return nil, false
	}
	return o.OpsPostSync, true
}

// HasOpsPostSync returns a boolean if a field has been set.
func (o *LinkDSourceParameters) HasOpsPostSync() bool {
	if o != nil && !IsNil(o.OpsPostSync) {
		return true
	}

	return false
}

// SetOpsPostSync gets a reference to the given []SourceOperation and assigns it to the OpsPostSync field.
func (o *LinkDSourceParameters) SetOpsPostSync(v []SourceOperation) {
	o.OpsPostSync = v
}

func (o LinkDSourceParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkDSourceParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["source_id"] = o.SourceId
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.EnvironmentUserId) {
		toSerialize["environment_user_id"] = o.EnvironmentUserId
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.OracleNonSysUsername) {
		toSerialize["oracle_non_sys_username"] = o.OracleNonSysUsername
	}
	if !IsNil(o.OracleNonSysPassword) {
		toSerialize["oracle_non_sys_password"] = o.OracleNonSysPassword
	}
	if !IsNil(o.OracleNonSysVault) {
		toSerialize["oracle_non_sys_vault"] = o.OracleNonSysVault
	}
	if !IsNil(o.OracleNonSysHashicorpVaultEngine) {
		toSerialize["oracle_non_sys_hashicorp_vault_engine"] = o.OracleNonSysHashicorpVaultEngine
	}
	if !IsNil(o.OracleNonSysHashicorpVaultSecretPath) {
		toSerialize["oracle_non_sys_hashicorp_vault_secret_path"] = o.OracleNonSysHashicorpVaultSecretPath
	}
	if !IsNil(o.OracleNonSysHashicorpVaultUsernameKey) {
		toSerialize["oracle_non_sys_hashicorp_vault_username_key"] = o.OracleNonSysHashicorpVaultUsernameKey
	}
	if !IsNil(o.OracleNonSysHashicorpVaultSecretKey) {
		toSerialize["oracle_non_sys_hashicorp_vault_secret_key"] = o.OracleNonSysHashicorpVaultSecretKey
	}
	if !IsNil(o.OracleNonSysAzureVaultName) {
		toSerialize["oracle_non_sys_azure_vault_name"] = o.OracleNonSysAzureVaultName
	}
	if !IsNil(o.OracleNonSysAzureVaultUsernameKey) {
		toSerialize["oracle_non_sys_azure_vault_username_key"] = o.OracleNonSysAzureVaultUsernameKey
	}
	if !IsNil(o.OracleNonSysAzureVaultSecretKey) {
		toSerialize["oracle_non_sys_azure_vault_secret_key"] = o.OracleNonSysAzureVaultSecretKey
	}
	if !IsNil(o.OracleNonSysCyberarkVaultQueryString) {
		toSerialize["oracle_non_sys_cyberark_vault_query_string"] = o.OracleNonSysCyberarkVaultQueryString
	}
	if !IsNil(o.OracleFallbackUsername) {
		toSerialize["oracle_fallback_username"] = o.OracleFallbackUsername
	}
	if !IsNil(o.OracleFallbackPassword) {
		toSerialize["oracle_fallback_password"] = o.OracleFallbackPassword
	}
	if !IsNil(o.OracleFallbackVault) {
		toSerialize["oracle_fallback_vault"] = o.OracleFallbackVault
	}
	if !IsNil(o.OracleFallbackHashicorpVaultEngine) {
		toSerialize["oracle_fallback_hashicorp_vault_engine"] = o.OracleFallbackHashicorpVaultEngine
	}
	if !IsNil(o.OracleFallbackHashicorpVaultSecretPath) {
		toSerialize["oracle_fallback_hashicorp_vault_secret_path"] = o.OracleFallbackHashicorpVaultSecretPath
	}
	if !IsNil(o.OracleFallbackHashicorpVaultUsernameKey) {
		toSerialize["oracle_fallback_hashicorp_vault_username_key"] = o.OracleFallbackHashicorpVaultUsernameKey
	}
	if !IsNil(o.OracleFallbackHashicorpVaultSecretKey) {
		toSerialize["oracle_fallback_hashicorp_vault_secret_key"] = o.OracleFallbackHashicorpVaultSecretKey
	}
	if !IsNil(o.OracleFallbackAzureVaultName) {
		toSerialize["oracle_fallback_azure_vault_name"] = o.OracleFallbackAzureVaultName
	}
	if !IsNil(o.OracleFallbackAzureVaultUsernameKey) {
		toSerialize["oracle_fallback_azure_vault_username_key"] = o.OracleFallbackAzureVaultUsernameKey
	}
	if !IsNil(o.OracleFallbackAzureVaultSecretKey) {
		toSerialize["oracle_fallback_azure_vault_secret_key"] = o.OracleFallbackAzureVaultSecretKey
	}
	if !IsNil(o.OracleFallbackCyberarkVaultQueryString) {
		toSerialize["oracle_fallback_cyberark_vault_query_string"] = o.OracleFallbackCyberarkVaultQueryString
	}
	if !IsNil(o.BackupLevelEnabled) {
		toSerialize["backup_level_enabled"] = o.BackupLevelEnabled
	}
	if !IsNil(o.RmanChannels) {
		toSerialize["rman_channels"] = o.RmanChannels
	}
	if !IsNil(o.FilesPerSet) {
		toSerialize["files_per_set"] = o.FilesPerSet
	}
	if !IsNil(o.CheckLogical) {
		toSerialize["check_logical"] = o.CheckLogical
	}
	if !IsNil(o.EncryptedLinkingEnabled) {
		toSerialize["encrypted_linking_enabled"] = o.EncryptedLinkingEnabled
	}
	if !IsNil(o.CompressedLinkingEnabled) {
		toSerialize["compressed_linking_enabled"] = o.CompressedLinkingEnabled
	}
	if !IsNil(o.BandwidthLimit) {
		toSerialize["bandwidth_limit"] = o.BandwidthLimit
	}
	if !IsNil(o.NumberOfConnections) {
		toSerialize["number_of_connections"] = o.NumberOfConnections
	}
	if !IsNil(o.DiagnoseNoLoggingFaults) {
		toSerialize["diagnose_no_logging_faults"] = o.DiagnoseNoLoggingFaults
	}
	if !IsNil(o.PreProvisioningEnabled) {
		toSerialize["pre_provisioning_enabled"] = o.PreProvisioningEnabled
	}
	if !IsNil(o.LinkNow) {
		toSerialize["link_now"] = o.LinkNow
	}
	if !IsNil(o.ForceFullBackup) {
		toSerialize["force_full_backup"] = o.ForceFullBackup
	}
	if !IsNil(o.DoubleSync) {
		toSerialize["double_sync"] = o.DoubleSync
	}
	if !IsNil(o.SkipSpaceCheck) {
		toSerialize["skip_space_check"] = o.SkipSpaceCheck
	}
	if !IsNil(o.DoNotResume) {
		toSerialize["do_not_resume"] = o.DoNotResume
	}
	if !IsNil(o.FilesForFullBackup) {
		toSerialize["files_for_full_backup"] = o.FilesForFullBackup
	}
	if !IsNil(o.LogSyncMode) {
		toSerialize["log_sync_mode"] = o.LogSyncMode
	}
	if !IsNil(o.LogSyncInterval) {
		toSerialize["log_sync_interval"] = o.LogSyncInterval
	}
	if !IsNil(o.LogSyncEnabled) {
		toSerialize["log_sync_enabled"] = o.LogSyncEnabled
	}
	if !IsNil(o.ExternalFilePath) {
		toSerialize["external_file_path"] = o.ExternalFilePath
	}
	if !IsNil(o.MakeCurrentAccountOwner) {
		toSerialize["make_current_account_owner"] = o.MakeCurrentAccountOwner
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.OpsPreSync) {
		toSerialize["ops_pre_sync"] = o.OpsPreSync
	}
	if !IsNil(o.OpsPreLogSync) {
		toSerialize["ops_pre_log_sync"] = o.OpsPreLogSync
	}
	if !IsNil(o.OpsPostSync) {
		toSerialize["ops_post_sync"] = o.OpsPostSync
	}
	return toSerialize, nil
}

type NullableLinkDSourceParameters struct {
	value *LinkDSourceParameters
	isSet bool
}

func (v NullableLinkDSourceParameters) Get() *LinkDSourceParameters {
	return v.value
}

func (v *NullableLinkDSourceParameters) Set(val *LinkDSourceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkDSourceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkDSourceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkDSourceParameters(val *LinkDSourceParameters) *NullableLinkDSourceParameters {
	return &NullableLinkDSourceParameters{value: val, isSet: true}
}

func (v NullableLinkDSourceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkDSourceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


