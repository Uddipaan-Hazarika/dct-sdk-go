/*
Delphix DCT API

Delphix DCT API

API version: 2.0.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// ConnectivityCheckResponse The result of the connectivity check.
type ConnectivityCheckResponse struct {
	// A message describing the result of the connectivity check.
	Message string `json:"message"`
}

// NewConnectivityCheckResponse instantiates a new ConnectivityCheckResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectivityCheckResponse(message string) *ConnectivityCheckResponse {
	this := ConnectivityCheckResponse{}
	this.Message = message
	return &this
}

// NewConnectivityCheckResponseWithDefaults instantiates a new ConnectivityCheckResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectivityCheckResponseWithDefaults() *ConnectivityCheckResponse {
	this := ConnectivityCheckResponse{}
	return &this
}

// GetMessage returns the Message field value
func (o *ConnectivityCheckResponse) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ConnectivityCheckResponse) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ConnectivityCheckResponse) SetMessage(v string) {
	o.Message = v
}

func (o ConnectivityCheckResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableConnectivityCheckResponse struct {
	value *ConnectivityCheckResponse
	isSet bool
}

func (v NullableConnectivityCheckResponse) Get() *ConnectivityCheckResponse {
	return v.value
}

func (v *NullableConnectivityCheckResponse) Set(val *ConnectivityCheckResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectivityCheckResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectivityCheckResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectivityCheckResponse(val *ConnectivityCheckResponse) *NullableConnectivityCheckResponse {
	return &NullableConnectivityCheckResponse{value: val, isSet: true}
}

func (v NullableConnectivityCheckResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectivityCheckResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


