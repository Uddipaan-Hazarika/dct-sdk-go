/*
Delphix DCT API

Delphix DCT API

API version: 3.1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the Environment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Environment{}

// Environment A grouping of a single host or a cluster of hosts.
type Environment struct {
	// The Environment object entity ID.
	Id *string `json:"id,omitempty"`
	// The name of this environment.
	Name *string `json:"name,omitempty"`
	// The namespace of this environment for replicated and restored objects.
	Namespace NullableString `json:"namespace,omitempty"`
	// A reference to the Engine that this Environment connection is associated with.
	EngineId *string `json:"engine_id,omitempty"`
	// True if this environment is enabled.
	Enabled *bool `json:"enabled,omitempty"`
	// True if this environment is a cluster of hosts.
	IsCluster *bool `json:"is_cluster,omitempty"`
	// Cluster home for RAC environment.
	ClusterHome *string `json:"cluster_home,omitempty"`
	// True if this windows environment is a target environment.
	IsWindowsTarget *bool `json:"is_windows_target,omitempty"`
	// The hosts that are part of this environment.
	Hosts []Host `json:"hosts,omitempty"`
	// The tags to be created for this environment.
	Tags []Tag `json:"tags,omitempty"`
	// Repositories associated with this environment. A Repository typically corresponds to a database installation.
	Repositories []Repository `json:"repositories,omitempty"`
	// Oracle listeners associated with this environment.
	Listeners []OracleListener `json:"listeners,omitempty"`
}

// NewEnvironment instantiates a new Environment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironment() *Environment {
	this := Environment{}
	return &this
}

// NewEnvironmentWithDefaults instantiates a new Environment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentWithDefaults() *Environment {
	this := Environment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Environment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Environment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Environment) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Environment) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Environment) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Environment) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Environment) GetNamespace() string {
	if o == nil || IsNil(o.Namespace.Get()) {
		var ret string
		return ret
	}
	return *o.Namespace.Get()
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Environment) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Namespace.Get(), o.Namespace.IsSet()
}

// HasNamespace returns a boolean if a field has been set.
func (o *Environment) HasNamespace() bool {
	if o != nil && o.Namespace.IsSet() {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given NullableString and assigns it to the Namespace field.
func (o *Environment) SetNamespace(v string) {
	o.Namespace.Set(&v)
}
// SetNamespaceNil sets the value for Namespace to be an explicit nil
func (o *Environment) SetNamespaceNil() {
	o.Namespace.Set(nil)
}

// UnsetNamespace ensures that no value is present for Namespace, not even an explicit nil
func (o *Environment) UnsetNamespace() {
	o.Namespace.Unset()
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *Environment) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *Environment) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *Environment) SetEngineId(v string) {
	o.EngineId = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Environment) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Environment) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Environment) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetIsCluster returns the IsCluster field value if set, zero value otherwise.
func (o *Environment) GetIsCluster() bool {
	if o == nil || IsNil(o.IsCluster) {
		var ret bool
		return ret
	}
	return *o.IsCluster
}

// GetIsClusterOk returns a tuple with the IsCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetIsClusterOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCluster) {
		return nil, false
	}
	return o.IsCluster, true
}

// HasIsCluster returns a boolean if a field has been set.
func (o *Environment) HasIsCluster() bool {
	if o != nil && !IsNil(o.IsCluster) {
		return true
	}

	return false
}

// SetIsCluster gets a reference to the given bool and assigns it to the IsCluster field.
func (o *Environment) SetIsCluster(v bool) {
	o.IsCluster = &v
}

// GetClusterHome returns the ClusterHome field value if set, zero value otherwise.
func (o *Environment) GetClusterHome() string {
	if o == nil || IsNil(o.ClusterHome) {
		var ret string
		return ret
	}
	return *o.ClusterHome
}

// GetClusterHomeOk returns a tuple with the ClusterHome field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetClusterHomeOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterHome) {
		return nil, false
	}
	return o.ClusterHome, true
}

// HasClusterHome returns a boolean if a field has been set.
func (o *Environment) HasClusterHome() bool {
	if o != nil && !IsNil(o.ClusterHome) {
		return true
	}

	return false
}

// SetClusterHome gets a reference to the given string and assigns it to the ClusterHome field.
func (o *Environment) SetClusterHome(v string) {
	o.ClusterHome = &v
}

// GetIsWindowsTarget returns the IsWindowsTarget field value if set, zero value otherwise.
func (o *Environment) GetIsWindowsTarget() bool {
	if o == nil || IsNil(o.IsWindowsTarget) {
		var ret bool
		return ret
	}
	return *o.IsWindowsTarget
}

// GetIsWindowsTargetOk returns a tuple with the IsWindowsTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetIsWindowsTargetOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWindowsTarget) {
		return nil, false
	}
	return o.IsWindowsTarget, true
}

// HasIsWindowsTarget returns a boolean if a field has been set.
func (o *Environment) HasIsWindowsTarget() bool {
	if o != nil && !IsNil(o.IsWindowsTarget) {
		return true
	}

	return false
}

// SetIsWindowsTarget gets a reference to the given bool and assigns it to the IsWindowsTarget field.
func (o *Environment) SetIsWindowsTarget(v bool) {
	o.IsWindowsTarget = &v
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *Environment) GetHosts() []Host {
	if o == nil || IsNil(o.Hosts) {
		var ret []Host
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetHostsOk() ([]Host, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *Environment) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []Host and assigns it to the Hosts field.
func (o *Environment) SetHosts(v []Host) {
	o.Hosts = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Environment) GetTags() []Tag {
	if o == nil || IsNil(o.Tags) {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Environment) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *Environment) SetTags(v []Tag) {
	o.Tags = v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *Environment) GetRepositories() []Repository {
	if o == nil || IsNil(o.Repositories) {
		var ret []Repository
		return ret
	}
	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetRepositoriesOk() ([]Repository, bool) {
	if o == nil || IsNil(o.Repositories) {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *Environment) HasRepositories() bool {
	if o != nil && !IsNil(o.Repositories) {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []Repository and assigns it to the Repositories field.
func (o *Environment) SetRepositories(v []Repository) {
	o.Repositories = v
}

// GetListeners returns the Listeners field value if set, zero value otherwise.
func (o *Environment) GetListeners() []OracleListener {
	if o == nil || IsNil(o.Listeners) {
		var ret []OracleListener
		return ret
	}
	return o.Listeners
}

// GetListenersOk returns a tuple with the Listeners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Environment) GetListenersOk() ([]OracleListener, bool) {
	if o == nil || IsNil(o.Listeners) {
		return nil, false
	}
	return o.Listeners, true
}

// HasListeners returns a boolean if a field has been set.
func (o *Environment) HasListeners() bool {
	if o != nil && !IsNil(o.Listeners) {
		return true
	}

	return false
}

// SetListeners gets a reference to the given []OracleListener and assigns it to the Listeners field.
func (o *Environment) SetListeners(v []OracleListener) {
	o.Listeners = v
}

func (o Environment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Environment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Namespace.IsSet() {
		toSerialize["namespace"] = o.Namespace.Get()
	}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.IsCluster) {
		toSerialize["is_cluster"] = o.IsCluster
	}
	if !IsNil(o.ClusterHome) {
		toSerialize["cluster_home"] = o.ClusterHome
	}
	if !IsNil(o.IsWindowsTarget) {
		toSerialize["is_windows_target"] = o.IsWindowsTarget
	}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Repositories) {
		toSerialize["repositories"] = o.Repositories
	}
	if !IsNil(o.Listeners) {
		toSerialize["listeners"] = o.Listeners
	}
	return toSerialize, nil
}

type NullableEnvironment struct {
	value *Environment
	isSet bool
}

func (v NullableEnvironment) Get() *Environment {
	return v.value
}

func (v *NullableEnvironment) Set(val *Environment) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironment) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironment(val *Environment) *NullableEnvironment {
	return &NullableEnvironment{value: val, isSet: true}
}

func (v NullableEnvironment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


