/*
Delphix DCT API

Delphix DCT API

API version: 2.0.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// UpdateVDBParameters Parameters to update a VDB.
type UpdateVDBParameters struct {
	// The unique name of the VDB within a group.
	Name *string `json:"name,omitempty"`
	// The username of the database user (Oracle, ASE Only).
	DbUsername *string `json:"db_username,omitempty"`
	// The password of the database user (Oracle, ASE Only).
	DbPassword *string `json:"db_password,omitempty"`
	// Whether db_username and db_password must be validated, if present, againt the VDB. This must be set to false when credentials validation is not possible, for instance if the VDB is known to be disabled.
	ValidateDbCredentials *bool `json:"validate_db_credentials,omitempty"`
	// Whether to enable VDB restart.
	AutoRestart *bool `json:"auto_restart,omitempty"`
	// The environment user ID to use to connect to the target environment.
	EnvironmentUserId *string `json:"environment_user_id,omitempty"`
	// The ID of the target VDB Template (Oracle Only).
	TemplateId *string `json:"template_id,omitempty"`
	// The listener IDs for this provision operation (Oracle Only).
	ListenerIds []string `json:"listener_ids,omitempty"`
	// Whether to enable new DBID for Oracle
	NewDbid *bool `json:"new_dbid,omitempty"`
	// Whether to enable CDC on provision for MSSql
	CdcOnProvision *bool `json:"cdc_on_provision,omitempty"`
	// Pre script for MSSql.
	PreScript *string `json:"pre_script,omitempty"`
	// Post script for MSSql.
	PostScript *string `json:"post_script,omitempty"`
	Hooks *VirtualDatasetHooks `json:"hooks,omitempty"`
}

// NewUpdateVDBParameters instantiates a new UpdateVDBParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateVDBParameters() *UpdateVDBParameters {
	this := UpdateVDBParameters{}
	var validateDbCredentials bool = true
	this.ValidateDbCredentials = &validateDbCredentials
	return &this
}

// NewUpdateVDBParametersWithDefaults instantiates a new UpdateVDBParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateVDBParametersWithDefaults() *UpdateVDBParameters {
	this := UpdateVDBParameters{}
	var validateDbCredentials bool = true
	this.ValidateDbCredentials = &validateDbCredentials
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateVDBParameters) SetName(v string) {
	o.Name = &v
}

// GetDbUsername returns the DbUsername field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetDbUsername() string {
	if o == nil || o.DbUsername == nil {
		var ret string
		return ret
	}
	return *o.DbUsername
}

// GetDbUsernameOk returns a tuple with the DbUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetDbUsernameOk() (*string, bool) {
	if o == nil || o.DbUsername == nil {
		return nil, false
	}
	return o.DbUsername, true
}

// HasDbUsername returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasDbUsername() bool {
	if o != nil && o.DbUsername != nil {
		return true
	}

	return false
}

// SetDbUsername gets a reference to the given string and assigns it to the DbUsername field.
func (o *UpdateVDBParameters) SetDbUsername(v string) {
	o.DbUsername = &v
}

// GetDbPassword returns the DbPassword field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetDbPassword() string {
	if o == nil || o.DbPassword == nil {
		var ret string
		return ret
	}
	return *o.DbPassword
}

// GetDbPasswordOk returns a tuple with the DbPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetDbPasswordOk() (*string, bool) {
	if o == nil || o.DbPassword == nil {
		return nil, false
	}
	return o.DbPassword, true
}

// HasDbPassword returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasDbPassword() bool {
	if o != nil && o.DbPassword != nil {
		return true
	}

	return false
}

// SetDbPassword gets a reference to the given string and assigns it to the DbPassword field.
func (o *UpdateVDBParameters) SetDbPassword(v string) {
	o.DbPassword = &v
}

// GetValidateDbCredentials returns the ValidateDbCredentials field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetValidateDbCredentials() bool {
	if o == nil || o.ValidateDbCredentials == nil {
		var ret bool
		return ret
	}
	return *o.ValidateDbCredentials
}

// GetValidateDbCredentialsOk returns a tuple with the ValidateDbCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetValidateDbCredentialsOk() (*bool, bool) {
	if o == nil || o.ValidateDbCredentials == nil {
		return nil, false
	}
	return o.ValidateDbCredentials, true
}

// HasValidateDbCredentials returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasValidateDbCredentials() bool {
	if o != nil && o.ValidateDbCredentials != nil {
		return true
	}

	return false
}

// SetValidateDbCredentials gets a reference to the given bool and assigns it to the ValidateDbCredentials field.
func (o *UpdateVDBParameters) SetValidateDbCredentials(v bool) {
	o.ValidateDbCredentials = &v
}

// GetAutoRestart returns the AutoRestart field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetAutoRestart() bool {
	if o == nil || o.AutoRestart == nil {
		var ret bool
		return ret
	}
	return *o.AutoRestart
}

// GetAutoRestartOk returns a tuple with the AutoRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetAutoRestartOk() (*bool, bool) {
	if o == nil || o.AutoRestart == nil {
		return nil, false
	}
	return o.AutoRestart, true
}

// HasAutoRestart returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasAutoRestart() bool {
	if o != nil && o.AutoRestart != nil {
		return true
	}

	return false
}

// SetAutoRestart gets a reference to the given bool and assigns it to the AutoRestart field.
func (o *UpdateVDBParameters) SetAutoRestart(v bool) {
	o.AutoRestart = &v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetEnvironmentUserId() string {
	if o == nil || o.EnvironmentUserId == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil || o.EnvironmentUserId == nil {
		return nil, false
	}
	return o.EnvironmentUserId, true
}

// HasEnvironmentUserId returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasEnvironmentUserId() bool {
	if o != nil && o.EnvironmentUserId != nil {
		return true
	}

	return false
}

// SetEnvironmentUserId gets a reference to the given string and assigns it to the EnvironmentUserId field.
func (o *UpdateVDBParameters) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetTemplateId() string {
	if o == nil || o.TemplateId == nil {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetTemplateIdOk() (*string, bool) {
	if o == nil || o.TemplateId == nil {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasTemplateId() bool {
	if o != nil && o.TemplateId != nil {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *UpdateVDBParameters) SetTemplateId(v string) {
	o.TemplateId = &v
}

// GetListenerIds returns the ListenerIds field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetListenerIds() []string {
	if o == nil || o.ListenerIds == nil {
		var ret []string
		return ret
	}
	return o.ListenerIds
}

// GetListenerIdsOk returns a tuple with the ListenerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetListenerIdsOk() ([]string, bool) {
	if o == nil || o.ListenerIds == nil {
		return nil, false
	}
	return o.ListenerIds, true
}

// HasListenerIds returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasListenerIds() bool {
	if o != nil && o.ListenerIds != nil {
		return true
	}

	return false
}

// SetListenerIds gets a reference to the given []string and assigns it to the ListenerIds field.
func (o *UpdateVDBParameters) SetListenerIds(v []string) {
	o.ListenerIds = v
}

// GetNewDbid returns the NewDbid field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetNewDbid() bool {
	if o == nil || o.NewDbid == nil {
		var ret bool
		return ret
	}
	return *o.NewDbid
}

// GetNewDbidOk returns a tuple with the NewDbid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetNewDbidOk() (*bool, bool) {
	if o == nil || o.NewDbid == nil {
		return nil, false
	}
	return o.NewDbid, true
}

// HasNewDbid returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasNewDbid() bool {
	if o != nil && o.NewDbid != nil {
		return true
	}

	return false
}

// SetNewDbid gets a reference to the given bool and assigns it to the NewDbid field.
func (o *UpdateVDBParameters) SetNewDbid(v bool) {
	o.NewDbid = &v
}

// GetCdcOnProvision returns the CdcOnProvision field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetCdcOnProvision() bool {
	if o == nil || o.CdcOnProvision == nil {
		var ret bool
		return ret
	}
	return *o.CdcOnProvision
}

// GetCdcOnProvisionOk returns a tuple with the CdcOnProvision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetCdcOnProvisionOk() (*bool, bool) {
	if o == nil || o.CdcOnProvision == nil {
		return nil, false
	}
	return o.CdcOnProvision, true
}

// HasCdcOnProvision returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasCdcOnProvision() bool {
	if o != nil && o.CdcOnProvision != nil {
		return true
	}

	return false
}

// SetCdcOnProvision gets a reference to the given bool and assigns it to the CdcOnProvision field.
func (o *UpdateVDBParameters) SetCdcOnProvision(v bool) {
	o.CdcOnProvision = &v
}

// GetPreScript returns the PreScript field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetPreScript() string {
	if o == nil || o.PreScript == nil {
		var ret string
		return ret
	}
	return *o.PreScript
}

// GetPreScriptOk returns a tuple with the PreScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetPreScriptOk() (*string, bool) {
	if o == nil || o.PreScript == nil {
		return nil, false
	}
	return o.PreScript, true
}

// HasPreScript returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasPreScript() bool {
	if o != nil && o.PreScript != nil {
		return true
	}

	return false
}

// SetPreScript gets a reference to the given string and assigns it to the PreScript field.
func (o *UpdateVDBParameters) SetPreScript(v string) {
	o.PreScript = &v
}

// GetPostScript returns the PostScript field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetPostScript() string {
	if o == nil || o.PostScript == nil {
		var ret string
		return ret
	}
	return *o.PostScript
}

// GetPostScriptOk returns a tuple with the PostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetPostScriptOk() (*string, bool) {
	if o == nil || o.PostScript == nil {
		return nil, false
	}
	return o.PostScript, true
}

// HasPostScript returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasPostScript() bool {
	if o != nil && o.PostScript != nil {
		return true
	}

	return false
}

// SetPostScript gets a reference to the given string and assigns it to the PostScript field.
func (o *UpdateVDBParameters) SetPostScript(v string) {
	o.PostScript = &v
}

// GetHooks returns the Hooks field value if set, zero value otherwise.
func (o *UpdateVDBParameters) GetHooks() VirtualDatasetHooks {
	if o == nil || o.Hooks == nil {
		var ret VirtualDatasetHooks
		return ret
	}
	return *o.Hooks
}

// GetHooksOk returns a tuple with the Hooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateVDBParameters) GetHooksOk() (*VirtualDatasetHooks, bool) {
	if o == nil || o.Hooks == nil {
		return nil, false
	}
	return o.Hooks, true
}

// HasHooks returns a boolean if a field has been set.
func (o *UpdateVDBParameters) HasHooks() bool {
	if o != nil && o.Hooks != nil {
		return true
	}

	return false
}

// SetHooks gets a reference to the given VirtualDatasetHooks and assigns it to the Hooks field.
func (o *UpdateVDBParameters) SetHooks(v VirtualDatasetHooks) {
	o.Hooks = &v
}

func (o UpdateVDBParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DbUsername != nil {
		toSerialize["db_username"] = o.DbUsername
	}
	if o.DbPassword != nil {
		toSerialize["db_password"] = o.DbPassword
	}
	if o.ValidateDbCredentials != nil {
		toSerialize["validate_db_credentials"] = o.ValidateDbCredentials
	}
	if o.AutoRestart != nil {
		toSerialize["auto_restart"] = o.AutoRestart
	}
	if o.EnvironmentUserId != nil {
		toSerialize["environment_user_id"] = o.EnvironmentUserId
	}
	if o.TemplateId != nil {
		toSerialize["template_id"] = o.TemplateId
	}
	if o.ListenerIds != nil {
		toSerialize["listener_ids"] = o.ListenerIds
	}
	if o.NewDbid != nil {
		toSerialize["new_dbid"] = o.NewDbid
	}
	if o.CdcOnProvision != nil {
		toSerialize["cdc_on_provision"] = o.CdcOnProvision
	}
	if o.PreScript != nil {
		toSerialize["pre_script"] = o.PreScript
	}
	if o.PostScript != nil {
		toSerialize["post_script"] = o.PostScript
	}
	if o.Hooks != nil {
		toSerialize["hooks"] = o.Hooks
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateVDBParameters struct {
	value *UpdateVDBParameters
	isSet bool
}

func (v NullableUpdateVDBParameters) Get() *UpdateVDBParameters {
	return v.value
}

func (v *NullableUpdateVDBParameters) Set(val *UpdateVDBParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateVDBParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateVDBParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateVDBParameters(val *UpdateVDBParameters) *NullableUpdateVDBParameters {
	return &NullableUpdateVDBParameters{value: val, isSet: true}
}

func (v NullableUpdateVDBParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateVDBParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


