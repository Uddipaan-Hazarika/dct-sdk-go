/*
Delphix DCT API

Delphix DCT API

API version: 3.9.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the MSSQLDSourceStagingPushLinkSourceParametersAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MSSQLDSourceStagingPushLinkSourceParametersAllOf{}

// MSSQLDSourceStagingPushLinkSourceParametersAllOf struct for MSSQLDSourceStagingPushLinkSourceParametersAllOf
type MSSQLDSourceStagingPushLinkSourceParametersAllOf struct {
	// The ID of the engine to link staging push database on.
	EngineId *string `json:"engine_id,omitempty"`
	// The encryption key to use when restoring encrypted backups.
	EncryptionKey *string `json:"encryption_key,omitempty"`
	// Reference of the SQL instance on the PPT environment that we want to use for pre-provisioning.
	PptRepository *string `json:"ppt_repository,omitempty"`
	// Reference of the host OS user on the PPT host to use for linking.
	PptHostUser *string `json:"ppt_host_user,omitempty"`
	// A user-provided PowerShell script or executable to run prior to restoring from a backup during pre-provisioning.
	StagingPreScript *string `json:"staging_pre_script,omitempty"`
	// A user-provided PowerShell script or executable to run after restoring from a backup during pre-provisioning.
	StagingPostScript *string `json:"staging_post_script,omitempty"`
	// The name of the database to create on the staging environment. This property is mutually exclusive to sync_strategy_managed_type
	StagingDatabaseName *string `json:"staging_database_name,omitempty"`
}

// NewMSSQLDSourceStagingPushLinkSourceParametersAllOf instantiates a new MSSQLDSourceStagingPushLinkSourceParametersAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMSSQLDSourceStagingPushLinkSourceParametersAllOf() *MSSQLDSourceStagingPushLinkSourceParametersAllOf {
	this := MSSQLDSourceStagingPushLinkSourceParametersAllOf{}
	return &this
}

// NewMSSQLDSourceStagingPushLinkSourceParametersAllOfWithDefaults instantiates a new MSSQLDSourceStagingPushLinkSourceParametersAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMSSQLDSourceStagingPushLinkSourceParametersAllOfWithDefaults() *MSSQLDSourceStagingPushLinkSourceParametersAllOf {
	this := MSSQLDSourceStagingPushLinkSourceParametersAllOf{}
	return &this
}

// GetEngineId returns the EngineId field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetEngineId() string {
	if o == nil || IsNil(o.EngineId) {
		var ret string
		return ret
	}
	return *o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.EngineId) {
		return nil, false
	}
	return o.EngineId, true
}

// HasEngineId returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) HasEngineId() bool {
	if o != nil && !IsNil(o.EngineId) {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given string and assigns it to the EngineId field.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) SetEngineId(v string) {
	o.EngineId = &v
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey) {
		var ret string
		return ret
	}
	return *o.EncryptionKey
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetEncryptionKeyOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionKey) {
		return nil, false
	}
	return o.EncryptionKey, true
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) HasEncryptionKey() bool {
	if o != nil && !IsNil(o.EncryptionKey) {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given string and assigns it to the EncryptionKey field.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) SetEncryptionKey(v string) {
	o.EncryptionKey = &v
}

// GetPptRepository returns the PptRepository field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetPptRepository() string {
	if o == nil || IsNil(o.PptRepository) {
		var ret string
		return ret
	}
	return *o.PptRepository
}

// GetPptRepositoryOk returns a tuple with the PptRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetPptRepositoryOk() (*string, bool) {
	if o == nil || IsNil(o.PptRepository) {
		return nil, false
	}
	return o.PptRepository, true
}

// HasPptRepository returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) HasPptRepository() bool {
	if o != nil && !IsNil(o.PptRepository) {
		return true
	}

	return false
}

// SetPptRepository gets a reference to the given string and assigns it to the PptRepository field.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) SetPptRepository(v string) {
	o.PptRepository = &v
}

// GetPptHostUser returns the PptHostUser field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetPptHostUser() string {
	if o == nil || IsNil(o.PptHostUser) {
		var ret string
		return ret
	}
	return *o.PptHostUser
}

// GetPptHostUserOk returns a tuple with the PptHostUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetPptHostUserOk() (*string, bool) {
	if o == nil || IsNil(o.PptHostUser) {
		return nil, false
	}
	return o.PptHostUser, true
}

// HasPptHostUser returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) HasPptHostUser() bool {
	if o != nil && !IsNil(o.PptHostUser) {
		return true
	}

	return false
}

// SetPptHostUser gets a reference to the given string and assigns it to the PptHostUser field.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) SetPptHostUser(v string) {
	o.PptHostUser = &v
}

// GetStagingPreScript returns the StagingPreScript field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetStagingPreScript() string {
	if o == nil || IsNil(o.StagingPreScript) {
		var ret string
		return ret
	}
	return *o.StagingPreScript
}

// GetStagingPreScriptOk returns a tuple with the StagingPreScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetStagingPreScriptOk() (*string, bool) {
	if o == nil || IsNil(o.StagingPreScript) {
		return nil, false
	}
	return o.StagingPreScript, true
}

// HasStagingPreScript returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) HasStagingPreScript() bool {
	if o != nil && !IsNil(o.StagingPreScript) {
		return true
	}

	return false
}

// SetStagingPreScript gets a reference to the given string and assigns it to the StagingPreScript field.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) SetStagingPreScript(v string) {
	o.StagingPreScript = &v
}

// GetStagingPostScript returns the StagingPostScript field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetStagingPostScript() string {
	if o == nil || IsNil(o.StagingPostScript) {
		var ret string
		return ret
	}
	return *o.StagingPostScript
}

// GetStagingPostScriptOk returns a tuple with the StagingPostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetStagingPostScriptOk() (*string, bool) {
	if o == nil || IsNil(o.StagingPostScript) {
		return nil, false
	}
	return o.StagingPostScript, true
}

// HasStagingPostScript returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) HasStagingPostScript() bool {
	if o != nil && !IsNil(o.StagingPostScript) {
		return true
	}

	return false
}

// SetStagingPostScript gets a reference to the given string and assigns it to the StagingPostScript field.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) SetStagingPostScript(v string) {
	o.StagingPostScript = &v
}

// GetStagingDatabaseName returns the StagingDatabaseName field value if set, zero value otherwise.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetStagingDatabaseName() string {
	if o == nil || IsNil(o.StagingDatabaseName) {
		var ret string
		return ret
	}
	return *o.StagingDatabaseName
}

// GetStagingDatabaseNameOk returns a tuple with the StagingDatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) GetStagingDatabaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.StagingDatabaseName) {
		return nil, false
	}
	return o.StagingDatabaseName, true
}

// HasStagingDatabaseName returns a boolean if a field has been set.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) HasStagingDatabaseName() bool {
	if o != nil && !IsNil(o.StagingDatabaseName) {
		return true
	}

	return false
}

// SetStagingDatabaseName gets a reference to the given string and assigns it to the StagingDatabaseName field.
func (o *MSSQLDSourceStagingPushLinkSourceParametersAllOf) SetStagingDatabaseName(v string) {
	o.StagingDatabaseName = &v
}

func (o MSSQLDSourceStagingPushLinkSourceParametersAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MSSQLDSourceStagingPushLinkSourceParametersAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EngineId) {
		toSerialize["engine_id"] = o.EngineId
	}
	if !IsNil(o.EncryptionKey) {
		toSerialize["encryption_key"] = o.EncryptionKey
	}
	if !IsNil(o.PptRepository) {
		toSerialize["ppt_repository"] = o.PptRepository
	}
	if !IsNil(o.PptHostUser) {
		toSerialize["ppt_host_user"] = o.PptHostUser
	}
	if !IsNil(o.StagingPreScript) {
		toSerialize["staging_pre_script"] = o.StagingPreScript
	}
	if !IsNil(o.StagingPostScript) {
		toSerialize["staging_post_script"] = o.StagingPostScript
	}
	if !IsNil(o.StagingDatabaseName) {
		toSerialize["staging_database_name"] = o.StagingDatabaseName
	}
	return toSerialize, nil
}

type NullableMSSQLDSourceStagingPushLinkSourceParametersAllOf struct {
	value *MSSQLDSourceStagingPushLinkSourceParametersAllOf
	isSet bool
}

func (v NullableMSSQLDSourceStagingPushLinkSourceParametersAllOf) Get() *MSSQLDSourceStagingPushLinkSourceParametersAllOf {
	return v.value
}

func (v *NullableMSSQLDSourceStagingPushLinkSourceParametersAllOf) Set(val *MSSQLDSourceStagingPushLinkSourceParametersAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMSSQLDSourceStagingPushLinkSourceParametersAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMSSQLDSourceStagingPushLinkSourceParametersAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMSSQLDSourceStagingPushLinkSourceParametersAllOf(val *MSSQLDSourceStagingPushLinkSourceParametersAllOf) *NullableMSSQLDSourceStagingPushLinkSourceParametersAllOf {
	return &NullableMSSQLDSourceStagingPushLinkSourceParametersAllOf{value: val, isSet: true}
}

func (v NullableMSSQLDSourceStagingPushLinkSourceParametersAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMSSQLDSourceStagingPushLinkSourceParametersAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


