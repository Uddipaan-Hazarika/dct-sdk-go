/*
Delphix DCT API

Delphix DCT API

API version: 3.9.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the RefreshVDBFromBookmarkParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RefreshVDBFromBookmarkParameters{}

// RefreshVDBFromBookmarkParameters struct for RefreshVDBFromBookmarkParameters
type RefreshVDBFromBookmarkParameters struct {
	// The ID of the bookmark from which to execute the operation. The bookmark must contain only one VDB.
	BookmarkId string `json:"bookmark_id"`
}

// NewRefreshVDBFromBookmarkParameters instantiates a new RefreshVDBFromBookmarkParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRefreshVDBFromBookmarkParameters(bookmarkId string) *RefreshVDBFromBookmarkParameters {
	this := RefreshVDBFromBookmarkParameters{}
	this.BookmarkId = bookmarkId
	return &this
}

// NewRefreshVDBFromBookmarkParametersWithDefaults instantiates a new RefreshVDBFromBookmarkParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRefreshVDBFromBookmarkParametersWithDefaults() *RefreshVDBFromBookmarkParameters {
	this := RefreshVDBFromBookmarkParameters{}
	return &this
}

// GetBookmarkId returns the BookmarkId field value
func (o *RefreshVDBFromBookmarkParameters) GetBookmarkId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BookmarkId
}

// GetBookmarkIdOk returns a tuple with the BookmarkId field value
// and a boolean to check if the value has been set.
func (o *RefreshVDBFromBookmarkParameters) GetBookmarkIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BookmarkId, true
}

// SetBookmarkId sets field value
func (o *RefreshVDBFromBookmarkParameters) SetBookmarkId(v string) {
	o.BookmarkId = v
}

func (o RefreshVDBFromBookmarkParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RefreshVDBFromBookmarkParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bookmark_id"] = o.BookmarkId
	return toSerialize, nil
}

type NullableRefreshVDBFromBookmarkParameters struct {
	value *RefreshVDBFromBookmarkParameters
	isSet bool
}

func (v NullableRefreshVDBFromBookmarkParameters) Get() *RefreshVDBFromBookmarkParameters {
	return v.value
}

func (v *NullableRefreshVDBFromBookmarkParameters) Set(val *RefreshVDBFromBookmarkParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableRefreshVDBFromBookmarkParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableRefreshVDBFromBookmarkParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefreshVDBFromBookmarkParameters(val *RefreshVDBFromBookmarkParameters) *NullableRefreshVDBFromBookmarkParameters {
	return &NullableRefreshVDBFromBookmarkParameters{value: val, isSet: true}
}

func (v NullableRefreshVDBFromBookmarkParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefreshVDBFromBookmarkParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


