/*
Delphix DCT API

Delphix DCT API

API version: 3.5.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the MaskingFileUploadResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MaskingFileUploadResponse{}

// MaskingFileUploadResponse struct for MaskingFileUploadResponse
type MaskingFileUploadResponse struct {
	File *MaskingFileUpload `json:"file,omitempty"`
}

// NewMaskingFileUploadResponse instantiates a new MaskingFileUploadResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMaskingFileUploadResponse() *MaskingFileUploadResponse {
	this := MaskingFileUploadResponse{}
	return &this
}

// NewMaskingFileUploadResponseWithDefaults instantiates a new MaskingFileUploadResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMaskingFileUploadResponseWithDefaults() *MaskingFileUploadResponse {
	this := MaskingFileUploadResponse{}
	return &this
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *MaskingFileUploadResponse) GetFile() MaskingFileUpload {
	if o == nil || IsNil(o.File) {
		var ret MaskingFileUpload
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MaskingFileUploadResponse) GetFileOk() (*MaskingFileUpload, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *MaskingFileUploadResponse) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given MaskingFileUpload and assigns it to the File field.
func (o *MaskingFileUploadResponse) SetFile(v MaskingFileUpload) {
	o.File = &v
}

func (o MaskingFileUploadResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MaskingFileUploadResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	return toSerialize, nil
}

type NullableMaskingFileUploadResponse struct {
	value *MaskingFileUploadResponse
	isSet bool
}

func (v NullableMaskingFileUploadResponse) Get() *MaskingFileUploadResponse {
	return v.value
}

func (v *NullableMaskingFileUploadResponse) Set(val *MaskingFileUploadResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMaskingFileUploadResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMaskingFileUploadResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMaskingFileUploadResponse(val *MaskingFileUploadResponse) *NullableMaskingFileUploadResponse {
	return &NullableMaskingFileUploadResponse{value: val, isSet: true}
}

func (v NullableMaskingFileUploadResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMaskingFileUploadResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


