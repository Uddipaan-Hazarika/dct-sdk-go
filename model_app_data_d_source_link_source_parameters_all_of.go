/*
Delphix DCT API

Delphix DCT API

API version: 3.5.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the AppDataDSourceLinkSourceParametersAllOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppDataDSourceLinkSourceParametersAllOf{}

// AppDataDSourceLinkSourceParametersAllOf struct for AppDataDSourceLinkSourceParametersAllOf
type AppDataDSourceLinkSourceParametersAllOf struct {
	// The type of link to create. Default is AppDataDirect.  * `AppDataDirect` - Represents the AppData specific parameters of a link request for a source directly replicated into the Delphix Engine. * `AppDataStaged` - Represents the AppData specific parameters of a link request for a source with a staging source. 
	LinkType *string `json:"link_type,omitempty"`
	// The base mount point for the NFS mount on the staging environment [AppDataStaged only].
	StagingMountBase *string `json:"staging_mount_base,omitempty"`
	// The environment used as an intermediate stage to pull data into Delphix [AppDataStaged only].
	StagingEnvironment *string `json:"staging_environment,omitempty"`
	// The environment user used to access the staging environment [AppDataStaged only].
	StagingEnvironmentUser *string `json:"staging_environment_user,omitempty"`
	// The OS user to use for linking.
	EnvironmentUser *string `json:"environment_user,omitempty"`
	// List of subdirectories in the source to exclude when syncing data. These paths are relative to the root of the source directory. [AppDataDirect only]
	Excludes []string `json:"excludes,omitempty"`
	// List of symlinks in the source to follow when syncing data. These paths are relative to the root of the source directory. All other symlinks are preserved. [AppDataDirect only]
	FollowSymlinks []string `json:"follow_symlinks,omitempty"`
	// The JSON payload conforming to the DraftV4 schema based on the type of application data being manipulated.
	Parameters map[string]interface{} `json:"parameters,omitempty"`
	// The JSON payload conforming to the snapshot parameters definition in a LUA toolkit or platform plugin.
	SyncParameters map[string]interface{} `json:"sync_parameters,omitempty"`
}

// NewAppDataDSourceLinkSourceParametersAllOf instantiates a new AppDataDSourceLinkSourceParametersAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppDataDSourceLinkSourceParametersAllOf() *AppDataDSourceLinkSourceParametersAllOf {
	this := AppDataDSourceLinkSourceParametersAllOf{}
	var linkType string = "AppDataDirect"
	this.LinkType = &linkType
	return &this
}

// NewAppDataDSourceLinkSourceParametersAllOfWithDefaults instantiates a new AppDataDSourceLinkSourceParametersAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppDataDSourceLinkSourceParametersAllOfWithDefaults() *AppDataDSourceLinkSourceParametersAllOf {
	this := AppDataDSourceLinkSourceParametersAllOf{}
	var linkType string = "AppDataDirect"
	this.LinkType = &linkType
	return &this
}

// GetLinkType returns the LinkType field value if set, zero value otherwise.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetLinkType() string {
	if o == nil || IsNil(o.LinkType) {
		var ret string
		return ret
	}
	return *o.LinkType
}

// GetLinkTypeOk returns a tuple with the LinkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetLinkTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LinkType) {
		return nil, false
	}
	return o.LinkType, true
}

// HasLinkType returns a boolean if a field has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) HasLinkType() bool {
	if o != nil && !IsNil(o.LinkType) {
		return true
	}

	return false
}

// SetLinkType gets a reference to the given string and assigns it to the LinkType field.
func (o *AppDataDSourceLinkSourceParametersAllOf) SetLinkType(v string) {
	o.LinkType = &v
}

// GetStagingMountBase returns the StagingMountBase field value if set, zero value otherwise.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetStagingMountBase() string {
	if o == nil || IsNil(o.StagingMountBase) {
		var ret string
		return ret
	}
	return *o.StagingMountBase
}

// GetStagingMountBaseOk returns a tuple with the StagingMountBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetStagingMountBaseOk() (*string, bool) {
	if o == nil || IsNil(o.StagingMountBase) {
		return nil, false
	}
	return o.StagingMountBase, true
}

// HasStagingMountBase returns a boolean if a field has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) HasStagingMountBase() bool {
	if o != nil && !IsNil(o.StagingMountBase) {
		return true
	}

	return false
}

// SetStagingMountBase gets a reference to the given string and assigns it to the StagingMountBase field.
func (o *AppDataDSourceLinkSourceParametersAllOf) SetStagingMountBase(v string) {
	o.StagingMountBase = &v
}

// GetStagingEnvironment returns the StagingEnvironment field value if set, zero value otherwise.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetStagingEnvironment() string {
	if o == nil || IsNil(o.StagingEnvironment) {
		var ret string
		return ret
	}
	return *o.StagingEnvironment
}

// GetStagingEnvironmentOk returns a tuple with the StagingEnvironment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetStagingEnvironmentOk() (*string, bool) {
	if o == nil || IsNil(o.StagingEnvironment) {
		return nil, false
	}
	return o.StagingEnvironment, true
}

// HasStagingEnvironment returns a boolean if a field has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) HasStagingEnvironment() bool {
	if o != nil && !IsNil(o.StagingEnvironment) {
		return true
	}

	return false
}

// SetStagingEnvironment gets a reference to the given string and assigns it to the StagingEnvironment field.
func (o *AppDataDSourceLinkSourceParametersAllOf) SetStagingEnvironment(v string) {
	o.StagingEnvironment = &v
}

// GetStagingEnvironmentUser returns the StagingEnvironmentUser field value if set, zero value otherwise.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetStagingEnvironmentUser() string {
	if o == nil || IsNil(o.StagingEnvironmentUser) {
		var ret string
		return ret
	}
	return *o.StagingEnvironmentUser
}

// GetStagingEnvironmentUserOk returns a tuple with the StagingEnvironmentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetStagingEnvironmentUserOk() (*string, bool) {
	if o == nil || IsNil(o.StagingEnvironmentUser) {
		return nil, false
	}
	return o.StagingEnvironmentUser, true
}

// HasStagingEnvironmentUser returns a boolean if a field has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) HasStagingEnvironmentUser() bool {
	if o != nil && !IsNil(o.StagingEnvironmentUser) {
		return true
	}

	return false
}

// SetStagingEnvironmentUser gets a reference to the given string and assigns it to the StagingEnvironmentUser field.
func (o *AppDataDSourceLinkSourceParametersAllOf) SetStagingEnvironmentUser(v string) {
	o.StagingEnvironmentUser = &v
}

// GetEnvironmentUser returns the EnvironmentUser field value if set, zero value otherwise.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetEnvironmentUser() string {
	if o == nil || IsNil(o.EnvironmentUser) {
		var ret string
		return ret
	}
	return *o.EnvironmentUser
}

// GetEnvironmentUserOk returns a tuple with the EnvironmentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetEnvironmentUserOk() (*string, bool) {
	if o == nil || IsNil(o.EnvironmentUser) {
		return nil, false
	}
	return o.EnvironmentUser, true
}

// HasEnvironmentUser returns a boolean if a field has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) HasEnvironmentUser() bool {
	if o != nil && !IsNil(o.EnvironmentUser) {
		return true
	}

	return false
}

// SetEnvironmentUser gets a reference to the given string and assigns it to the EnvironmentUser field.
func (o *AppDataDSourceLinkSourceParametersAllOf) SetEnvironmentUser(v string) {
	o.EnvironmentUser = &v
}

// GetExcludes returns the Excludes field value if set, zero value otherwise.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetExcludes() []string {
	if o == nil || IsNil(o.Excludes) {
		var ret []string
		return ret
	}
	return o.Excludes
}

// GetExcludesOk returns a tuple with the Excludes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetExcludesOk() ([]string, bool) {
	if o == nil || IsNil(o.Excludes) {
		return nil, false
	}
	return o.Excludes, true
}

// HasExcludes returns a boolean if a field has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) HasExcludes() bool {
	if o != nil && !IsNil(o.Excludes) {
		return true
	}

	return false
}

// SetExcludes gets a reference to the given []string and assigns it to the Excludes field.
func (o *AppDataDSourceLinkSourceParametersAllOf) SetExcludes(v []string) {
	o.Excludes = v
}

// GetFollowSymlinks returns the FollowSymlinks field value if set, zero value otherwise.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetFollowSymlinks() []string {
	if o == nil || IsNil(o.FollowSymlinks) {
		var ret []string
		return ret
	}
	return o.FollowSymlinks
}

// GetFollowSymlinksOk returns a tuple with the FollowSymlinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetFollowSymlinksOk() ([]string, bool) {
	if o == nil || IsNil(o.FollowSymlinks) {
		return nil, false
	}
	return o.FollowSymlinks, true
}

// HasFollowSymlinks returns a boolean if a field has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) HasFollowSymlinks() bool {
	if o != nil && !IsNil(o.FollowSymlinks) {
		return true
	}

	return false
}

// SetFollowSymlinks gets a reference to the given []string and assigns it to the FollowSymlinks field.
func (o *AppDataDSourceLinkSourceParametersAllOf) SetFollowSymlinks(v []string) {
	o.FollowSymlinks = v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetParameters() map[string]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return map[string]interface{}{}, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string]interface{} and assigns it to the Parameters field.
func (o *AppDataDSourceLinkSourceParametersAllOf) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetSyncParameters returns the SyncParameters field value if set, zero value otherwise.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetSyncParameters() map[string]interface{} {
	if o == nil || IsNil(o.SyncParameters) {
		var ret map[string]interface{}
		return ret
	}
	return o.SyncParameters
}

// GetSyncParametersOk returns a tuple with the SyncParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) GetSyncParametersOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SyncParameters) {
		return map[string]interface{}{}, false
	}
	return o.SyncParameters, true
}

// HasSyncParameters returns a boolean if a field has been set.
func (o *AppDataDSourceLinkSourceParametersAllOf) HasSyncParameters() bool {
	if o != nil && !IsNil(o.SyncParameters) {
		return true
	}

	return false
}

// SetSyncParameters gets a reference to the given map[string]interface{} and assigns it to the SyncParameters field.
func (o *AppDataDSourceLinkSourceParametersAllOf) SetSyncParameters(v map[string]interface{}) {
	o.SyncParameters = v
}

func (o AppDataDSourceLinkSourceParametersAllOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppDataDSourceLinkSourceParametersAllOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LinkType) {
		toSerialize["link_type"] = o.LinkType
	}
	if !IsNil(o.StagingMountBase) {
		toSerialize["staging_mount_base"] = o.StagingMountBase
	}
	if !IsNil(o.StagingEnvironment) {
		toSerialize["staging_environment"] = o.StagingEnvironment
	}
	if !IsNil(o.StagingEnvironmentUser) {
		toSerialize["staging_environment_user"] = o.StagingEnvironmentUser
	}
	if !IsNil(o.EnvironmentUser) {
		toSerialize["environment_user"] = o.EnvironmentUser
	}
	if !IsNil(o.Excludes) {
		toSerialize["excludes"] = o.Excludes
	}
	if !IsNil(o.FollowSymlinks) {
		toSerialize["follow_symlinks"] = o.FollowSymlinks
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	if !IsNil(o.SyncParameters) {
		toSerialize["sync_parameters"] = o.SyncParameters
	}
	return toSerialize, nil
}

type NullableAppDataDSourceLinkSourceParametersAllOf struct {
	value *AppDataDSourceLinkSourceParametersAllOf
	isSet bool
}

func (v NullableAppDataDSourceLinkSourceParametersAllOf) Get() *AppDataDSourceLinkSourceParametersAllOf {
	return v.value
}

func (v *NullableAppDataDSourceLinkSourceParametersAllOf) Set(val *AppDataDSourceLinkSourceParametersAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableAppDataDSourceLinkSourceParametersAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableAppDataDSourceLinkSourceParametersAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppDataDSourceLinkSourceParametersAllOf(val *AppDataDSourceLinkSourceParametersAllOf) *NullableAppDataDSourceLinkSourceParametersAllOf {
	return &NullableAppDataDSourceLinkSourceParametersAllOf{value: val, isSet: true}
}

func (v NullableAppDataDSourceLinkSourceParametersAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppDataDSourceLinkSourceParametersAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


