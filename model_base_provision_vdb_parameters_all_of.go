/*
Delphix DCT API

Delphix DCT API

API version: 2.0.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// BaseProvisionVDBParametersAllOf struct for BaseProvisionVDBParametersAllOf
type BaseProvisionVDBParametersAllOf struct {
	// The ID of the group into which the VDB will be provisioned. If unset, a group is selected randomly on the Engine.
	TargetGroupId *string `json:"target_group_id,omitempty"`
	// The unique name of the provisioned VDB within a group. If unset, a name is randomly generated.
	Name *string `json:"name,omitempty"`
	// The name of the database on the target environment. Defaults to the value of the name property.
	DatabaseName *string `json:"database_name,omitempty"`
	// The ID of the container database (CDB) to provision an Oracle Multitenant database into. This corresponds to a Source API object. When this is not set, a new vCDB will be provisioned.
	CdbId *string `json:"cdb_id,omitempty"`
	// The cluster node ids, name or addresses for this provision operation (Oracle RAC Only).
	ClusterNodeIds []string `json:"cluster_node_ids,omitempty"`
	// Whether to truncate log on checkpoint (ASE only).
	TruncateLogOnCheckpoint *bool `json:"truncate_log_on_checkpoint,omitempty"`
	// The name of the privileged user to run the provision operation (Oracle Only).
	OsUsername *string `json:"os_username,omitempty"`
	// The password of the privileged user to run the provision operation (Oracle Only).
	OsPassword *string `json:"os_password,omitempty"`
	// The ID of the target environment where to provision the VDB. If repository_id unambigously identifies a repository, this is unnecessary and ignored. Otherwise, a compatible repository is randomly selected on the environment.
	EnvironmentId *string `json:"environment_id,omitempty"`
	// The environment user ID to use to connect to the target environment.
	EnvironmentUserId *string `json:"environment_user_id,omitempty"`
	// The ID of the target repository where to provision the VDB. A repository typically corresponds to a database installation (Oracle home, database instance, ...). Setting this attribute implicitly determines the environment where to provision the VDB.
	RepositoryId *string `json:"repository_id,omitempty"`
	// Option to automatically select a compatible environment and repository. Mutually exclusive with repository_id.
	AutoSelectRepository *bool `json:"auto_select_repository,omitempty"`
	// Indicates whether the Engine should automatically restart this virtual source when target host reboot is detected.
	VdbRestart *bool `json:"vdb_restart,omitempty"`
	// The ID of the target VDB Template (Oracle Only).
	TemplateId *string `json:"template_id,omitempty"`
	// The ID of the configuration template to apply to the auxiliary container database. This is only relevant when provisioning a Multitenant pluggable database into an existing CDB, i.e when the cdb_id property is set.(Oracle Only)
	AuxiliaryTemplateId *string `json:"auxiliary_template_id,omitempty"`
	// Target VDB file mapping rules (Oracle Only). Rules must be line separated (\\n or \\r) and each line must have the format \"pattern:replacement\". Lines are applied in order.
	FileMappingRules *string `json:"file_mapping_rules,omitempty"`
	// Target VDB SID name (Oracle Only).
	OracleInstanceName *string `json:"oracle_instance_name,omitempty"`
	// Target VDB db_unique_name (Oracle Only).
	UniqueName *string `json:"unique_name,omitempty"`
	// When provisioning an Oracle Multitenant vCDB (when the cdb_id property is not set), the name of the provisioned vCDB (Oracle Multitenant Only).
	VcdbName *string `json:"vcdb_name,omitempty"`
	// When provisioning an Oracle Multitenant vCDB (when the cdb_id property is not set), the database name of the provisioned vCDB. Defaults to the value of the vcdb_name property. (Oracle Multitenant Only).
	VcdbDatabaseName *string `json:"vcdb_database_name,omitempty"`
	// Mount point for the VDB (Oracle, ASE Only).
	MountPoint *string `json:"mount_point,omitempty"`
	// Whether to open the database after provision (Oracle Only).
	OpenResetLogs *bool `json:"open_reset_logs,omitempty"`
	// The ID of the snapshot policy for the VDB.
	SnapshotPolicyId *string `json:"snapshot_policy_id,omitempty"`
	// The ID of the retention policy for the VDB.
	RetentionPolicyId *string `json:"retention_policy_id,omitempty"`
	// Recovery model of the source database (MSSql Only).
	RecoveryModel *string `json:"recovery_model,omitempty"`
	// PowerShell script or executable to run prior to provisioning (MSSql Only).
	PreScript *string `json:"pre_script,omitempty"`
	// PowerShell script or executable to run after provisioning (MSSql Only).
	PostScript *string `json:"post_script,omitempty"`
	// Option to enable change data capture (CDC) on both the provisioned VDB and subsequent snapshot-related operations (e.g. refresh, rewind) (MSSql Only).
	CdcOnProvision *bool `json:"cdc_on_provision,omitempty"`
	// Online log size in MB (Oracle Only).
	OnlineLogSize *int32 `json:"online_log_size,omitempty"`
	// Number of online log groups (Oracle Only).
	OnlineLogGroups *int32 `json:"online_log_groups,omitempty"`
	// Option to create a VDB in archivelog mode (Oracle Only).
	ArchiveLog *bool `json:"archive_log,omitempty"`
	// Option to generate a new DB ID for the created VDB (Oracle Only).
	NewDbid *bool `json:"new_dbid,omitempty"`
	// The listener IDs for this provision operation (Oracle Only).
	ListenerIds []string `json:"listener_ids,omitempty"`
	// Environment variable to be set when the engine creates a VDB. See the Engine documentation for the list of allowed/denied environment variables and rules about substitution.
	CustomEnvVars *map[string]string `json:"custom_env_vars,omitempty"`
	// Environment files to be sourced when the Engine creates a VDB. This path can be followed by parameters. Paths and parameters are separated by spaces.
	CustomEnvFiles []string `json:"custom_env_files,omitempty"`
	// The tags to be created for VDB.
	Tags []Tag `json:"tags,omitempty"`
}

// NewBaseProvisionVDBParametersAllOf instantiates a new BaseProvisionVDBParametersAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseProvisionVDBParametersAllOf() *BaseProvisionVDBParametersAllOf {
	this := BaseProvisionVDBParametersAllOf{}
	return &this
}

// NewBaseProvisionVDBParametersAllOfWithDefaults instantiates a new BaseProvisionVDBParametersAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseProvisionVDBParametersAllOfWithDefaults() *BaseProvisionVDBParametersAllOf {
	this := BaseProvisionVDBParametersAllOf{}
	return &this
}

// GetTargetGroupId returns the TargetGroupId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetTargetGroupId() string {
	if o == nil || o.TargetGroupId == nil {
		var ret string
		return ret
	}
	return *o.TargetGroupId
}

// GetTargetGroupIdOk returns a tuple with the TargetGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetTargetGroupIdOk() (*string, bool) {
	if o == nil || o.TargetGroupId == nil {
		return nil, false
	}
	return o.TargetGroupId, true
}

// HasTargetGroupId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasTargetGroupId() bool {
	if o != nil && o.TargetGroupId != nil {
		return true
	}

	return false
}

// SetTargetGroupId gets a reference to the given string and assigns it to the TargetGroupId field.
func (o *BaseProvisionVDBParametersAllOf) SetTargetGroupId(v string) {
	o.TargetGroupId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *BaseProvisionVDBParametersAllOf) SetName(v string) {
	o.Name = &v
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetDatabaseName() string {
	if o == nil || o.DatabaseName == nil {
		var ret string
		return ret
	}
	return *o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetDatabaseNameOk() (*string, bool) {
	if o == nil || o.DatabaseName == nil {
		return nil, false
	}
	return o.DatabaseName, true
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasDatabaseName() bool {
	if o != nil && o.DatabaseName != nil {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given string and assigns it to the DatabaseName field.
func (o *BaseProvisionVDBParametersAllOf) SetDatabaseName(v string) {
	o.DatabaseName = &v
}

// GetCdbId returns the CdbId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetCdbId() string {
	if o == nil || o.CdbId == nil {
		var ret string
		return ret
	}
	return *o.CdbId
}

// GetCdbIdOk returns a tuple with the CdbId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetCdbIdOk() (*string, bool) {
	if o == nil || o.CdbId == nil {
		return nil, false
	}
	return o.CdbId, true
}

// HasCdbId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasCdbId() bool {
	if o != nil && o.CdbId != nil {
		return true
	}

	return false
}

// SetCdbId gets a reference to the given string and assigns it to the CdbId field.
func (o *BaseProvisionVDBParametersAllOf) SetCdbId(v string) {
	o.CdbId = &v
}

// GetClusterNodeIds returns the ClusterNodeIds field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetClusterNodeIds() []string {
	if o == nil || o.ClusterNodeIds == nil {
		var ret []string
		return ret
	}
	return o.ClusterNodeIds
}

// GetClusterNodeIdsOk returns a tuple with the ClusterNodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetClusterNodeIdsOk() ([]string, bool) {
	if o == nil || o.ClusterNodeIds == nil {
		return nil, false
	}
	return o.ClusterNodeIds, true
}

// HasClusterNodeIds returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasClusterNodeIds() bool {
	if o != nil && o.ClusterNodeIds != nil {
		return true
	}

	return false
}

// SetClusterNodeIds gets a reference to the given []string and assigns it to the ClusterNodeIds field.
func (o *BaseProvisionVDBParametersAllOf) SetClusterNodeIds(v []string) {
	o.ClusterNodeIds = v
}

// GetTruncateLogOnCheckpoint returns the TruncateLogOnCheckpoint field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetTruncateLogOnCheckpoint() bool {
	if o == nil || o.TruncateLogOnCheckpoint == nil {
		var ret bool
		return ret
	}
	return *o.TruncateLogOnCheckpoint
}

// GetTruncateLogOnCheckpointOk returns a tuple with the TruncateLogOnCheckpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetTruncateLogOnCheckpointOk() (*bool, bool) {
	if o == nil || o.TruncateLogOnCheckpoint == nil {
		return nil, false
	}
	return o.TruncateLogOnCheckpoint, true
}

// HasTruncateLogOnCheckpoint returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasTruncateLogOnCheckpoint() bool {
	if o != nil && o.TruncateLogOnCheckpoint != nil {
		return true
	}

	return false
}

// SetTruncateLogOnCheckpoint gets a reference to the given bool and assigns it to the TruncateLogOnCheckpoint field.
func (o *BaseProvisionVDBParametersAllOf) SetTruncateLogOnCheckpoint(v bool) {
	o.TruncateLogOnCheckpoint = &v
}

// GetOsUsername returns the OsUsername field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetOsUsername() string {
	if o == nil || o.OsUsername == nil {
		var ret string
		return ret
	}
	return *o.OsUsername
}

// GetOsUsernameOk returns a tuple with the OsUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetOsUsernameOk() (*string, bool) {
	if o == nil || o.OsUsername == nil {
		return nil, false
	}
	return o.OsUsername, true
}

// HasOsUsername returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasOsUsername() bool {
	if o != nil && o.OsUsername != nil {
		return true
	}

	return false
}

// SetOsUsername gets a reference to the given string and assigns it to the OsUsername field.
func (o *BaseProvisionVDBParametersAllOf) SetOsUsername(v string) {
	o.OsUsername = &v
}

// GetOsPassword returns the OsPassword field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetOsPassword() string {
	if o == nil || o.OsPassword == nil {
		var ret string
		return ret
	}
	return *o.OsPassword
}

// GetOsPasswordOk returns a tuple with the OsPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetOsPasswordOk() (*string, bool) {
	if o == nil || o.OsPassword == nil {
		return nil, false
	}
	return o.OsPassword, true
}

// HasOsPassword returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasOsPassword() bool {
	if o != nil && o.OsPassword != nil {
		return true
	}

	return false
}

// SetOsPassword gets a reference to the given string and assigns it to the OsPassword field.
func (o *BaseProvisionVDBParametersAllOf) SetOsPassword(v string) {
	o.OsPassword = &v
}

// GetEnvironmentId returns the EnvironmentId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetEnvironmentId() string {
	if o == nil || o.EnvironmentId == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentId
}

// GetEnvironmentIdOk returns a tuple with the EnvironmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetEnvironmentIdOk() (*string, bool) {
	if o == nil || o.EnvironmentId == nil {
		return nil, false
	}
	return o.EnvironmentId, true
}

// HasEnvironmentId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasEnvironmentId() bool {
	if o != nil && o.EnvironmentId != nil {
		return true
	}

	return false
}

// SetEnvironmentId gets a reference to the given string and assigns it to the EnvironmentId field.
func (o *BaseProvisionVDBParametersAllOf) SetEnvironmentId(v string) {
	o.EnvironmentId = &v
}

// GetEnvironmentUserId returns the EnvironmentUserId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetEnvironmentUserId() string {
	if o == nil || o.EnvironmentUserId == nil {
		var ret string
		return ret
	}
	return *o.EnvironmentUserId
}

// GetEnvironmentUserIdOk returns a tuple with the EnvironmentUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetEnvironmentUserIdOk() (*string, bool) {
	if o == nil || o.EnvironmentUserId == nil {
		return nil, false
	}
	return o.EnvironmentUserId, true
}

// HasEnvironmentUserId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasEnvironmentUserId() bool {
	if o != nil && o.EnvironmentUserId != nil {
		return true
	}

	return false
}

// SetEnvironmentUserId gets a reference to the given string and assigns it to the EnvironmentUserId field.
func (o *BaseProvisionVDBParametersAllOf) SetEnvironmentUserId(v string) {
	o.EnvironmentUserId = &v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetRepositoryId() string {
	if o == nil || o.RepositoryId == nil {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetRepositoryIdOk() (*string, bool) {
	if o == nil || o.RepositoryId == nil {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasRepositoryId() bool {
	if o != nil && o.RepositoryId != nil {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *BaseProvisionVDBParametersAllOf) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

// GetAutoSelectRepository returns the AutoSelectRepository field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetAutoSelectRepository() bool {
	if o == nil || o.AutoSelectRepository == nil {
		var ret bool
		return ret
	}
	return *o.AutoSelectRepository
}

// GetAutoSelectRepositoryOk returns a tuple with the AutoSelectRepository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetAutoSelectRepositoryOk() (*bool, bool) {
	if o == nil || o.AutoSelectRepository == nil {
		return nil, false
	}
	return o.AutoSelectRepository, true
}

// HasAutoSelectRepository returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasAutoSelectRepository() bool {
	if o != nil && o.AutoSelectRepository != nil {
		return true
	}

	return false
}

// SetAutoSelectRepository gets a reference to the given bool and assigns it to the AutoSelectRepository field.
func (o *BaseProvisionVDBParametersAllOf) SetAutoSelectRepository(v bool) {
	o.AutoSelectRepository = &v
}

// GetVdbRestart returns the VdbRestart field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetVdbRestart() bool {
	if o == nil || o.VdbRestart == nil {
		var ret bool
		return ret
	}
	return *o.VdbRestart
}

// GetVdbRestartOk returns a tuple with the VdbRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetVdbRestartOk() (*bool, bool) {
	if o == nil || o.VdbRestart == nil {
		return nil, false
	}
	return o.VdbRestart, true
}

// HasVdbRestart returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasVdbRestart() bool {
	if o != nil && o.VdbRestart != nil {
		return true
	}

	return false
}

// SetVdbRestart gets a reference to the given bool and assigns it to the VdbRestart field.
func (o *BaseProvisionVDBParametersAllOf) SetVdbRestart(v bool) {
	o.VdbRestart = &v
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetTemplateId() string {
	if o == nil || o.TemplateId == nil {
		var ret string
		return ret
	}
	return *o.TemplateId
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetTemplateIdOk() (*string, bool) {
	if o == nil || o.TemplateId == nil {
		return nil, false
	}
	return o.TemplateId, true
}

// HasTemplateId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasTemplateId() bool {
	if o != nil && o.TemplateId != nil {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given string and assigns it to the TemplateId field.
func (o *BaseProvisionVDBParametersAllOf) SetTemplateId(v string) {
	o.TemplateId = &v
}

// GetAuxiliaryTemplateId returns the AuxiliaryTemplateId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetAuxiliaryTemplateId() string {
	if o == nil || o.AuxiliaryTemplateId == nil {
		var ret string
		return ret
	}
	return *o.AuxiliaryTemplateId
}

// GetAuxiliaryTemplateIdOk returns a tuple with the AuxiliaryTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetAuxiliaryTemplateIdOk() (*string, bool) {
	if o == nil || o.AuxiliaryTemplateId == nil {
		return nil, false
	}
	return o.AuxiliaryTemplateId, true
}

// HasAuxiliaryTemplateId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasAuxiliaryTemplateId() bool {
	if o != nil && o.AuxiliaryTemplateId != nil {
		return true
	}

	return false
}

// SetAuxiliaryTemplateId gets a reference to the given string and assigns it to the AuxiliaryTemplateId field.
func (o *BaseProvisionVDBParametersAllOf) SetAuxiliaryTemplateId(v string) {
	o.AuxiliaryTemplateId = &v
}

// GetFileMappingRules returns the FileMappingRules field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetFileMappingRules() string {
	if o == nil || o.FileMappingRules == nil {
		var ret string
		return ret
	}
	return *o.FileMappingRules
}

// GetFileMappingRulesOk returns a tuple with the FileMappingRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetFileMappingRulesOk() (*string, bool) {
	if o == nil || o.FileMappingRules == nil {
		return nil, false
	}
	return o.FileMappingRules, true
}

// HasFileMappingRules returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasFileMappingRules() bool {
	if o != nil && o.FileMappingRules != nil {
		return true
	}

	return false
}

// SetFileMappingRules gets a reference to the given string and assigns it to the FileMappingRules field.
func (o *BaseProvisionVDBParametersAllOf) SetFileMappingRules(v string) {
	o.FileMappingRules = &v
}

// GetOracleInstanceName returns the OracleInstanceName field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetOracleInstanceName() string {
	if o == nil || o.OracleInstanceName == nil {
		var ret string
		return ret
	}
	return *o.OracleInstanceName
}

// GetOracleInstanceNameOk returns a tuple with the OracleInstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetOracleInstanceNameOk() (*string, bool) {
	if o == nil || o.OracleInstanceName == nil {
		return nil, false
	}
	return o.OracleInstanceName, true
}

// HasOracleInstanceName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasOracleInstanceName() bool {
	if o != nil && o.OracleInstanceName != nil {
		return true
	}

	return false
}

// SetOracleInstanceName gets a reference to the given string and assigns it to the OracleInstanceName field.
func (o *BaseProvisionVDBParametersAllOf) SetOracleInstanceName(v string) {
	o.OracleInstanceName = &v
}

// GetUniqueName returns the UniqueName field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetUniqueName() string {
	if o == nil || o.UniqueName == nil {
		var ret string
		return ret
	}
	return *o.UniqueName
}

// GetUniqueNameOk returns a tuple with the UniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetUniqueNameOk() (*string, bool) {
	if o == nil || o.UniqueName == nil {
		return nil, false
	}
	return o.UniqueName, true
}

// HasUniqueName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasUniqueName() bool {
	if o != nil && o.UniqueName != nil {
		return true
	}

	return false
}

// SetUniqueName gets a reference to the given string and assigns it to the UniqueName field.
func (o *BaseProvisionVDBParametersAllOf) SetUniqueName(v string) {
	o.UniqueName = &v
}

// GetVcdbName returns the VcdbName field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetVcdbName() string {
	if o == nil || o.VcdbName == nil {
		var ret string
		return ret
	}
	return *o.VcdbName
}

// GetVcdbNameOk returns a tuple with the VcdbName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetVcdbNameOk() (*string, bool) {
	if o == nil || o.VcdbName == nil {
		return nil, false
	}
	return o.VcdbName, true
}

// HasVcdbName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasVcdbName() bool {
	if o != nil && o.VcdbName != nil {
		return true
	}

	return false
}

// SetVcdbName gets a reference to the given string and assigns it to the VcdbName field.
func (o *BaseProvisionVDBParametersAllOf) SetVcdbName(v string) {
	o.VcdbName = &v
}

// GetVcdbDatabaseName returns the VcdbDatabaseName field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetVcdbDatabaseName() string {
	if o == nil || o.VcdbDatabaseName == nil {
		var ret string
		return ret
	}
	return *o.VcdbDatabaseName
}

// GetVcdbDatabaseNameOk returns a tuple with the VcdbDatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetVcdbDatabaseNameOk() (*string, bool) {
	if o == nil || o.VcdbDatabaseName == nil {
		return nil, false
	}
	return o.VcdbDatabaseName, true
}

// HasVcdbDatabaseName returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasVcdbDatabaseName() bool {
	if o != nil && o.VcdbDatabaseName != nil {
		return true
	}

	return false
}

// SetVcdbDatabaseName gets a reference to the given string and assigns it to the VcdbDatabaseName field.
func (o *BaseProvisionVDBParametersAllOf) SetVcdbDatabaseName(v string) {
	o.VcdbDatabaseName = &v
}

// GetMountPoint returns the MountPoint field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetMountPoint() string {
	if o == nil || o.MountPoint == nil {
		var ret string
		return ret
	}
	return *o.MountPoint
}

// GetMountPointOk returns a tuple with the MountPoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetMountPointOk() (*string, bool) {
	if o == nil || o.MountPoint == nil {
		return nil, false
	}
	return o.MountPoint, true
}

// HasMountPoint returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasMountPoint() bool {
	if o != nil && o.MountPoint != nil {
		return true
	}

	return false
}

// SetMountPoint gets a reference to the given string and assigns it to the MountPoint field.
func (o *BaseProvisionVDBParametersAllOf) SetMountPoint(v string) {
	o.MountPoint = &v
}

// GetOpenResetLogs returns the OpenResetLogs field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetOpenResetLogs() bool {
	if o == nil || o.OpenResetLogs == nil {
		var ret bool
		return ret
	}
	return *o.OpenResetLogs
}

// GetOpenResetLogsOk returns a tuple with the OpenResetLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetOpenResetLogsOk() (*bool, bool) {
	if o == nil || o.OpenResetLogs == nil {
		return nil, false
	}
	return o.OpenResetLogs, true
}

// HasOpenResetLogs returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasOpenResetLogs() bool {
	if o != nil && o.OpenResetLogs != nil {
		return true
	}

	return false
}

// SetOpenResetLogs gets a reference to the given bool and assigns it to the OpenResetLogs field.
func (o *BaseProvisionVDBParametersAllOf) SetOpenResetLogs(v bool) {
	o.OpenResetLogs = &v
}

// GetSnapshotPolicyId returns the SnapshotPolicyId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetSnapshotPolicyId() string {
	if o == nil || o.SnapshotPolicyId == nil {
		var ret string
		return ret
	}
	return *o.SnapshotPolicyId
}

// GetSnapshotPolicyIdOk returns a tuple with the SnapshotPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetSnapshotPolicyIdOk() (*string, bool) {
	if o == nil || o.SnapshotPolicyId == nil {
		return nil, false
	}
	return o.SnapshotPolicyId, true
}

// HasSnapshotPolicyId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasSnapshotPolicyId() bool {
	if o != nil && o.SnapshotPolicyId != nil {
		return true
	}

	return false
}

// SetSnapshotPolicyId gets a reference to the given string and assigns it to the SnapshotPolicyId field.
func (o *BaseProvisionVDBParametersAllOf) SetSnapshotPolicyId(v string) {
	o.SnapshotPolicyId = &v
}

// GetRetentionPolicyId returns the RetentionPolicyId field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetRetentionPolicyId() string {
	if o == nil || o.RetentionPolicyId == nil {
		var ret string
		return ret
	}
	return *o.RetentionPolicyId
}

// GetRetentionPolicyIdOk returns a tuple with the RetentionPolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetRetentionPolicyIdOk() (*string, bool) {
	if o == nil || o.RetentionPolicyId == nil {
		return nil, false
	}
	return o.RetentionPolicyId, true
}

// HasRetentionPolicyId returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasRetentionPolicyId() bool {
	if o != nil && o.RetentionPolicyId != nil {
		return true
	}

	return false
}

// SetRetentionPolicyId gets a reference to the given string and assigns it to the RetentionPolicyId field.
func (o *BaseProvisionVDBParametersAllOf) SetRetentionPolicyId(v string) {
	o.RetentionPolicyId = &v
}

// GetRecoveryModel returns the RecoveryModel field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetRecoveryModel() string {
	if o == nil || o.RecoveryModel == nil {
		var ret string
		return ret
	}
	return *o.RecoveryModel
}

// GetRecoveryModelOk returns a tuple with the RecoveryModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetRecoveryModelOk() (*string, bool) {
	if o == nil || o.RecoveryModel == nil {
		return nil, false
	}
	return o.RecoveryModel, true
}

// HasRecoveryModel returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasRecoveryModel() bool {
	if o != nil && o.RecoveryModel != nil {
		return true
	}

	return false
}

// SetRecoveryModel gets a reference to the given string and assigns it to the RecoveryModel field.
func (o *BaseProvisionVDBParametersAllOf) SetRecoveryModel(v string) {
	o.RecoveryModel = &v
}

// GetPreScript returns the PreScript field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetPreScript() string {
	if o == nil || o.PreScript == nil {
		var ret string
		return ret
	}
	return *o.PreScript
}

// GetPreScriptOk returns a tuple with the PreScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetPreScriptOk() (*string, bool) {
	if o == nil || o.PreScript == nil {
		return nil, false
	}
	return o.PreScript, true
}

// HasPreScript returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasPreScript() bool {
	if o != nil && o.PreScript != nil {
		return true
	}

	return false
}

// SetPreScript gets a reference to the given string and assigns it to the PreScript field.
func (o *BaseProvisionVDBParametersAllOf) SetPreScript(v string) {
	o.PreScript = &v
}

// GetPostScript returns the PostScript field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetPostScript() string {
	if o == nil || o.PostScript == nil {
		var ret string
		return ret
	}
	return *o.PostScript
}

// GetPostScriptOk returns a tuple with the PostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetPostScriptOk() (*string, bool) {
	if o == nil || o.PostScript == nil {
		return nil, false
	}
	return o.PostScript, true
}

// HasPostScript returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasPostScript() bool {
	if o != nil && o.PostScript != nil {
		return true
	}

	return false
}

// SetPostScript gets a reference to the given string and assigns it to the PostScript field.
func (o *BaseProvisionVDBParametersAllOf) SetPostScript(v string) {
	o.PostScript = &v
}

// GetCdcOnProvision returns the CdcOnProvision field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetCdcOnProvision() bool {
	if o == nil || o.CdcOnProvision == nil {
		var ret bool
		return ret
	}
	return *o.CdcOnProvision
}

// GetCdcOnProvisionOk returns a tuple with the CdcOnProvision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetCdcOnProvisionOk() (*bool, bool) {
	if o == nil || o.CdcOnProvision == nil {
		return nil, false
	}
	return o.CdcOnProvision, true
}

// HasCdcOnProvision returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasCdcOnProvision() bool {
	if o != nil && o.CdcOnProvision != nil {
		return true
	}

	return false
}

// SetCdcOnProvision gets a reference to the given bool and assigns it to the CdcOnProvision field.
func (o *BaseProvisionVDBParametersAllOf) SetCdcOnProvision(v bool) {
	o.CdcOnProvision = &v
}

// GetOnlineLogSize returns the OnlineLogSize field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetOnlineLogSize() int32 {
	if o == nil || o.OnlineLogSize == nil {
		var ret int32
		return ret
	}
	return *o.OnlineLogSize
}

// GetOnlineLogSizeOk returns a tuple with the OnlineLogSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetOnlineLogSizeOk() (*int32, bool) {
	if o == nil || o.OnlineLogSize == nil {
		return nil, false
	}
	return o.OnlineLogSize, true
}

// HasOnlineLogSize returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasOnlineLogSize() bool {
	if o != nil && o.OnlineLogSize != nil {
		return true
	}

	return false
}

// SetOnlineLogSize gets a reference to the given int32 and assigns it to the OnlineLogSize field.
func (o *BaseProvisionVDBParametersAllOf) SetOnlineLogSize(v int32) {
	o.OnlineLogSize = &v
}

// GetOnlineLogGroups returns the OnlineLogGroups field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetOnlineLogGroups() int32 {
	if o == nil || o.OnlineLogGroups == nil {
		var ret int32
		return ret
	}
	return *o.OnlineLogGroups
}

// GetOnlineLogGroupsOk returns a tuple with the OnlineLogGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetOnlineLogGroupsOk() (*int32, bool) {
	if o == nil || o.OnlineLogGroups == nil {
		return nil, false
	}
	return o.OnlineLogGroups, true
}

// HasOnlineLogGroups returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasOnlineLogGroups() bool {
	if o != nil && o.OnlineLogGroups != nil {
		return true
	}

	return false
}

// SetOnlineLogGroups gets a reference to the given int32 and assigns it to the OnlineLogGroups field.
func (o *BaseProvisionVDBParametersAllOf) SetOnlineLogGroups(v int32) {
	o.OnlineLogGroups = &v
}

// GetArchiveLog returns the ArchiveLog field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetArchiveLog() bool {
	if o == nil || o.ArchiveLog == nil {
		var ret bool
		return ret
	}
	return *o.ArchiveLog
}

// GetArchiveLogOk returns a tuple with the ArchiveLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetArchiveLogOk() (*bool, bool) {
	if o == nil || o.ArchiveLog == nil {
		return nil, false
	}
	return o.ArchiveLog, true
}

// HasArchiveLog returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasArchiveLog() bool {
	if o != nil && o.ArchiveLog != nil {
		return true
	}

	return false
}

// SetArchiveLog gets a reference to the given bool and assigns it to the ArchiveLog field.
func (o *BaseProvisionVDBParametersAllOf) SetArchiveLog(v bool) {
	o.ArchiveLog = &v
}

// GetNewDbid returns the NewDbid field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetNewDbid() bool {
	if o == nil || o.NewDbid == nil {
		var ret bool
		return ret
	}
	return *o.NewDbid
}

// GetNewDbidOk returns a tuple with the NewDbid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetNewDbidOk() (*bool, bool) {
	if o == nil || o.NewDbid == nil {
		return nil, false
	}
	return o.NewDbid, true
}

// HasNewDbid returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasNewDbid() bool {
	if o != nil && o.NewDbid != nil {
		return true
	}

	return false
}

// SetNewDbid gets a reference to the given bool and assigns it to the NewDbid field.
func (o *BaseProvisionVDBParametersAllOf) SetNewDbid(v bool) {
	o.NewDbid = &v
}

// GetListenerIds returns the ListenerIds field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetListenerIds() []string {
	if o == nil || o.ListenerIds == nil {
		var ret []string
		return ret
	}
	return o.ListenerIds
}

// GetListenerIdsOk returns a tuple with the ListenerIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetListenerIdsOk() ([]string, bool) {
	if o == nil || o.ListenerIds == nil {
		return nil, false
	}
	return o.ListenerIds, true
}

// HasListenerIds returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasListenerIds() bool {
	if o != nil && o.ListenerIds != nil {
		return true
	}

	return false
}

// SetListenerIds gets a reference to the given []string and assigns it to the ListenerIds field.
func (o *BaseProvisionVDBParametersAllOf) SetListenerIds(v []string) {
	o.ListenerIds = v
}

// GetCustomEnvVars returns the CustomEnvVars field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetCustomEnvVars() map[string]string {
	if o == nil || o.CustomEnvVars == nil {
		var ret map[string]string
		return ret
	}
	return *o.CustomEnvVars
}

// GetCustomEnvVarsOk returns a tuple with the CustomEnvVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetCustomEnvVarsOk() (*map[string]string, bool) {
	if o == nil || o.CustomEnvVars == nil {
		return nil, false
	}
	return o.CustomEnvVars, true
}

// HasCustomEnvVars returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasCustomEnvVars() bool {
	if o != nil && o.CustomEnvVars != nil {
		return true
	}

	return false
}

// SetCustomEnvVars gets a reference to the given map[string]string and assigns it to the CustomEnvVars field.
func (o *BaseProvisionVDBParametersAllOf) SetCustomEnvVars(v map[string]string) {
	o.CustomEnvVars = &v
}

// GetCustomEnvFiles returns the CustomEnvFiles field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetCustomEnvFiles() []string {
	if o == nil || o.CustomEnvFiles == nil {
		var ret []string
		return ret
	}
	return o.CustomEnvFiles
}

// GetCustomEnvFilesOk returns a tuple with the CustomEnvFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetCustomEnvFilesOk() ([]string, bool) {
	if o == nil || o.CustomEnvFiles == nil {
		return nil, false
	}
	return o.CustomEnvFiles, true
}

// HasCustomEnvFiles returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasCustomEnvFiles() bool {
	if o != nil && o.CustomEnvFiles != nil {
		return true
	}

	return false
}

// SetCustomEnvFiles gets a reference to the given []string and assigns it to the CustomEnvFiles field.
func (o *BaseProvisionVDBParametersAllOf) SetCustomEnvFiles(v []string) {
	o.CustomEnvFiles = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *BaseProvisionVDBParametersAllOf) GetTags() []Tag {
	if o == nil || o.Tags == nil {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseProvisionVDBParametersAllOf) GetTagsOk() ([]Tag, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *BaseProvisionVDBParametersAllOf) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *BaseProvisionVDBParametersAllOf) SetTags(v []Tag) {
	o.Tags = v
}

func (o BaseProvisionVDBParametersAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TargetGroupId != nil {
		toSerialize["target_group_id"] = o.TargetGroupId
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DatabaseName != nil {
		toSerialize["database_name"] = o.DatabaseName
	}
	if o.CdbId != nil {
		toSerialize["cdb_id"] = o.CdbId
	}
	if o.ClusterNodeIds != nil {
		toSerialize["cluster_node_ids"] = o.ClusterNodeIds
	}
	if o.TruncateLogOnCheckpoint != nil {
		toSerialize["truncate_log_on_checkpoint"] = o.TruncateLogOnCheckpoint
	}
	if o.OsUsername != nil {
		toSerialize["os_username"] = o.OsUsername
	}
	if o.OsPassword != nil {
		toSerialize["os_password"] = o.OsPassword
	}
	if o.EnvironmentId != nil {
		toSerialize["environment_id"] = o.EnvironmentId
	}
	if o.EnvironmentUserId != nil {
		toSerialize["environment_user_id"] = o.EnvironmentUserId
	}
	if o.RepositoryId != nil {
		toSerialize["repository_id"] = o.RepositoryId
	}
	if o.AutoSelectRepository != nil {
		toSerialize["auto_select_repository"] = o.AutoSelectRepository
	}
	if o.VdbRestart != nil {
		toSerialize["vdb_restart"] = o.VdbRestart
	}
	if o.TemplateId != nil {
		toSerialize["template_id"] = o.TemplateId
	}
	if o.AuxiliaryTemplateId != nil {
		toSerialize["auxiliary_template_id"] = o.AuxiliaryTemplateId
	}
	if o.FileMappingRules != nil {
		toSerialize["file_mapping_rules"] = o.FileMappingRules
	}
	if o.OracleInstanceName != nil {
		toSerialize["oracle_instance_name"] = o.OracleInstanceName
	}
	if o.UniqueName != nil {
		toSerialize["unique_name"] = o.UniqueName
	}
	if o.VcdbName != nil {
		toSerialize["vcdb_name"] = o.VcdbName
	}
	if o.VcdbDatabaseName != nil {
		toSerialize["vcdb_database_name"] = o.VcdbDatabaseName
	}
	if o.MountPoint != nil {
		toSerialize["mount_point"] = o.MountPoint
	}
	if o.OpenResetLogs != nil {
		toSerialize["open_reset_logs"] = o.OpenResetLogs
	}
	if o.SnapshotPolicyId != nil {
		toSerialize["snapshot_policy_id"] = o.SnapshotPolicyId
	}
	if o.RetentionPolicyId != nil {
		toSerialize["retention_policy_id"] = o.RetentionPolicyId
	}
	if o.RecoveryModel != nil {
		toSerialize["recovery_model"] = o.RecoveryModel
	}
	if o.PreScript != nil {
		toSerialize["pre_script"] = o.PreScript
	}
	if o.PostScript != nil {
		toSerialize["post_script"] = o.PostScript
	}
	if o.CdcOnProvision != nil {
		toSerialize["cdc_on_provision"] = o.CdcOnProvision
	}
	if o.OnlineLogSize != nil {
		toSerialize["online_log_size"] = o.OnlineLogSize
	}
	if o.OnlineLogGroups != nil {
		toSerialize["online_log_groups"] = o.OnlineLogGroups
	}
	if o.ArchiveLog != nil {
		toSerialize["archive_log"] = o.ArchiveLog
	}
	if o.NewDbid != nil {
		toSerialize["new_dbid"] = o.NewDbid
	}
	if o.ListenerIds != nil {
		toSerialize["listener_ids"] = o.ListenerIds
	}
	if o.CustomEnvVars != nil {
		toSerialize["custom_env_vars"] = o.CustomEnvVars
	}
	if o.CustomEnvFiles != nil {
		toSerialize["custom_env_files"] = o.CustomEnvFiles
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return json.Marshal(toSerialize)
}

type NullableBaseProvisionVDBParametersAllOf struct {
	value *BaseProvisionVDBParametersAllOf
	isSet bool
}

func (v NullableBaseProvisionVDBParametersAllOf) Get() *BaseProvisionVDBParametersAllOf {
	return v.value
}

func (v *NullableBaseProvisionVDBParametersAllOf) Set(val *BaseProvisionVDBParametersAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseProvisionVDBParametersAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseProvisionVDBParametersAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseProvisionVDBParametersAllOf(val *BaseProvisionVDBParametersAllOf) *NullableBaseProvisionVDBParametersAllOf {
	return &NullableBaseProvisionVDBParametersAllOf{value: val, isSet: true}
}

func (v NullableBaseProvisionVDBParametersAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseProvisionVDBParametersAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


