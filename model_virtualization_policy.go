/*
Delphix DCT API

Delphix DCT API

API version: 3.1.0
Contact: support@delphix.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package delphix_dct_api

import (
	"encoding/json"
)

// checks if the VirtualizationPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualizationPolicy{}

// VirtualizationPolicy struct for VirtualizationPolicy
type VirtualizationPolicy struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Namespace *string `json:"namespace,omitempty"`
	EngineId string `json:"engine_id"`
	PolicyType string `json:"policy_type"`
	TimezoneId string `json:"timezone_id"`
	Schedules []VirtualizationSchedule `json:"schedules"`
}

// NewVirtualizationPolicy instantiates a new VirtualizationPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualizationPolicy(id string, name string, engineId string, policyType string, timezoneId string, schedules []VirtualizationSchedule) *VirtualizationPolicy {
	this := VirtualizationPolicy{}
	this.Id = id
	this.Name = name
	this.EngineId = engineId
	this.PolicyType = policyType
	this.TimezoneId = timezoneId
	this.Schedules = schedules
	return &this
}

// NewVirtualizationPolicyWithDefaults instantiates a new VirtualizationPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualizationPolicyWithDefaults() *VirtualizationPolicy {
	this := VirtualizationPolicy{}
	return &this
}

// GetId returns the Id field value
func (o *VirtualizationPolicy) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *VirtualizationPolicy) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *VirtualizationPolicy) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *VirtualizationPolicy) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *VirtualizationPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *VirtualizationPolicy) SetName(v string) {
	o.Name = v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *VirtualizationPolicy) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualizationPolicy) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *VirtualizationPolicy) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *VirtualizationPolicy) SetNamespace(v string) {
	o.Namespace = &v
}

// GetEngineId returns the EngineId field value
func (o *VirtualizationPolicy) GetEngineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EngineId
}

// GetEngineIdOk returns a tuple with the EngineId field value
// and a boolean to check if the value has been set.
func (o *VirtualizationPolicy) GetEngineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngineId, true
}

// SetEngineId sets field value
func (o *VirtualizationPolicy) SetEngineId(v string) {
	o.EngineId = v
}

// GetPolicyType returns the PolicyType field value
func (o *VirtualizationPolicy) GetPolicyType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value
// and a boolean to check if the value has been set.
func (o *VirtualizationPolicy) GetPolicyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PolicyType, true
}

// SetPolicyType sets field value
func (o *VirtualizationPolicy) SetPolicyType(v string) {
	o.PolicyType = v
}

// GetTimezoneId returns the TimezoneId field value
func (o *VirtualizationPolicy) GetTimezoneId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimezoneId
}

// GetTimezoneIdOk returns a tuple with the TimezoneId field value
// and a boolean to check if the value has been set.
func (o *VirtualizationPolicy) GetTimezoneIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TimezoneId, true
}

// SetTimezoneId sets field value
func (o *VirtualizationPolicy) SetTimezoneId(v string) {
	o.TimezoneId = v
}

// GetSchedules returns the Schedules field value
func (o *VirtualizationPolicy) GetSchedules() []VirtualizationSchedule {
	if o == nil {
		var ret []VirtualizationSchedule
		return ret
	}

	return o.Schedules
}

// GetSchedulesOk returns a tuple with the Schedules field value
// and a boolean to check if the value has been set.
func (o *VirtualizationPolicy) GetSchedulesOk() ([]VirtualizationSchedule, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schedules, true
}

// SetSchedules sets field value
func (o *VirtualizationPolicy) SetSchedules(v []VirtualizationSchedule) {
	o.Schedules = v
}

func (o VirtualizationPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualizationPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	toSerialize["engine_id"] = o.EngineId
	toSerialize["policy_type"] = o.PolicyType
	toSerialize["timezone_id"] = o.TimezoneId
	toSerialize["schedules"] = o.Schedules
	return toSerialize, nil
}

type NullableVirtualizationPolicy struct {
	value *VirtualizationPolicy
	isSet bool
}

func (v NullableVirtualizationPolicy) Get() *VirtualizationPolicy {
	return v.value
}

func (v *NullableVirtualizationPolicy) Set(val *VirtualizationPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualizationPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualizationPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualizationPolicy(val *VirtualizationPolicy) *NullableVirtualizationPolicy {
	return &NullableVirtualizationPolicy{value: val, isSet: true}
}

func (v NullableVirtualizationPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualizationPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


